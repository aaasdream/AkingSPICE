{"version":3,"file":"AkingSPICE.umd.js","sources":["../src/components/base.js","../src/components/resistor.js","../src/components/capacitor.js","../src/components/inductor.js","../src/components/sources.js","../src/components/mosfet.js","../src/parser/netlist.js","../src/core/linalg.js","../src/core/mna.js","../src/analysis/transient.js","../src/analysis/dc.js","../src/core/solver.js","../src/components/threephase.js","../src/components/vcmosfet.js","../src/components/diode.js","../src/components/transformer.js","../src/core/circuit-preprocessor.js","../src/core/webgpu-solver.js","../src/core/gpu-explicit-solver.js","../src/core/explicit-state-solver.js","../src/index.js"],"sourcesContent":["/**\r\n * 基礎元件類別 - 所有電路元件的抽象基類\r\n * \r\n * 這個基類定義了所有電路元件必須實現的介面，包括：\r\n * - 元件識別信息 (名稱、類型、節點)\r\n * - 參數管理 (值、溫度係數等)\r\n * - MNA印記方法介面\r\n * - 時域分析所需的歷史狀態管理\r\n */\r\n\r\nexport class BaseComponent {\r\n    /**\r\n     * @param {string} name 元件名稱 (如 'R1', 'C2')\r\n     * @param {string} type 元件類型 (如 'R', 'C', 'L', 'V', 'I')\r\n     * @param {string[]} nodes 連接節點列表\r\n     * @param {number|string} value 元件值或表達式\r\n     * @param {Object} params 額外參數\r\n     */\r\n    constructor(name, type, nodes, value, params = {}) {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.nodes = [...nodes]; // 複製節點陣列\r\n        this.rawValue = value;\r\n        this.params = { ...params };\r\n        \r\n        // 解析數值\r\n        this.value = this.parseValue(value);\r\n        \r\n        // 暫態分析相關\r\n        this.timeStep = null;\r\n        this.previousValues = new Map(); // 存儲歷史值\r\n        this.historyTerm = 0;\r\n        \r\n        // 操作點信息\r\n        this.operatingPoint = {\r\n            voltage: 0,\r\n            current: 0,\r\n            power: 0\r\n        };\r\n        \r\n        // 模型參數\r\n        this.temperature = params.temp || 27; // 攝氏度\r\n        this.isNonlinear = false;\r\n    }\r\n\r\n    /**\r\n     * 解析元件值，支援工程記號 (如 1K, 2.2u, 3.3m)\r\n     * @param {number|string} value 要解析的值\r\n     * @returns {number} 解析後的數值\r\n     */\r\n    parseValue(value) {\r\n        if (typeof value === 'number') {\r\n            return value;\r\n        }\r\n        \r\n        if (typeof value === 'string') {\r\n            // 移除空白，但保持大小寫敏感性用於區分 M/m\r\n            const trimmedValue = value.trim();\r\n            \r\n            // 工程記號對應表 (大小寫敏感)\r\n            const suffixes = {\r\n                'T': 1e12,   // Tera\r\n                'G': 1e9,    // Giga  \r\n                'MEG': 1e6,  // Mega (特殊處理，避免與 M 混淆)\r\n                'M': 1e6,    // Mega (大寫M = 百萬)\r\n                'K': 1e3,    // Kilo (大寫K)\r\n                'k': 1e3,    // Kilo (小寫k，也常用)\r\n                'm': 1e-3,   // milli (小寫m = 毫)\r\n                'u': 1e-6,   // micro (小寫u)\r\n                'µ': 1e-6,   // micro (μ符號)\r\n                'n': 1e-9,   // nano (小寫n)\r\n                'p': 1e-12,  // pico (小寫p)\r\n                'f': 1e-15   // femto (小寫f)\r\n            };\r\n            \r\n            // 特殊處理MEG (避免與單個M混淆)\r\n            if (trimmedValue.toUpperCase().endsWith('MEG')) {\r\n                const numPart = parseFloat(trimmedValue.slice(0, -3));\r\n                if (!isNaN(numPart)) {\r\n                    return numPart * 1e6;\r\n                }\r\n            }\r\n            \r\n            // 處理其他後綴 (保持大小寫敏感)\r\n            for (const [suffix, multiplier] of Object.entries(suffixes)) {\r\n                if (trimmedValue.endsWith(suffix)) {\r\n                    const numPart = parseFloat(trimmedValue.slice(0, -suffix.length));\r\n                    if (!isNaN(numPart)) {\r\n                        return numPart * multiplier;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // 如果沒有後綴，直接解析數字\r\n            const numValue = parseFloat(trimmedValue);\r\n            if (!isNaN(numValue)) {\r\n                return numValue;\r\n            }\r\n        }\r\n        \r\n        throw new Error(`Cannot parse value: ${value}`);\r\n    }\r\n\r\n    /**\r\n     * 檢查此元件是否需要額外的電流變數 (如電感、電壓源)\r\n     * @returns {boolean}\r\n     */\r\n    needsCurrentVariable() {\r\n        return this.type === 'L' || this.type === 'V' || this.type.includes('V');\r\n    }\r\n\r\n    /**\r\n     * 初始化暫態分析\r\n     * @param {number} timeStep 時間步長\r\n     * @param {string} method 積分方法 (可選)\r\n     */\r\n    initTransient(timeStep, method = 'backward_euler') {\r\n        this.timeStep = timeStep;\r\n        this.integrationMethod = method;\r\n        this.previousValues.clear();\r\n        this.historyTerm = 0;\r\n    }\r\n\r\n    /**\r\n     * 更新歷史狀態 (在每個時間步結束時調用)\r\n     * @param {Map<string, number>} nodeVoltages 節點電壓\r\n     * @param {Map<string, number>} branchCurrents 支路電流\r\n     */\r\n    updateHistory(nodeVoltages, branchCurrents) {\r\n        // 基類預設實現 - 子類應該覆蓋這個方法\r\n        const v1 = nodeVoltages.get(this.nodes[0]) || 0;\r\n        const v2 = nodeVoltages.get(this.nodes[1]) || 0;\r\n        const voltage = v1 - v2;\r\n        \r\n        this.previousValues.set('voltage', voltage);\r\n        this.operatingPoint.voltage = voltage;\r\n    }\r\n\r\n    /**\r\n     * 計算功耗\r\n     * @returns {number} 功耗 (瓦特)\r\n     */\r\n    calculatePower() {\r\n        return Math.abs(this.operatingPoint.voltage * this.operatingPoint.current);\r\n    }\r\n\r\n    /**\r\n     * 獲取元件信息字符串\r\n     * @returns {string}\r\n     */\r\n    toString() {\r\n        return `${this.name} (${this.type}): ${this.nodes.join('-')} = ${this.value}`;\r\n    }\r\n\r\n    /**\r\n     * 驗證元件的有效性\r\n     * @returns {boolean}\r\n     */\r\n    isValid() {\r\n        return this.name && this.type && this.nodes.length >= 2 && \r\n               !isNaN(this.value) && isFinite(this.value);\r\n    }\r\n\r\n    /**\r\n     * 克隆元件\r\n     * @returns {BaseComponent}\r\n     */\r\n    clone() {\r\n        // 對於具體的元件類型，使用正確的構造函數參數\r\n        if (this.constructor.name === 'Resistor' || \r\n            this.constructor.name === 'Capacitor' || \r\n            this.constructor.name === 'Inductor') {\r\n            return new this.constructor(this.name, this.nodes, this.rawValue, this.params);\r\n        } else if (this.constructor.name === 'VoltageSource' || \r\n                   this.constructor.name === 'CurrentSource') {\r\n            return new this.constructor(this.name, this.nodes, this.rawValue, this.params);\r\n        } else {\r\n            // 默認的BaseComponent構造函數\r\n            return new this.constructor(this.name, this.type, this.nodes, this.rawValue, this.params);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 序列化為JSON\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n        return {\r\n            name: this.name,\r\n            type: this.type,\r\n            nodes: this.nodes,\r\n            value: this.value,\r\n            rawValue: this.rawValue,\r\n            params: this.params\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 從JSON反序列化\r\n     * @param {Object} json JSON對象\r\n     * @returns {BaseComponent}\r\n     */\r\n    static fromJSON(json) {\r\n        return new BaseComponent(json.name, json.type, json.nodes, json.rawValue, json.params);\r\n    }\r\n\r\n    // ==================== 顯式狀態更新法新接口 ====================\r\n\r\n    /**\r\n     * 在預處理階段將元件信息註冊到電路預處理器中\r\n     * 這是從物件導向模型轉換為GPU數值模型的關鍵步驟\r\n     * @param {CircuitPreprocessor} preprocessor 預處理器實例\r\n     */\r\n    preprocess(preprocessor) {\r\n        // 基類預設實現 - 對於沒有特殊需求的元件\r\n        // 子類應該覆蓋這個方法來實現具體的預處理邏輯\r\n        console.warn(`Component ${this.name} (${this.type}) does not implement preprocess method`);\r\n    }\r\n\r\n    /**\r\n     * 在每個時間步更新右手側向量 (i) 的貢獻\r\n     * 這裡處理時變源、狀態變量對RHS的影響\r\n     * @param {Float32Array} rhsVector 要更新的RHS向量\r\n     * @param {Float32Array} stateVector 當前狀態向量 (Vc, Il)\r\n     * @param {number} time 當前時間\r\n     * @param {object} componentData 包含元件在緩存中索引的數據\r\n     */\r\n    updateRHS(rhsVector, stateVector, time, componentData) {\r\n        // 基類預設實現 - 大多數無源元件沒有直接貢獻\r\n        // 電流源、電容(視為電壓源)、電感(視為電流源)需要實現\r\n    }\r\n\r\n    /**\r\n     * 在每個時間步結束後，更新狀態變量 (僅對 C 和 L 有意義)\r\n     * 實現顯式積分：Vc(t+dt) = Vc(t) + dt * (Ic/C)，Il(t+dt) = Il(t) + dt * (Vl/L)\r\n     * @param {Float32Array} stateVector 狀態向量\r\n     * @param {Float32Array} nodeVoltages 求得的節點電壓\r\n     * @param {number} dt 時間步長\r\n     * @param {object} componentData 元件數據\r\n     */\r\n    updateState(stateVector, nodeVoltages, dt, componentData) {\r\n        // 基類預設實現 - 只有電容和電感需要實現\r\n        // 電容: dVc/dt = Ic/C = (V_node1 - V_node2 - Vc) * G_large / C\r\n        // 電感: dIl/dt = Vl/L = (V_node1 - V_node2) / L\r\n    }\r\n\r\n    /**\r\n     * 檢查此元件是否為狀態變量 (電容電壓或電感電流)\r\n     * @returns {boolean}\r\n     */\r\n    isStateVariable() {\r\n        return this.type === 'C' || this.type === 'L';\r\n    }\r\n\r\n    /**\r\n     * 獲取狀態變量類型\r\n     * @returns {string|null} 'voltage' for capacitors, 'current' for inductors, null for others\r\n     */\r\n    getStateVariableType() {\r\n        switch (this.type) {\r\n            case 'C': return 'voltage';  // 電容的狀態變量是電壓\r\n            case 'L': return 'current';  // 電感的狀態變量是電流\r\n            default: return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取狀態變量的初始值\r\n     * @returns {number} 初始值\r\n     */\r\n    getInitialStateValue() {\r\n        switch (this.type) {\r\n            case 'C': return this.ic || 0;  // 電容初始電壓\r\n            case 'L': return this.ic || 0;  // 電感初始電流  \r\n            default: return 0;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 線性雙端元件基類\r\n * 提供電阻、電容、電感等線性元件的共同功能\r\n */\r\nexport class LinearTwoTerminal extends BaseComponent {\r\n    constructor(name, type, nodes, value, params = {}) {\r\n        super(name, type, nodes, value, params);\r\n        \r\n        if (nodes.length !== 2) {\r\n            throw new Error(`${type} ${name} must have exactly 2 nodes`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取元件兩端的電壓\r\n     * @param {Map<string, number>} nodeVoltages 節點電壓映射\r\n     * @returns {number} 電壓差 V(n1) - V(n2)\r\n     */\r\n    getVoltage(nodeVoltages) {\r\n        const v1 = nodeVoltages.get(this.nodes[0]) || 0;\r\n        const v2 = nodeVoltages.get(this.nodes[1]) || 0;\r\n        return v1 - v2;\r\n    }\r\n}\r\n\r\n/**\r\n * 受控源基類\r\n * 為各種受控源 (VCVS, VCCS, CCVS, CCCS) 提供基礎架構\r\n */\r\nexport class ControlledSource extends BaseComponent {\r\n    /**\r\n     * @param {string} name 元件名稱\r\n     * @param {string} type 元件類型\r\n     * @param {string[]} outputNodes 輸出節點 [正, 負]\r\n     * @param {string[]} controlNodes 控制節點 [正, 負]\r\n     * @param {number} gainValue 增益值\r\n     * @param {Object} params 額外參數\r\n     */\r\n    constructor(name, type, outputNodes, controlNodes, gainValue, params = {}) {\r\n        // 合併輸出和控制節點\r\n        const allNodes = [...outputNodes, ...controlNodes];\r\n        super(name, type, allNodes, gainValue, params);\r\n        \r\n        this.outputNodes = [...outputNodes];\r\n        this.controlNodes = [...controlNodes];\r\n        \r\n        if (outputNodes.length !== 2 || controlNodes.length !== 2) {\r\n            throw new Error(`${type} ${name} must have 2 output nodes and 2 control nodes`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取控制信號 (電壓或電流)\r\n     * @param {Map<string, number>} nodeVoltages 節點電壓\r\n     * @param {Map<string, number>} branchCurrents 支路電流\r\n     * @returns {number} 控制信號值\r\n     */\r\n    getControlSignal(nodeVoltages, branchCurrents) {\r\n        // 基類預設返回控制電壓\r\n        const vc1 = nodeVoltages.get(this.controlNodes[0]) || 0;\r\n        const vc2 = nodeVoltages.get(this.controlNodes[1]) || 0;\r\n        return vc1 - vc2;\r\n    }\r\n}","/**\r\n * 電阻元件模型\r\n * 實現線性電阻的所有功能，包括溫度係數和功率計算\r\n */\r\n\r\nimport { LinearTwoTerminal } from './base.js';\r\n\r\nexport class Resistor extends LinearTwoTerminal {\r\n    /**\r\n     * @param {string} name 電阻名稱 (如 'R1')\r\n     * @param {string[]} nodes 連接節點 [n1, n2]\r\n     * @param {number|string} resistance 電阻值 (歐姆)\r\n     * @param {Object} params 額外參數\r\n     */\r\n    constructor(name, nodes, resistance, params = {}) {\r\n        super(name, 'R', nodes, resistance, params);\r\n\r\n        // 電阻特定參數\r\n        this.tc1 = params.tc1 || 0;      // 一次溫度係數 (1/°C)\r\n        this.tc2 = params.tc2 || 0;      // 二次溫度係數 (1/°C²)\r\n        this.tnom = params.tnom || 27;   // 標稱溫度 (°C)\r\n        this.powerRating = params.power || Infinity; // 額定功率 (W)\r\n\r\n        // 計算當前溫度下的電阻值\r\n        this.updateTemperatureCoefficient();\r\n    }\r\n\r\n    /**\r\n     * 根據溫度更新電阻值\r\n     */\r\n    updateTemperatureCoefficient() {\r\n        const deltaT = this.temperature - this.tnom;\r\n        const tempFactor = 1 + this.tc1 * deltaT + this.tc2 * deltaT * deltaT;\r\n        this.actualValue = this.value * tempFactor;\r\n    }\r\n\r\n    /**\r\n     * 獲取當前工作溫度下的電阻值\r\n     * @returns {number} 實際電阻值 (歐姆)\r\n     */\r\n    getResistance() {\r\n        return this.actualValue || this.value;\r\n    }\r\n\r\n    // ==================== 顯式狀態更新法接口 ====================\r\n\r\n    /**\r\n     * 電阻預處理 - 添加導納到G矩陣\r\n     * @param {CircuitPreprocessor} preprocessor 預處理器\r\n     */\r\n    preprocess(preprocessor) {\r\n        // 獲取節點索引\r\n        const node1 = preprocessor.getNodeIndex(this.nodes[0]);\r\n        const node2 = preprocessor.getNodeIndex(this.nodes[1]);\r\n\r\n        // 計算電導\r\n        const conductance = this.getConductance();\r\n\r\n        // 添加到G矩陣: G[i,i] += G, G[j,j] += G, G[i,j] -= G, G[j,i] -= G\r\n        if (node1 >= 0) {\r\n            preprocessor.addConductance(node1, node1, conductance);\r\n            if (node2 >= 0) {\r\n                preprocessor.addConductance(node1, node2, -conductance);\r\n            }\r\n        }\r\n\r\n        if (node2 >= 0) {\r\n            preprocessor.addConductance(node2, node2, conductance);\r\n            if (node1 >= 0) {\r\n                preprocessor.addConductance(node2, node1, -conductance);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取電導值\r\n     * @returns {number} 電導值 (西門子)\r\n     */\r\n    getConductance() {\r\n        const resistance = this.getResistance();\r\n        if (resistance === 0) {\r\n            throw new Error(`Zero resistance in ${this.name}`);\r\n        }\r\n        return 1 / resistance;\r\n    }\r\n\r\n    /**\r\n     * 計算通過電阻的電流 (使用歐姆定律)\r\n     * @param {Map<string, number>} nodeVoltages 節點電壓\r\n     * @returns {number} 電流 (安培)，正值表示從n1流向n2\r\n     */\r\n    getCurrent(nodeVoltages) {\r\n        const voltage = this.getVoltage(nodeVoltages);\r\n        const current = voltage / this.getResistance();\r\n        this.operatingPoint.current = current;\r\n        return current;\r\n    }\r\n\r\n    /**\r\n     * 更新歷史狀態\r\n     * @param {Map<string, number>} nodeVoltages 節點電壓\r\n     * @param {Map<string, number>} branchCurrents 支路電流\r\n     */\r\n    updateHistory(nodeVoltages, branchCurrents) {\r\n        super.updateHistory(nodeVoltages, branchCurrents);\r\n\r\n        // 計算並存儲電流\r\n        const current = this.getCurrent(nodeVoltages);\r\n        this.previousValues.set('current', current);\r\n\r\n        // 計算功耗\r\n        this.operatingPoint.power = this.operatingPoint.voltage * current;\r\n    }\r\n\r\n    /**\r\n     * 更新RHS向量 - 電阻不貢獻電流源項\r\n     * @param {Float32Array} rhsVector RHS向量\r\n     * @param {Float32Array} stateVector 狀態向量\r\n     * @param {number} time 當前時間\r\n     * @param {Object} componentData 元件數據\r\n     */\r\n    updateRHS(rhsVector, stateVector, time, componentData) {\r\n        // 電阻不產生電流源，所以不需要修改RHS向量\r\n        // 這個方法存在是為了滿足ExplicitStateSolver的接口要求\r\n    }\r\n\r\n    /**\r\n     * 檢查是否超過功率額定值\r\n     * @returns {boolean} 如果超過額定功率返回true\r\n     */\r\n    isOverPower() {\r\n        return this.operatingPoint.power > this.powerRating;\r\n    }\r\n\r\n    /**\r\n     * 獲取電阻器資訊\r\n     * @returns {Object} 詳細信息\r\n     */\r\n    getInfo() {\r\n        return {\r\n            ...super.toJSON(),\r\n            actualResistance: this.getResistance(),\r\n            conductance: this.getConductance(),\r\n            tc1: this.tc1,\r\n            tc2: this.tc2,\r\n            powerRating: this.powerRating,\r\n            operatingPoint: { ...this.operatingPoint },\r\n            overPower: this.isOverPower()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 驗證電阻器參數\r\n     * @returns {boolean}\r\n     */\r\n    isValid() {\r\n        return super.isValid() && this.value > 0;\r\n    }\r\n\r\n    toString() {\r\n        const resistance = this.getResistance();\r\n        let resistanceStr;\r\n\r\n        // 格式化電阻值顯示\r\n        if (resistance >= 1e6) {\r\n            resistanceStr = `${(resistance / 1e6).toFixed(2)}MΩ`;\r\n        } else if (resistance >= 1e3) {\r\n            resistanceStr = `${(resistance / 1e3).toFixed(2)}kΩ`;\r\n        } else {\r\n            resistanceStr = `${resistance.toFixed(2)}Ω`;\r\n        }\r\n\r\n        return `${this.name}: ${this.nodes[0]}-${this.nodes[1]} ${resistanceStr}`;\r\n    }\r\n}\r\n\r\n/**\r\n * 可變電阻 (電位器) 模型\r\n */\r\nexport class Potentiometer extends Resistor {\r\n    /**\r\n     * @param {string} name 電位器名稱\r\n     * @param {string[]} nodes 連接節點 [端子1, 滑動端, 端子2]\r\n     * @param {number} totalResistance 總電阻值\r\n     * @param {number} position 滑動位置 (0-1)\r\n     * @param {Object} params 額外參數\r\n     */\r\n    constructor(name, nodes, totalResistance, position = 0.5, params = {}) {\r\n        // 電位器需要3個節點\r\n        if (nodes.length !== 3) {\r\n            throw new Error('Potentiometer must have exactly 3 nodes');\r\n        }\r\n\r\n        super(name, [nodes[0], nodes[2]], totalResistance, params);\r\n        this.type = 'POT';\r\n        this.nodes = [...nodes]; // [端子1, 滑動端, 端子2]\r\n        this.position = Math.max(0, Math.min(1, position)); // 限制在0-1範圍\r\n        this.totalResistance = totalResistance;\r\n    }\r\n\r\n    /**\r\n     * 設置滑動位置\r\n     * @param {number} position 位置 (0-1)\r\n     */\r\n    setPosition(position) {\r\n        this.position = Math.max(0, Math.min(1, position));\r\n    }\r\n\r\n    /**\r\n     * 獲取上半段電阻值 (端子1到滑動端)\r\n     * @returns {number} 電阻值\r\n     */\r\n    getUpperResistance() {\r\n        const minRes = 1e-6; // 防止零電阻\r\n        return Math.max(minRes, this.totalResistance * this.position);\r\n    }\r\n\r\n    /**\r\n     * 獲取下半段電阻值 (滑動端到端子2)\r\n     * @returns {number} 電阻值\r\n     */\r\n    getLowerResistance() {\r\n        const minRes = 1e-6; // 防止零電阻\r\n        return Math.max(minRes, this.totalResistance * (1 - this.position));\r\n    }\r\n\r\n    toString() {\r\n        return `${this.name}: ${this.nodes[0]}-${this.nodes[1]}-${this.nodes[2]} ${this.totalResistance}Ω (pos: ${(this.position * 100).toFixed(1)}%)`;\r\n    }\r\n}","/**\r\n * 電容元件模型\r\n * 實現線性電容的所有功能，包括暫態分析的伴隨模型\r\n */\r\n\r\nimport { LinearTwoTerminal } from './base.js';\r\n\r\nexport class Capacitor extends LinearTwoTerminal {\r\n    /**\r\n     * @param {string} name 電容名稱 (如 'C1')\r\n     * @param {string[]} nodes 連接節點 [n1, n2]\r\n     * @param {number|string} capacitance 電容值 (法拉)\r\n     * @param {Object} params 額外參數\r\n     */\r\n    constructor(name, nodes, capacitance, params = {}) {\r\n        super(name, 'C', nodes, capacitance, params);\r\n        \r\n        // 電容特定參數\r\n        this.ic = params.ic || 0;        // 初始電壓 (V)\r\n        this.tc1 = params.tc1 || 0;      // 一次溫度係數\r\n        this.tc2 = params.tc2 || 0;      // 二次溫度係數\r\n        this.tnom = params.tnom || 27;   // 標稱溫度 (°C)\r\n        this.voltageRating = params.voltage || Infinity; // 額定電壓 (V)\r\n        \r\n        // 計算溫度修正後的電容值\r\n        this.updateTemperatureCoefficient();\r\n        \r\n        // 顯式方法相關 - 電容被視為電壓源，使用工業標準大導納法\r\n        this.largeAdmittance = 1e3;  // 工業標準值，確保G矩陣非奇異但避免數值精度問題\r\n    }\r\n\r\n    /**\r\n     * 根據溫度更新電容值\r\n     */\r\n    updateTemperatureCoefficient() {\r\n        const deltaT = this.temperature - this.tnom;\r\n        const tempFactor = 1 + this.tc1 * deltaT + this.tc2 * deltaT * deltaT;\r\n        this.actualValue = this.value * tempFactor;\r\n    }\r\n\r\n    /**\r\n     * 獲取當前工作溫度下的電容值\r\n     * @returns {number} 實際電容值 (法拉)\r\n     */\r\n    getCapacitance() {\r\n        return this.actualValue || this.value;\r\n    }\r\n\r\n    // ==================== 顯式狀態更新法接口 ====================\r\n    \r\n    /**\r\n     * 電容預處理 - 註冊為狀態變量 (修正後的顯式方法)\r\n     * 在顯式方法中，電容被建模為理想電壓源但不添加大導納到G矩陣\r\n     * G矩陣只包含純電阻和VCCS，電容的影響完全通過RHS向量體現\r\n     * @param {CircuitPreprocessor} preprocessor 預處理器\r\n     */\r\n    preprocess(preprocessor) {\r\n        // 獲取節點索引\r\n        this.node1Idx = preprocessor.getNodeIndex(this.nodes[0]);\r\n        this.node2Idx = preprocessor.getNodeIndex(this.nodes[1]);\r\n        \r\n        // 註冊為狀態變量 (電壓類型)\r\n        // 這將在 identifyStateVariables 階段完成，這裡只記錄索引\r\n        this.componentData = {\r\n            node1: this.node1Idx,\r\n            node2: this.node2Idx,\r\n            capacitance: this.getCapacitance(),\r\n            initialVoltage: this.ic\r\n        };\r\n        \r\n        // 🔥 核心修正：使用標準大導納法確保G矩陣非奇異\r\n        // 電容被建模為：大導納 + 等效電流源\r\n        // 這是業界標準方法，保證數值穩定性\r\n        if (this.node1Idx >= 0) {\r\n            preprocessor.addConductance(this.node1Idx, this.node1Idx, this.largeAdmittance);\r\n            if (this.node2Idx >= 0) {\r\n                preprocessor.addConductance(this.node1Idx, this.node2Idx, -this.largeAdmittance);\r\n            }\r\n        }\r\n        \r\n        if (this.node2Idx >= 0) {\r\n            preprocessor.addConductance(this.node2Idx, this.node2Idx, this.largeAdmittance);\r\n            if (this.node1Idx >= 0) {\r\n                preprocessor.addConductance(this.node2Idx, this.node1Idx, -this.largeAdmittance);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新RHS向量 - 電容作為電壓源的等效電流源貢獻\r\n     * 使用標準大導納法：I_eq = Vc(t) * G_large\r\n     * @param {Float32Array} rhsVector RHS向量\r\n     * @param {Float32Array} stateVector 狀態向量 [Vc1, Vc2, ...]\r\n     * @param {number} time 當前時間\r\n     * @param {object} componentData 組件數據\r\n     */\r\n    updateRHS(rhsVector, stateVector, time, componentData) {\r\n        if (!componentData) return;\r\n        \r\n        // 獲取當前電容電壓 Vc(t)（狀態變量）\r\n        const stateIndex = componentData.stateIndex;\r\n        if (stateIndex === undefined || !stateVector) return;\r\n        \r\n        const currentVc = stateVector[stateIndex] || 0;\r\n        \r\n        // 🔥 核心修正：計算等效電流源貢獻 I_eq = Vc(t) * G_large\r\n        // 這是標準大導納法的RHS項\r\n        const currentContribution = this.largeAdmittance * currentVc;\r\n        \r\n        // 將電流源貢獻添加到RHS向量\r\n        // 電流從 n2 流向 n1（按照電壓源極性）\r\n        if (this.node1Idx >= 0) {\r\n            rhsVector[this.node1Idx] += currentContribution;\r\n        }\r\n        if (this.node2Idx >= 0) {\r\n            rhsVector[this.node2Idx] -= currentContribution;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新電容狀態變數 - 標準大導納法\r\n     * 🔥 核心修正：根據求解出的節點電壓計算流過電容的真實電流\r\n     * @param {Map} nodeVoltageMap 節點電壓映射\r\n     * @param {Float32Array} solutionVector 解向量\r\n     * @param {number} dt 時間步長\r\n     * @param {number} currentTime 當前時間\r\n     * @param {Map} nodeMap 節點映射\r\n     * @param {Matrix} gMatrix G矩陣\r\n     */\r\n    updateState(nodeVoltageMap, solutionVector, dt, currentTime, nodeMap, gMatrix) {\r\n        // 這個方法由求解器的備用路徑統一處理，\r\n        // 具體實現在 explicit-state-solver.js 的 updateStateVariables 方法中\r\n        // 標準大導納法：Ic = (V_node - Vc(t)) * G_large\r\n    }\r\n\r\n    /**\r\n     * 計算電容電流 i = C * dv/dt\r\n     * @param {Map<string, number>} nodeVoltages 節點電壓\r\n     * @returns {number} 電流 (安培)，正值表示從n1流向n2\r\n     */\r\n    getCurrent(nodeVoltages) {\r\n        const currentVoltage = this.getVoltage(nodeVoltages);\r\n        \r\n        if (!this.timeStep) {\r\n            // DC分析：電容視為開路\r\n            this.operatingPoint.current = 0;\r\n            return 0;\r\n        }\r\n        \r\n        const previousVoltage = this.previousValues.get('voltage') || 0;\r\n        const previousCurrent = this.previousValues.get('current') || 0;\r\n        const C = this.getCapacitance();\r\n        \r\n        let current;\r\n        if (this.integrationMethod === 'trapezoidal') {\r\n            // 梯形法：i_n = 2C/h * (v_n - v_n-1) - i_n-1\r\n            current = (2 * C / this.timeStep) * (currentVoltage - previousVoltage) - previousCurrent;\r\n        } else {\r\n            // 後向歐拉法：i = C * (v(t) - v(t-h)) / h\r\n            current = C * (currentVoltage - previousVoltage) / this.timeStep;\r\n        }\r\n        \r\n        this.operatingPoint.current = current;\r\n        return current;\r\n    }\r\n\r\n    /**\r\n     * 計算存儲的能量 E = 0.5 * C * V²\r\n     * @param {Map<string, number>} nodeVoltages 節點電壓\r\n     * @returns {number} 能量 (焦耳)\r\n     */\r\n    getStoredEnergy(nodeVoltages) {\r\n        const voltage = this.getVoltage(nodeVoltages);\r\n        const C = this.getCapacitance();\r\n        return 0.5 * C * voltage * voltage;\r\n    }\r\n\r\n    /**\r\n     * 更新歷史狀態\r\n     * @param {Map<string, number>} nodeVoltages 節點電壓\r\n     * @param {Map<string, number>} branchCurrents 支路電流\r\n     */\r\n    updateHistory(nodeVoltages, branchCurrents) {\r\n        super.updateHistory(nodeVoltages, branchCurrents);\r\n        \r\n        const voltage = this.getVoltage(nodeVoltages);\r\n        const current = this.getCurrent(nodeVoltages);\r\n        \r\n        // 🔥 關鍵修正：先為下一個時間步準備伴隨模型（基於當前歷史值）\r\n        this.updateCompanionModel();\r\n        \r\n        // 然後更新歷史值為當前值\r\n        this.previousValues.set('voltage', voltage);\r\n        this.previousValues.set('current', current);\r\n        \r\n        // 計算功耗 (對理想電容應該為0，但實際中可能有數值誤差)\r\n        this.operatingPoint.power = voltage * current;\r\n    }\r\n\r\n    /**\r\n     * 檢查是否超過電壓額定值\r\n     * @param {Map<string, number>} nodeVoltages 節點電壓\r\n     * @returns {boolean} 如果超過額定電壓返回true\r\n     */\r\n    isOverVoltage(nodeVoltages) {\r\n        const voltage = Math.abs(this.getVoltage(nodeVoltages));\r\n        return voltage > this.voltageRating;\r\n    }\r\n\r\n    /**\r\n     * 獲取電容器資訊\r\n     * @param {Map<string, number>} nodeVoltages 節點電壓\r\n     * @returns {Object} 詳細信息\r\n     */\r\n    getInfo(nodeVoltages = null) {\r\n        const info = {\r\n            ...super.toJSON(),\r\n            actualCapacitance: this.getCapacitance(),\r\n            ic: this.ic,\r\n            tc1: this.tc1,\r\n            tc2: this.tc2,\r\n            voltageRating: this.voltageRating,\r\n            operatingPoint: { ...this.operatingPoint }\r\n        };\r\n        \r\n        if (nodeVoltages) {\r\n            info.storedEnergy = this.getStoredEnergy(nodeVoltages);\r\n            info.overVoltage = this.isOverVoltage(nodeVoltages);\r\n        }\r\n        \r\n        if (this.timeStep) {\r\n            info.equivalentConductance = this.equivalentConductance;\r\n            info.historyCurrentSource = this.historyCurrentSource;\r\n        }\r\n        \r\n        return info;\r\n    }\r\n\r\n    /**\r\n     * 驗證電容器參數\r\n     * @returns {boolean}\r\n     */\r\n    isValid() {\r\n        return super.isValid() && this.value > 0;\r\n    }\r\n\r\n    toString() {\r\n        const capacitance = this.getCapacitance();\r\n        let capacitanceStr;\r\n        \r\n        // 格式化電容值顯示\r\n        if (capacitance >= 1e-3) {\r\n            capacitanceStr = `${(capacitance * 1e3).toFixed(2)}mF`;\r\n        } else if (capacitance >= 1e-6) {\r\n            capacitanceStr = `${(capacitance * 1e6).toFixed(2)}µF`;\r\n        } else if (capacitance >= 1e-9) {\r\n            capacitanceStr = `${(capacitance * 1e9).toFixed(2)}nF`;\r\n        } else if (capacitance >= 1e-12) {\r\n            capacitanceStr = `${(capacitance * 1e12).toFixed(2)}pF`;\r\n        } else {\r\n            capacitanceStr = `${capacitance.toExponential(2)}F`;\r\n        }\r\n        \r\n        let result = `${this.name}: ${this.nodes[0]}-${this.nodes[1]} ${capacitanceStr}`;\r\n        if (this.ic !== 0) {\r\n            result += ` IC=${this.ic}V`;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * 可變電容 (變容二極體或可調電容) 模型\r\n */\r\nexport class VariableCapacitor extends Capacitor {\r\n    /**\r\n     * @param {string} name 可變電容名稱\r\n     * @param {string[]} nodes 連接節點 [n1, n2]\r\n     * @param {number} minCapacitance 最小電容值\r\n     * @param {number} maxCapacitance 最大電容值\r\n     * @param {number} controlValue 控制值 (0-1 或電壓值)\r\n     * @param {Object} params 額外參數\r\n     */\r\n    constructor(name, nodes, minCapacitance, maxCapacitance, controlValue = 0.5, params = {}) {\r\n        const averageCapacitance = (minCapacitance + maxCapacitance) / 2;\r\n        super(name, nodes, averageCapacitance, params);\r\n        \r\n        this.type = 'VCAP';\r\n        this.minCapacitance = minCapacitance;\r\n        this.maxCapacitance = maxCapacitance;\r\n        this.controlValue = controlValue;\r\n        this.controlType = params.controlType || 'linear'; // 'linear' 或 'voltage'\r\n    }\r\n\r\n    /**\r\n     * 根據控制值計算當前電容值\r\n     * @returns {number} 當前電容值\r\n     */\r\n    getCapacitance() {\r\n        let ratio;\r\n        \r\n        if (this.controlType === 'voltage') {\r\n            // 基於電壓的控制 (如變容二極體)\r\n            const Vj = this.controlValue; // 反向偏壓\r\n            const C0 = this.maxCapacitance; // 零偏壓時的電容\r\n            const Vbi = 0.7; // 內建電位 (V)\r\n            const m = 0.5; // 分級係數\r\n            \r\n            // 變容二極體方程式: C = C0 / (1 - Vj/Vbi)^m\r\n            if (Vj < Vbi) {\r\n                ratio = C0 / Math.pow(1 - Vj/Vbi, m);\r\n                ratio = Math.max(this.minCapacitance, Math.min(this.maxCapacitance, ratio));\r\n            } else {\r\n                ratio = this.minCapacitance;\r\n            }\r\n        } else {\r\n            // 線性控制 (如可調電容)\r\n            const normalizedControl = Math.max(0, Math.min(1, this.controlValue));\r\n            ratio = this.minCapacitance + normalizedControl * (this.maxCapacitance - this.minCapacitance);\r\n        }\r\n        \r\n        // 應用溫度係數\r\n        const deltaT = this.temperature - this.tnom;\r\n        const tempFactor = 1 + this.tc1 * deltaT + this.tc2 * deltaT * deltaT;\r\n        \r\n        return ratio * tempFactor;\r\n    }\r\n\r\n    /**\r\n     * 設置控制值\r\n     * @param {number} value 控制值\r\n     */\r\n    setControlValue(value) {\r\n        this.controlValue = value;\r\n    }\r\n\r\n    toString() {\r\n        const capacitance = this.getCapacitance();\r\n        const minCap = this.minCapacitance * 1e12;\r\n        const maxCap = this.maxCapacitance * 1e12;\r\n        const currentCap = capacitance * 1e12;\r\n        \r\n        return `${this.name}: ${this.nodes[0]}-${this.nodes[1]} ${currentCap.toFixed(2)}pF (${minCap.toFixed(0)}-${maxCap.toFixed(0)}pF, ctrl=${this.controlValue})`;\r\n    }\r\n}","/**\r\n * 電感元件模型\r\n * 實現線性電感的所有功能，包括暫態分析的伴隨模型\r\n */\r\n\r\nimport { LinearTwoTerminal } from './base.js';\r\n\r\nexport class Inductor extends LinearTwoTerminal {\r\n    /**\r\n     * @param {string} name 電感名稱 (如 'L1')\r\n     * @param {string[]} nodes 連接節點 [n1, n2]\r\n     * @param {number|string} inductance 電感值 (亨利)\r\n     * @param {Object} params 額外參數\r\n     */\r\n    constructor(name, nodes, inductance, params = {}) {\r\n        super(name, 'L', nodes, inductance, params);\r\n        \r\n        // 電感特定參數\r\n        this.ic = params.ic || 0;        // 初始電流 (A)\r\n        this.resistance = params.r || 0; // 寄生電阻 (Ω)\r\n        this.tc1 = params.tc1 || 0;      // 一次溫度係數\r\n        this.tc2 = params.tc2 || 0;      // 二次溫度係數\r\n        this.tnom = params.tnom || 27;   // 標稱溫度 (°C)\r\n        this.currentRating = params.current || Infinity; // 額定電流 (A)\r\n        \r\n        // 計算溫度修正後的電感值\r\n        this.updateTemperatureCoefficient();\r\n        \r\n        // 顯式方法相關 - 電感被視為電流源\r\n        // 耦合電感支持 (未來擴展)\r\n        this.couplings = null;\r\n    }\r\n\r\n    /**\r\n     * 根據溫度更新電感值\r\n     */\r\n    updateTemperatureCoefficient() {\r\n        const deltaT = this.temperature - this.tnom;\r\n        const tempFactor = 1 + this.tc1 * deltaT + this.tc2 * deltaT * deltaT;\r\n        this.actualValue = this.value * tempFactor;\r\n    }\r\n\r\n    /**\r\n     * 獲取當前工作溫度下的電感值\r\n     * @returns {number} 實際電感值 (亨利)\r\n     */\r\n    getInductance() {\r\n        return this.actualValue || this.value;\r\n    }\r\n\r\n    /**\r\n     * 檢查此元件是否需要額外的電流變數\r\n     * @returns {boolean}\r\n     */\r\n    needsCurrentVariable() {\r\n        return true;\r\n    }\r\n\r\n    // ==================== 顯式狀態更新法接口 ====================\r\n    \r\n    /**\r\n     * 電感預處理 - 註冊為狀態變量（電流）\r\n     * 在顯式方法中，電感被建模為理想電流源 (值 = Il(t))\r\n     * @param {CircuitPreprocessor} preprocessor 預處理器\r\n     */\r\n    preprocess(preprocessor) {\r\n        // 獲取節點索引\r\n        this.node1Idx = preprocessor.getNodeIndex(this.nodes[0]);\r\n        this.node2Idx = preprocessor.getNodeIndex(this.nodes[1]);\r\n        \r\n        // 註冊為狀態變量 (電流類型)\r\n        // 這將在 identifyStateVariables 階段完成\r\n        this.componentData = {\r\n            node1: this.node1Idx,\r\n            node2: this.node2Idx,\r\n            inductance: this.getInductance(),\r\n            initialCurrent: this.ic,\r\n            resistance: this.resistance\r\n        };\r\n        \r\n        // 電感被建模為電流源，不直接影響G矩陣\r\n        // (電流源只影響RHS向量)\r\n        // 🔥 修正：電感不需要大導納，因為它是理想電流源\r\n        \r\n        // 如果有寄生電阻，添加到G矩陣\r\n        if (this.resistance > 0) {\r\n            const conductance = 1 / this.resistance;\r\n            if (this.node1Idx >= 0) {\r\n                preprocessor.addConductance(this.node1Idx, this.node1Idx, conductance);\r\n                if (this.node2Idx >= 0) {\r\n                    preprocessor.addConductance(this.node1Idx, this.node2Idx, -conductance);\r\n                }\r\n            }\r\n            if (this.node2Idx >= 0) {\r\n                preprocessor.addConductance(this.node2Idx, this.node2Idx, conductance);\r\n                if (this.node1Idx >= 0) {\r\n                    preprocessor.addConductance(this.node2Idx, this.node1Idx, -conductance);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新RHS向量 - 電感作為電流源的貢獻\r\n     * 電感電流源：I = Il(t) 從 node1 流向 node2\r\n     * @param {Float32Array} rhsVector RHS向量\r\n     * @param {Float32Array} stateVector 狀態向量 [..., Il1, Il2, ...]\r\n     * @param {number} time 當前時間\r\n     * @param {object} componentData 組件數據\r\n     */\r\n    updateRHS(rhsVector, stateVector, time, componentData) {\r\n        if (!componentData) return;\r\n        \r\n        // 獲取當前電感電流 (狀態變量)\r\n        const stateIndex = componentData.stateIndex;\r\n        if (stateIndex === undefined || !stateVector) return;\r\n        \r\n        const currentIl = stateVector[stateIndex] || 0;\r\n        \r\n        // 電流源貢獻: I 從 node1 流向 node2\r\n        if (this.node1Idx >= 0) {\r\n            rhsVector[this.node1Idx] -= currentIl;  // 電流流出 node1\r\n        }\r\n        if (this.node2Idx >= 0) {\r\n            rhsVector[this.node2Idx] += currentIl;  // 電流流入 node2\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 計算電感電壓 v = L * di/dt\r\n     * @param {number} current 當前電流\r\n     * @returns {number} 電壓 (伏特)\r\n     */\r\n    getVoltageFromCurrent(current) {\r\n        if (!this.timeStep) {\r\n            // DC分析：電感視為短路 (忽略寄生電阻)\r\n            return current * this.resistance;\r\n        }\r\n        \r\n        const previousCurrent = this.previousValues.get('current') || 0;\r\n        const previousVoltage = this.previousValues.get('voltage') || 0;\r\n        const L = this.getInductance();\r\n        \r\n        let voltage;\r\n        if (this.integrationMethod === 'trapezoidal') {\r\n            // 梯形法: v_n = 2L/h * (i_n - i_n-1) - v_n-1 + Rs * i_n\r\n            const inductiveVoltage = (2 * L / this.timeStep) * (current - previousCurrent) - previousVoltage;\r\n            voltage = inductiveVoltage + this.resistance * current;\r\n        } else {\r\n            // 後向歐拉法: v = L * (i(t) - i(t-h)) / h + R * i(t)\r\n            const diDt = (current - previousCurrent) / this.timeStep;\r\n            voltage = L * diDt + this.resistance * current;\r\n        }\r\n        \r\n        this.operatingPoint.current = current;\r\n        this.operatingPoint.voltage = voltage;\r\n        \r\n        return voltage;\r\n    }\r\n\r\n    /**\r\n     * 計算存儲的磁能 E = 0.5 * L * I²\r\n     * @param {number} current 電流\r\n     * @returns {number} 能量 (焦耳)\r\n     */\r\n    getStoredEnergy(current) {\r\n        const L = this.getInductance();\r\n        return 0.5 * L * current * current;\r\n    }\r\n\r\n    /**\r\n     * 更新狀態變量 - 顯式積分方法\r\n     * dIl/dt = Vl/L，其中 Vl 是施加在電感上的電壓\r\n     * @param {Float32Array} stateVector 狀態向量\r\n     * @param {Float32Array} nodeVoltages 節點電壓解\r\n     * @param {number} dt 時間步長\r\n     * @param {object} componentData 組件數據\r\n     */\r\n    updateState(stateVector, nodeVoltages, dt, componentData) {\r\n        if (!componentData || componentData.stateIndex === undefined) return;\r\n        \r\n        const stateIndex = componentData.stateIndex;\r\n        const currentIl = stateVector[stateIndex];\r\n        \r\n        // 獲取節點電壓\r\n        const v1 = this.node1Idx >= 0 ? nodeVoltages[this.node1Idx] : 0;\r\n        const v2 = this.node2Idx >= 0 ? nodeVoltages[this.node2Idx] : 0;\r\n        const nodeVoltage = v1 - v2;\r\n        \r\n        // 電感電壓 = 節點電壓 - 寄生電阻壓降\r\n        const vl = nodeVoltage - currentIl * this.resistance;\r\n        \r\n        // 顯式歐拉積分: Il(t+dt) = Il(t) + dt * (Vl/L)\r\n        const L = this.getInductance();\r\n        const dIlDt = vl / L;\r\n        \r\n        stateVector[stateIndex] = currentIl + dt * dIlDt;\r\n        \r\n        // 更新運行點資訊 (用於調試)\r\n        this.operatingPoint.current = currentIl;\r\n        this.operatingPoint.voltage = nodeVoltage;\r\n        this.operatingPoint.power = nodeVoltage * currentIl;\r\n    }\r\n\r\n    /**\r\n     * 檢查是否超過電流額定值\r\n     * @param {number} current 電流\r\n     * @returns {boolean} 如果超過額定電流返回true\r\n     */\r\n    isOverCurrent(current) {\r\n        return Math.abs(current) > this.currentRating;\r\n    }\r\n\r\n    /**\r\n     * 簡化的更新歷史方法\r\n     */\r\n    updateHistory(nodeVoltages, branchCurrents) {\r\n        // 在顯式方法中主要由updateState處理\r\n        const voltage = this.getVoltage(nodeVoltages);\r\n        this.operatingPoint.voltage = voltage;\r\n    }\r\n    \r\n    /**\r\n     * 獲取電感器資訊\r\n     * @param {number} current 當前電流\r\n     * @returns {Object} 詳細信息\r\n     */\r\n    getInfo(current = null) {\r\n        const info = {\r\n            ...super.toJSON(),\r\n            actualInductance: this.getInductance(),\r\n            ic: this.ic,\r\n            resistance: this.resistance,\r\n            tc1: this.tc1,\r\n            tc2: this.tc2,\r\n            currentRating: this.currentRating,\r\n            operatingPoint: { ...this.operatingPoint },\r\n            explicitMethod: true\r\n        };\r\n        \r\n        if (current !== null) {\r\n            info.storedEnergy = this.getStoredEnergy(current);\r\n            info.overCurrent = this.isOverCurrent(current);\r\n        }\r\n        \r\n        return info;\r\n    }\r\n\r\n    /**\r\n     * 驗證電感器參數\r\n     * @returns {boolean}\r\n     */\r\n    isValid() {\r\n        return super.isValid() && this.value > 0;\r\n    }\r\n\r\n    toString() {\r\n        const inductance = this.getInductance();\r\n        let inductanceStr;\r\n        \r\n        // 格式化電感值顯示\r\n        if (inductance >= 1) {\r\n            inductanceStr = `${inductance.toFixed(3)}H`;\r\n        } else if (inductance >= 1e-3) {\r\n            inductanceStr = `${(inductance * 1e3).toFixed(2)}mH`;\r\n        } else if (inductance >= 1e-6) {\r\n            inductanceStr = `${(inductance * 1e6).toFixed(2)}µH`;\r\n        } else if (inductance >= 1e-9) {\r\n            inductanceStr = `${(inductance * 1e9).toFixed(2)}nH`;\r\n        } else {\r\n            inductanceStr = `${inductance.toExponential(2)}H`;\r\n        }\r\n        \r\n        let result = `${this.name}: ${this.nodes[0]}-${this.nodes[1]} ${inductanceStr}`;\r\n        \r\n        if (this.resistance > 0) {\r\n            result += ` R=${this.resistance}Ω`;\r\n        }\r\n        \r\n        if (this.ic !== 0) {\r\n            result += ` IC=${this.ic}A`;\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * 耦合電感 (變壓器) 模型\r\n */\r\nexport class CoupledInductor {\r\n    /**\r\n     * @param {string} name 耦合電感名稱\r\n     * @param {Inductor} L1 第一個電感\r\n     * @param {Inductor} L2 第二個電感  \r\n     * @param {number} couplingFactor 耦合係數 k (0 < k ≤ 1)\r\n     * @param {Object} params 額外參數\r\n     */\r\n    constructor(name, L1, L2, couplingFactor, params = {}) {\r\n        this.name = name;\r\n        this.type = 'K';\r\n        this.L1 = L1;\r\n        this.L2 = L2;\r\n        this.k = Math.max(0, Math.min(1, couplingFactor)); // 限制在0-1範圍\r\n        this.params = params;\r\n        \r\n        // 計算互感 M = k * sqrt(L1 * L2)\r\n        this.mutualInductance = this.k * Math.sqrt(L1.getInductance() * L2.getInductance());\r\n        \r\n        // 極性 (dot convention)\r\n        this.dotNodes = params.dotNodes || [L1.nodes[0], L2.nodes[0]];\r\n    }\r\n\r\n    /**\r\n     * 獲取互感值\r\n     * @returns {number} 互感 (亨利)\r\n     */\r\n    getMutualInductance() {\r\n        // 重新計算，因為電感值可能改變\r\n        return this.k * Math.sqrt(this.L1.getInductance() * this.L2.getInductance());\r\n    }\r\n\r\n    /**\r\n     * 獲取耦合電感資訊\r\n     * @returns {Object} 詳細信息\r\n     */\r\n    getInfo() {\r\n        return {\r\n            name: this.name,\r\n            type: this.type,\r\n            L1: this.L1.name,\r\n            L2: this.L2.name,\r\n            couplingFactor: this.k,\r\n            mutualInductance: this.getMutualInductance(),\r\n            dotNodes: this.dotNodes,\r\n            L1_inductance: this.L1.getInductance(),\r\n            L2_inductance: this.L2.getInductance()\r\n        };\r\n    }\r\n\r\n    toString() {\r\n        const M = this.getMutualInductance();\r\n        return `${this.name}: ${this.L1.name}-${this.L2.name} k=${this.k} M=${(M * 1e6).toFixed(2)}µH`;\r\n    }\r\n}\r\n\r\n/**\r\n * 可變電感 (可調電感或電感器) 模型\r\n */\r\nexport class VariableInductor extends Inductor {\r\n    /**\r\n     * @param {string} name 可變電感名稱\r\n     * @param {string[]} nodes 連接節點 [n1, n2]\r\n     * @param {number} minInductance 最小電感值\r\n     * @param {number} maxInductance 最大電感值\r\n     * @param {number} controlValue 控制值 (0-1)\r\n     * @param {Object} params 額外參數\r\n     */\r\n    constructor(name, nodes, minInductance, maxInductance, controlValue = 0.5, params = {}) {\r\n        const averageInductance = (minInductance + maxInductance) / 2;\r\n        super(name, nodes, averageInductance, params);\r\n        \r\n        this.type = 'VIND';\r\n        this.minInductance = minInductance;\r\n        this.maxInductance = maxInductance;\r\n        this.controlValue = Math.max(0, Math.min(1, controlValue)); // 限制在0-1範圍\r\n    }\r\n\r\n    /**\r\n     * 根據控制值計算當前電感值\r\n     * @returns {number} 當前電感值\r\n     */\r\n    getInductance() {\r\n        const baseInductance = this.minInductance + \r\n            this.controlValue * (this.maxInductance - this.minInductance);\r\n        \r\n        // 應用溫度係數\r\n        const deltaT = this.temperature - this.tnom;\r\n        const tempFactor = 1 + this.tc1 * deltaT + this.tc2 * deltaT * deltaT;\r\n        \r\n        return baseInductance * tempFactor;\r\n    }\r\n\r\n    /**\r\n     * 設置控制值\r\n     * @param {number} value 控制值 (0-1)\r\n     */\r\n    setControlValue(value) {\r\n        this.controlValue = Math.max(0, Math.min(1, value));\r\n    }\r\n\r\n    toString() {\r\n        const inductance = this.getInductance();\r\n        const minInd = this.minInductance * 1e6;\r\n        const maxInd = this.maxInductance * 1e6;\r\n        const currentInd = inductance * 1e6;\r\n        \r\n        return `${this.name}: ${this.nodes[0]}-${this.nodes[1]} ${currentInd.toFixed(2)}µH (${minInd.toFixed(0)}-${maxInd.toFixed(0)}µH, ctrl=${(this.controlValue * 100).toFixed(1)}%)`;\r\n    }\r\n}","/**\r\n * 電壓源和電流源元件模型\r\n * 實現各種獨立源，包括DC、AC、脈衝、正弦波等\r\n */\r\n\r\nimport { BaseComponent } from './base.js';\r\n\r\n/**\r\n * 獨立電壓源基類\r\n */\r\nexport class VoltageSource extends BaseComponent {\r\n    /**\r\n     * @param {string} name 電壓源名稱 (如 'VIN', 'V1')\r\n     * @param {string[]} nodes 連接節點 [正, 負]\r\n     * @param {number|Object} source 電壓值或源描述對象\r\n     * @param {Object} params 額外參數\r\n     */\r\n    constructor(name, nodes, source, params = {}) {\r\n        // 不讓 BaseComponent 解析 value，我們自己處理\r\n        super(name, 'V', nodes, 0, params);\r\n        \r\n        if (nodes.length !== 2) {\r\n            throw new Error(`Voltage source ${name} must have exactly 2 nodes`);\r\n        }\r\n        \r\n        // 保存原始源描述\r\n        this.rawSource = source;\r\n        \r\n        // 解析源描述\r\n        this.sourceConfig = this.parseSourceConfig(source);\r\n        this.needsCurrentVar = true;\r\n        \r\n        // 設置默認值為 DC 值\r\n        this.value = this.sourceConfig.dc || this.sourceConfig.amplitude || 0;\r\n    }\r\n\r\n    /**\r\n     * 解析源配置\r\n     * @param {number|Object|string} source 源描述\r\n     * @returns {Object} 標準化的源配置\r\n     */\r\n    parseSourceConfig(source) {\r\n        // 如果是數字，視為DC源\r\n        if (typeof source === 'number') {\r\n            return {\r\n                type: 'DC',\r\n                dc: source,\r\n                amplitude: source,\r\n                offset: source\r\n            };\r\n        }\r\n        \r\n        // 如果是字符串，解析SPICE格式\r\n        if (typeof source === 'string') {\r\n            return this.parseSpiceSource(source);\r\n        }\r\n        \r\n        // 如果是對象，直接使用\r\n        if (typeof source === 'object') {\r\n            return {\r\n                type: source.type || 'DC',\r\n                ...source\r\n            };\r\n        }\r\n        \r\n        throw new Error(`Invalid voltage source specification: ${source}`);\r\n    }\r\n\r\n    /**\r\n     * 解析SPICE格式的源描述\r\n     * @param {string} sourceStr SPICE格式字符串\r\n     * @returns {Object} 源配置\r\n     */\r\n    parseSpiceSource(sourceStr) {\r\n        const str = sourceStr.trim().toUpperCase();\r\n        \r\n        // DC源: \"DC(5)\" 或 \"5\" 或 \"5V\" - 支援科學記號和單位後綴\r\n        const dcMatch = str.match(/^(?:DC\\()?(-?[\\d.]+(?:[eE][-+]?\\d+)?)(?:V)?(?:\\))?$/);\r\n        if (dcMatch) {\r\n            const value = parseFloat(dcMatch[1]);\r\n            return {\r\n                type: 'DC',\r\n                dc: value,\r\n                amplitude: value,\r\n                offset: value\r\n            };\r\n        }\r\n        \r\n        // 正弦波: \"SINE(offset amplitude frequency delay damping)\" - 支援科學記號\r\n        const sineMatch = str.match(/^SINE\\(\\s*([-\\d.]+(?:[eE][-+]?\\d+)?)?\\s*([-\\d.]+(?:[eE][-+]?\\d+)?)?\\s*([-\\d.]+(?:[eE][-+]?\\d+)?)?\\s*([-\\d.]+(?:[eE][-+]?\\d+)?)?\\s*([-\\d.]+(?:[eE][-+]?\\d+)?)?\\s*\\)$/);\r\n        if (sineMatch) {\r\n            return {\r\n                type: 'SINE',\r\n                offset: parseFloat(sineMatch[1] || '0'),\r\n                amplitude: parseFloat(sineMatch[2] || '0'),\r\n                frequency: parseFloat(sineMatch[3] || '1'),\r\n                delay: parseFloat(sineMatch[4] || '0'),\r\n                damping: parseFloat(sineMatch[5] || '0')\r\n            };\r\n        }\r\n        \r\n        // 脈衝波: \"PULSE(v1 v2 td tr tf pw per)\" - 支援科學記號\r\n        const pulseMatch = str.match(/^PULSE\\(\\s*([-\\d.]+(?:[eE][-+]?\\d+)?)\\s+([-\\d.]+(?:[eE][-+]?\\d+)?)\\s*([-\\d.]+(?:[eE][-+]?\\d+)?)?\\s*([-\\d.]+(?:[eE][-+]?\\d+)?)?\\s*([-\\d.]+(?:[eE][-+]?\\d+)?)?\\s*([-\\d.]+(?:[eE][-+]?\\d+)?)?\\s*([-\\d.]+(?:[eE][-+]?\\d+)?)?\\s*\\)$/);\r\n        if (pulseMatch) {\r\n            return {\r\n                type: 'PULSE',\r\n                v1: parseFloat(pulseMatch[1]),\r\n                v2: parseFloat(pulseMatch[2]),\r\n                td: parseFloat(pulseMatch[3] || '0'),      // 延遲時間\r\n                tr: parseFloat(pulseMatch[4] || '1e-9'),   // 上升時間\r\n                tf: parseFloat(pulseMatch[5] || '1e-9'),   // 下降時間\r\n                pw: parseFloat(pulseMatch[6] || '1e-6'),   // 脈寬\r\n                per: parseFloat(pulseMatch[7] || '2e-6')   // 周期\r\n            };\r\n        }\r\n        \r\n        throw new Error(`Cannot parse voltage source: ${sourceStr}`);\r\n    }\r\n\r\n    /**\r\n     * 檢查此元件是否需要額外的電流變數\r\n     * @returns {boolean}\r\n     */\r\n    needsCurrentVariable() {\r\n        return true;\r\n    }\r\n\r\n    // ==================== 顯式狀態更新法接口 ====================\r\n    \r\n    /**\r\n     * 電壓源預處理 - 在顯式方法中需要特殊處理\r\n     * 理想電壓源會破壞G矩陣的對稱正定性\r\n     * 這裡使用大導納近似法\r\n     * @param {CircuitPreprocessor} preprocessor 預處理器\r\n     */\r\n    preprocess(preprocessor) {\r\n        // 獲取節點索引\r\n        const node1 = preprocessor.getNodeIndex(this.nodes[0]);\r\n        const node2 = preprocessor.getNodeIndex(this.nodes[1]);\r\n        \r\n        // 🔥 核心修正：使用標準大導納法確保G矩陣非奇異\r\n        // 對於理想電壓源，使用更大的導納值\r\n        const largeAdmittance = 1e6;  // 工業標準值，確保理想電壓源約束\r\n        \r\n        if (node1 >= 0) {\r\n            preprocessor.addConductance(node1, node1, largeAdmittance);\r\n            if (node2 >= 0) {\r\n                preprocessor.addConductance(node1, node2, -largeAdmittance);\r\n            }\r\n        }\r\n        \r\n        if (node2 >= 0) {\r\n            preprocessor.addConductance(node2, node2, largeAdmittance);\r\n            if (node1 >= 0) {\r\n                preprocessor.addConductance(node2, node1, -largeAdmittance);\r\n            }\r\n        }\r\n        \r\n        this.largeAdmittance = largeAdmittance;\r\n        \r\n        // 記錄節點索引供updateRHS使用\r\n        this.node1Idx = node1;\r\n        this.node2Idx = node2;\r\n    }\r\n\r\n    /**\r\n     * 更新RHS向量 - 電壓源的等效電流源貢獻\r\n     * 使用標準大導納法：I_eq = V(t) * G_large\r\n     * @param {Float32Array} rhsVector RHS向量\r\n     * @param {Float32Array} stateVector 狀態向量\r\n     * @param {number} time 當前時間\r\n     * @param {object} componentData 組件數據\r\n     */\r\n    updateRHS(rhsVector, stateVector, time, componentData) {\r\n        // 使用預處理時記錄的節點索引\r\n        const node1Idx = this.node1Idx;\r\n        const node2Idx = this.node2Idx;\r\n        \r\n        // 獲取當前電壓值\r\n        const voltage = this.getValue(time);\r\n        \r\n        // 🔥 核心修正：計算等效電流源貢獻 I_eq = V(t) * G_large\r\n        // 這是標準大導納法的RHS項\r\n        const currentContribution = this.largeAdmittance * voltage;\r\n        \r\n        if (node1Idx >= 0) {\r\n            rhsVector[node1Idx] += currentContribution;\r\n        }\r\n        if (node2Idx >= 0) {\r\n            rhsVector[node2Idx] -= currentContribution;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取指定時間的電壓值\r\n     * @param {number} time 時間 (秒)\r\n     * @returns {number} 電壓值 (伏特)\r\n     */\r\n    getValue(time = 0) {\r\n        const config = this.sourceConfig;\r\n        \r\n        switch (config.type) {\r\n            case 'DC':\r\n                return config.dc || 0;\r\n                \r\n            case 'SINE':\r\n                return this.getSineValue(time, config);\r\n                \r\n            case 'PULSE':\r\n                return this.getPulseValue(time, config);\r\n                \r\n            case 'EXP':\r\n                return this.getExpValue(time, config);\r\n                \r\n            case 'PWL':\r\n                return this.getPWLValue(time, config);\r\n                \r\n            default:\r\n                console.warn(`Unknown voltage source type: ${config.type}`);\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 計算正弦波值\r\n     * v(t) = offset + amplitude * sin(2π * frequency * (t - delay)) * exp(-damping * (t - delay))\r\n     */\r\n    getSineValue(time, config) {\r\n        const { offset, amplitude, frequency, delay, damping } = config;\r\n        \r\n        if (time < delay) {\r\n            return offset;\r\n        }\r\n        \r\n        const t = time - delay;\r\n        const omega = 2 * Math.PI * frequency;\r\n        const dampingFactor = damping > 0 ? Math.exp(-damping * t) : 1;\r\n        \r\n        return offset + amplitude * Math.sin(omega * t) * dampingFactor;\r\n    }\r\n\r\n    /**\r\n     * 計算脈衝波值\r\n     */\r\n    getPulseValue(time, config) {\r\n        const { v1, v2, td, tr, tf, pw, per } = config;\r\n        \r\n        if (time < td) {\r\n            return v1;\r\n        }\r\n        \r\n        // 計算在周期內的時間\r\n        const cycleTime = (time - td) % per;\r\n        \r\n        if (cycleTime <= tr) {\r\n            // 上升沿\r\n            return v1 + (v2 - v1) * (cycleTime / tr);\r\n        } else if (cycleTime <= tr + pw) {\r\n            // 高電平\r\n            return v2;\r\n        } else if (cycleTime <= tr + pw + tf) {\r\n            // 下降沿\r\n            const fallTime = cycleTime - tr - pw;\r\n            return v2 - (v2 - v1) * (fallTime / tf);\r\n        } else {\r\n            // 低電平\r\n            return v1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 計算指數波值 (用於EXP源)\r\n     */\r\n    getExpValue(time, config) {\r\n        const { v1, v2, td1, tau1, td2, tau2 } = config;\r\n        \r\n        if (time < td1) {\r\n            return v1;\r\n        } else if (time < td2) {\r\n            const t = time - td1;\r\n            return v1 + (v2 - v1) * (1 - Math.exp(-t / tau1));\r\n        } else {\r\n            const t1 = td2 - td1;\r\n            const t2 = time - td2;\r\n            const v_td2 = v1 + (v2 - v1) * (1 - Math.exp(-t1 / tau1));\r\n            return v_td2 + (v1 - v_td2) * (1 - Math.exp(-t2 / tau2));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 計算分段線性值 (用於PWL源)\r\n     */\r\n    getPWLValue(time, config) {\r\n        const { points } = config;\r\n        \r\n        if (!points || points.length === 0) {\r\n            return 0;\r\n        }\r\n        \r\n        // 找到時間點在哪個段落中\r\n        for (let i = 0; i < points.length - 1; i++) {\r\n            const [t1, v1] = points[i];\r\n            const [t2, v2] = points[i + 1];\r\n            \r\n            if (time >= t1 && time <= t2) {\r\n                // 線性插值\r\n                return v1 + (v2 - v1) * (time - t1) / (t2 - t1);\r\n            }\r\n        }\r\n        \r\n        // 如果時間超出範圍，返回最後一個值\r\n        if (time >= points[points.length - 1][0]) {\r\n            return points[points.length - 1][1];\r\n        }\r\n        \r\n        // 如果時間在第一個點之前，返回第一個值\r\n        return points[0][1];\r\n    }\r\n\r\n    /**\r\n     * 獲取電壓源信息\r\n     * @param {number} time 當前時間\r\n     * @returns {Object}\r\n     */\r\n    getInfo(time = 0) {\r\n        return {\r\n            ...super.toJSON(),\r\n            sourceConfig: this.sourceConfig,\r\n            currentValue: this.getValue(time),\r\n            operatingPoint: { ...this.operatingPoint }\r\n        };\r\n    }\r\n\r\n    toString() {\r\n        const config = this.sourceConfig;\r\n        let valueStr;\r\n        \r\n        switch (config.type) {\r\n            case 'DC':\r\n                valueStr = `DC(${config.dc}V)`;\r\n                break;\r\n            case 'SINE':\r\n                valueStr = `SINE(${config.offset}V, ${config.amplitude}V, ${config.frequency}Hz)`;\r\n                break;\r\n            case 'PULSE':\r\n                valueStr = `PULSE(${config.v1}V, ${config.v2}V, ${config.per * 1e6}µs)`;\r\n                break;\r\n            default:\r\n                valueStr = `${config.type}`;\r\n        }\r\n        \r\n        return `${this.name}: ${this.nodes[0]}(+) ${this.nodes[1]}(-) ${valueStr}`;\r\n    }\r\n\r\n    /**\r\n     * 動態設置電壓值（用於控制系統）\r\n     * @param {number} newValue 新的電壓值\r\n     */\r\n    setValue(newValue) {\r\n        this.value = newValue;\r\n        // 如果是DC源，同時更新源配置\r\n        if (this.sourceConfig.type === 'DC') {\r\n            this.sourceConfig.dc = newValue;\r\n            this.sourceConfig.amplitude = newValue;\r\n            this.sourceConfig.offset = newValue;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 獨立電流源類\r\n */\r\nexport class CurrentSource extends BaseComponent {\r\n    /**\r\n     * @param {string} name 電流源名稱 (如 'IIN', 'I1')\r\n     * @param {string[]} nodes 連接節點 [流出, 流入]\r\n     * @param {number|Object} source 電流值或源描述對象\r\n     * @param {Object} params 額外參數\r\n     */\r\n    constructor(name, nodes, source, params = {}) {\r\n        // 不讓 BaseComponent 解析 value，我們自己處理\r\n        super(name, 'I', nodes, 0, params);\r\n        \r\n        if (nodes.length !== 2) {\r\n            throw new Error(`Current source ${name} must have exactly 2 nodes`);\r\n        }\r\n        \r\n        // 保存原始源描述\r\n        this.rawSource = source;\r\n        \r\n        // 解析源描述 (使用與電壓源相同的邏輯)\r\n        this.sourceConfig = this.parseSourceConfig(source);\r\n        \r\n        // 設置默認值為 DC 值\r\n        this.value = this.sourceConfig.dc || this.sourceConfig.amplitude || 0;\r\n    }\r\n\r\n    /**\r\n     * 解析源配置 (與電壓源相同的邏輯)\r\n     */\r\n    parseSourceConfig(source) {\r\n        // 複用電壓源的解析邏輯\r\n        const voltageSource = new VoltageSource('temp', ['1', '0'], source);\r\n        return voltageSource.sourceConfig;\r\n    }\r\n\r\n    /**\r\n     * 獲取指定時間的電流值\r\n     * @param {number} time 時間 (秒)\r\n     * @returns {number} 電流值 (安培)\r\n     */\r\n    getValue(time = 0) {\r\n        // 複用電壓源的計算邏輯\r\n        const tempVoltageSource = new VoltageSource('temp', ['1', '0'], this.sourceConfig);\r\n        tempVoltageSource.sourceConfig = this.sourceConfig;\r\n        return tempVoltageSource.getValue(time);\r\n    }\r\n\r\n    /**\r\n     * 檢查此元件是否需要額外的電流變數\r\n     * @returns {boolean}\r\n     */\r\n    needsCurrentVariable() {\r\n        return false; // 電流源不需要額外的電流變數\r\n    }\r\n\r\n    // ==================== 顯式狀態更新法接口 ====================\r\n    \r\n    /**\r\n     * 電流源預處理 - 電流源不影響G矩陣\r\n     * @param {CircuitPreprocessor} preprocessor 預處理器\r\n     */\r\n    preprocess(preprocessor) {\r\n        // 電流源不添加任何導納到G矩陣\r\n        // 只在RHS中有貢獻\r\n        \r\n        // 記錄節點索引供後續使用\r\n        this.node1Idx = preprocessor.getNodeIndex(this.nodes[0]);\r\n        this.node2Idx = preprocessor.getNodeIndex(this.nodes[1]);\r\n    }\r\n\r\n    /**\r\n     * 更新RHS向量 - 電流源的直接貢獻\r\n     * @param {Float32Array} rhsVector RHS向量\r\n     * @param {Float32Array} stateVector 狀態向量\r\n     * @param {number} time 當前時間\r\n     * @param {object} componentData 組件數據\r\n     */\r\n    updateRHS(rhsVector, stateVector, time, componentData) {\r\n        // 獲取當前電流值\r\n        const current = this.getValue(time);\r\n        \r\n        // 電流從 nodes[0] 流向 nodes[1]\r\n        if (this.node1Idx >= 0) {\r\n            rhsVector[this.node1Idx] -= current;  // 電流流出 node1\r\n        }\r\n        if (this.node2Idx >= 0) {\r\n            rhsVector[this.node2Idx] += current;  // 電流流入 node2\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取電流源信息\r\n     * @param {number} time 當前時間\r\n     * @returns {Object}\r\n     */\r\n    getInfo(time = 0) {\r\n        return {\r\n            ...super.toJSON(),\r\n            sourceConfig: this.sourceConfig,\r\n            currentValue: this.getValue(time),\r\n            operatingPoint: { ...this.operatingPoint }\r\n        };\r\n    }\r\n\r\n    toString() {\r\n        const config = this.sourceConfig;\r\n        let valueStr;\r\n        \r\n        switch (config.type) {\r\n            case 'DC':\r\n                valueStr = `DC(${config.dc}A)`;\r\n                break;\r\n            case 'SINE':\r\n                valueStr = `SINE(${config.offset}A, ${config.amplitude}A, ${config.frequency}Hz)`;\r\n                break;\r\n            case 'PULSE':\r\n                valueStr = `PULSE(${config.v1}A, ${config.v2}A, ${config.per * 1e6}µs)`;\r\n                break;\r\n            default:\r\n                valueStr = `${config.type}`;\r\n        }\r\n        \r\n        return `${this.name}: ${this.nodes[0]}→${this.nodes[1]} ${valueStr}`;\r\n    }\r\n}\r\n\r\n/**\r\n * 壓控電壓源 (VCVS)\r\n */\r\nexport class VCVS extends BaseComponent {\r\n    /**\r\n     * @param {string} name VCVS名稱 (如 'E1')\r\n     * @param {string[]} outputNodes 輸出節點 [正, 負]\r\n     * @param {string[]} controlNodes 控制節點 [正, 負]\r\n     * @param {number} gain 電壓增益\r\n     * @param {Object} params 額外參數\r\n     */\r\n    constructor(name, outputNodes, controlNodes, gain, params = {}) {\r\n        const allNodes = [...outputNodes, ...controlNodes];\r\n        super(name, 'VCVS', allNodes, gain, params);\r\n        \r\n        this.outputNodes = [...outputNodes];\r\n        this.controlNodes = [...controlNodes];\r\n        this.gain = gain;\r\n    }\r\n\r\n    needsCurrentVariable() {\r\n        return true; // VCVS需要電流變數\r\n    }\r\n\r\n    toString() {\r\n        return `${this.name}: ${this.outputNodes[0]}-${this.outputNodes[1]} = ${this.gain} * (${this.controlNodes[0]}-${this.controlNodes[1]})`;\r\n    }\r\n}\r\n\r\n/**\r\n * 壓控電流源 (VCCS)  \r\n */\r\nexport class VCCS extends BaseComponent {\r\n    /**\r\n     * @param {string} name VCCS名稱 (如 'G1')\r\n     * @param {string[]} outputNodes 輸出節點 [流出, 流入]\r\n     * @param {string[]} controlNodes 控制節點 [正, 負]\r\n     * @param {number} transconductance 跨導 (S)\r\n     * @param {Object} params 額外參數\r\n     */\r\n    constructor(name, outputNodes, controlNodes, transconductance, params = {}) {\r\n        const allNodes = [...outputNodes, ...controlNodes];\r\n        super(name, 'VCCS', allNodes, transconductance, params);\r\n        \r\n        this.outputNodes = [...outputNodes];\r\n        this.controlNodes = [...controlNodes];\r\n        this.transconductance = transconductance;\r\n    }\r\n\r\n    needsCurrentVariable() {\r\n        return false; // VCCS不需要額外的電流變數\r\n    }\r\n\r\n    toString() {\r\n        return `${this.name}: I(${this.outputNodes[0]}→${this.outputNodes[1]}) = ${this.transconductance} * V(${this.controlNodes[0]}-${this.controlNodes[1]})`;\r\n    }\r\n}\r\n\r\n/**\r\n * 電流控制電流源 (CCCS)\r\n * Current-Controlled Current Source\r\n * 輸出電流 = 增益 × 控制電流\r\n * 典型應用：電晶體 Beta 特性、電流鏡\r\n */\r\nexport class CCCS extends BaseComponent {\r\n    /**\r\n     * @param {string} name CCCS名稱 (如 'F1')\r\n     * @param {string[]} outputNodes 輸出節點 [流出, 流入]\r\n     * @param {string} controlElement 控制元件名稱（通過其電流來控制）\r\n     * @param {number} currentGain 電流增益（無單位）\r\n     * @param {Object} params 額外參數\r\n     */\r\n    constructor(name, outputNodes, controlElement, currentGain, params = {}) {\r\n        super(name, 'CCCS', outputNodes, currentGain, params);\r\n        \r\n        if (outputNodes.length !== 2) {\r\n            throw new Error(`CCCS ${name} must have exactly 2 output nodes`);\r\n        }\r\n        \r\n        this.outputNodes = [...outputNodes];\r\n        this.controlElement = controlElement; // 控制元件的名稱\r\n        this.currentGain = currentGain;       // 電流增益 F\r\n        \r\n        // CCCS 需要監控控制元件的電流\r\n        this.controlCurrent = 0;\r\n    }\r\n\r\n    /**\r\n     * 設定控制電流（由解算器在每個時間步調用）\r\n     * @param {number} current 控制元件的電流\r\n     */\r\n    setControlCurrent(current) {\r\n        this.controlCurrent = current;\r\n    }\r\n\r\n    /**\r\n     * 獲取輸出電流\r\n     * @returns {number} 輸出電流 = F × I_control\r\n     */\r\n    getOutputCurrent() {\r\n        return this.currentGain * this.controlCurrent;\r\n    }\r\n\r\n    /**\r\n     * 為 MNA 分析提供印花支援\r\n     * CCCS 需要在控制元件電流確定後才能計算\r\n     */\r\n    stamp(matrix, rhs, nodeMap, voltageSourceMap, time) {\r\n        const outputCurrent = this.getOutputCurrent();\r\n        \r\n        // 獲取輸出節點索引\r\n        const node1 = this.outputNodes[0] === '0' ? -1 : nodeMap.get(this.outputNodes[0]);\r\n        const node2 = this.outputNodes[1] === '0' ? -1 : nodeMap.get(this.outputNodes[1]);\r\n        \r\n        // 印花電流源到 RHS 向量\r\n        if (node1 >= 0) {\r\n            rhs.addAt(node1, -outputCurrent); // 流出節點\r\n        }\r\n        if (node2 >= 0) {\r\n            rhs.addAt(node2, outputCurrent);  // 流入節點\r\n        }\r\n    }\r\n\r\n    needsCurrentVariable() {\r\n        return false; // CCCS 本身不需要額外的電流變數\r\n    }\r\n\r\n    toString() {\r\n        return `${this.name}: I(${this.outputNodes[0]}→${this.outputNodes[1]}) = ${this.currentGain} * I(${this.controlElement})`;\r\n    }\r\n\r\n    clone() {\r\n        return new CCCS(this.name, [...this.outputNodes], this.controlElement, this.currentGain, { ...this.params });\r\n    }\r\n}\r\n\r\n/**\r\n * 電流控制電壓源 (CCVS)\r\n * Current-Controlled Voltage Source\r\n * 輸出電壓 = 轉移阻抗 × 控制電流\r\n * 典型應用：霍爾感測器、變壓器建模\r\n */\r\nexport class CCVS extends BaseComponent {\r\n    /**\r\n     * @param {string} name CCVS名稱 (如 'H1')\r\n     * @param {string[]} outputNodes 輸出節點 [正, 負]\r\n     * @param {string} controlElement 控制元件名稱（通過其電流來控制）\r\n     * @param {number} transresistance 轉移阻抗 (Ω)\r\n     * @param {Object} params 額外參數\r\n     */\r\n    constructor(name, outputNodes, controlElement, transresistance, params = {}) {\r\n        super(name, 'CCVS', outputNodes, transresistance, params);\r\n        \r\n        if (outputNodes.length !== 2) {\r\n            throw new Error(`CCVS ${name} must have exactly 2 output nodes`);\r\n        }\r\n        \r\n        this.outputNodes = [...outputNodes];\r\n        this.controlElement = controlElement; // 控制元件的名稱\r\n        this.transresistance = transresistance; // 轉移阻抗 H (Ω)\r\n        \r\n        // CCVS 需要監控控制元件的電流\r\n        this.controlCurrent = 0;\r\n    }\r\n\r\n    /**\r\n     * 設定控制電流（由解算器在每個時間步調用）\r\n     * @param {number} current 控制元件的電流\r\n     */\r\n    setControlCurrent(current) {\r\n        this.controlCurrent = current;\r\n    }\r\n\r\n    /**\r\n     * 獲取輸出電壓\r\n     * @returns {number} 輸出電壓 = H × I_control\r\n     */\r\n    getOutputVoltage() {\r\n        return this.transresistance * this.controlCurrent;\r\n    }\r\n\r\n    /**\r\n     * 為 MNA 分析提供印花支援\r\n     * CCVS 作為電壓源需要額外的電流變數\r\n     */\r\n    stamp(matrix, rhs, nodeMap, voltageSourceMap, time) {\r\n        const outputVoltage = this.getOutputVoltage();\r\n        \r\n        // 獲取節點索引\r\n        const node1 = this.outputNodes[0] === '0' ? -1 : nodeMap.get(this.outputNodes[0]);\r\n        const node2 = this.outputNodes[1] === '0' ? -1 : nodeMap.get(this.outputNodes[1]);\r\n        \r\n        // 獲取電壓源的電流變數索引\r\n        const currentVarIndex = voltageSourceMap.get(this.name);\r\n        if (currentVarIndex === undefined) {\r\n            throw new Error(`CCVS ${this.name}: Current variable not found in voltage source map`);\r\n        }\r\n        \r\n        const matrixSize = matrix.rows;\r\n        \r\n        // 印花電壓源約束方程：V+ - V- = V_output\r\n        if (node1 >= 0) {\r\n            matrix.addAt(currentVarIndex, node1, 1);   // 電流方程中的電壓項\r\n            matrix.addAt(node1, currentVarIndex, 1);   // 節點方程中的電流項\r\n        }\r\n        if (node2 >= 0) {\r\n            matrix.addAt(currentVarIndex, node2, -1);  // 電流方程中的電壓項\r\n            matrix.addAt(node2, currentVarIndex, -1);  // 節點方程中的電流項\r\n        }\r\n        \r\n        // 右側向量：電壓約束\r\n        rhs.setAt(currentVarIndex, outputVoltage);\r\n    }\r\n\r\n    needsCurrentVariable() {\r\n        return true; // CCVS 需要電流變數（作為電壓源）\r\n    }\r\n\r\n    toString() {\r\n        return `${this.name}: V(${this.outputNodes[0]}-${this.outputNodes[1]}) = ${this.transresistance} * I(${this.controlElement})`;\r\n    }\r\n\r\n    clone() {\r\n        return new CCVS(this.name, [...this.outputNodes], this.controlElement, this.transresistance, { ...this.params });\r\n    }\r\n}","/**\r\n * MOSFET 元件模型 (專為電力電子控制模擬設計)\r\n * \r\n * 特點：\r\n * - 外部可控的 ON/OFF 狀態 (不依賴 Vgs)\r\n * - 內建體二極體模型\r\n * - 適用於 PWM 控制系統模擬\r\n */\r\n\r\nimport { BaseComponent } from './base.js';\r\n\r\n/**\r\n * 理想 MOSFET 開關模型\r\n * \r\n * 這個模型專為電力電子控制模擬設計，重點是：\r\n * 1. 開關狀態由外部控制器決定，而不是 Vgs\r\n * 2. 包含並聯的體二極體\r\n * 3. 支援快速狀態切換\r\n */\r\nexport class MOSFET extends BaseComponent {\r\n    /**\r\n     * @param {string} name MOSFET名稱 (如 'M1', 'Q1')\r\n     * @param {string[]} nodes 連接節點 [drain, source, gate] (gate節點在此模型中僅用於標識)\r\n     * @param {Object} params 參數 {Ron, Roff, Vf_diode, Von_diode}\r\n     */\r\n    constructor(name, nodes, params = {}) {\r\n        // 對於 MNA 分析，MOSFET 只需要2個節點 (drain, source)\r\n        // gate 節點僅用於模型內部管理，不參與矩陣構建\r\n        const mnaNodes = nodes.length >= 3 ? [nodes[0], nodes[1]] : nodes;\r\n        super(name, 'M', mnaNodes, 0, params);\r\n        \r\n        if (nodes.length < 2) {\r\n            throw new Error(`MOSFET ${name} must have at least 2 nodes: [drain, source], optional gate`);\r\n        }\r\n        \r\n        // MOSFET 開關參數 - 安全地解析參數，如果解析失敗使用默認值\r\n        this.Ron = this.safeParseValue(params.Ron, 1e-3);        // 導通電阻 (默認 1mΩ)\r\n        this.Roff = this.safeParseValue(params.Roff, 1e6);       // 關斷電阻 (默認 1MΩ，不要太大)\r\n        \r\n        // 體二極體參數\r\n        this.Vf_diode = this.safeParseValue(params.Vf_diode, 0.7);     // 二極體順向電壓 (默認 0.7V)\r\n        this.Von_diode = this.safeParseValue(params.Von_diode, 0.001);  // 二極體導通電阻 (默認 1mΩ)\r\n        this.Roff_diode = this.safeParseValue(params.Roff_diode, 1e6); // 二極體反向電阻 (默認 1MΩ)\r\n        \r\n        // 控制狀態\r\n        this.gateState = false; // false = OFF, true = ON\r\n        this.isExtControlled = true; // 標記這是外部控制的開關\r\n        \r\n        // 節點分配\r\n        this.drain = nodes[0];\r\n        this.source = nodes[1]; \r\n        this.gate = nodes[2] || null;   // 可選的gate節點，僅用於標識\r\n        \r\n        // 狀態追蹤\r\n        this.mosfetCurrent = 0;\r\n        \r\n        // 初始化參數驗證\r\n        this.validate();\r\n    }\r\n\r\n    /**\r\n     * 安全地解析數值參數，如果失敗則返回默認值\r\n     * @param {*} value 要解析的值\r\n     * @param {number} defaultValue 默認值\r\n     * @returns {number} 解析後的數值或默認值\r\n     */\r\n    safeParseValue(value, defaultValue) {\r\n        try {\r\n            if (value === undefined || value === null) {\r\n                return defaultValue;\r\n            }\r\n            return this.parseValue(value);\r\n        } catch (error) {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 驗證MOSFET參數\r\n     */\r\n    validate() {\r\n        if (this.Ron <= 0) {\r\n            throw new Error(`MOSFET ${this.name}: Ron must be positive`);\r\n        }\r\n        if (this.Roff <= this.Ron) {\r\n            throw new Error(`MOSFET ${this.name}: Roff must be greater than Ron`);\r\n        }\r\n        \r\n        // 狀態追蹤\r\n        this.mosfetCurrent = 0;\r\n        this.diodeCurrent = 0;\r\n        this.totalCurrent = 0;\r\n        this.drainSourceVoltage = 0;\r\n    }\r\n\r\n    /**\r\n     * 設置 MOSFET 開關狀態 (外部控制接口)\r\n     * @param {boolean} state true = ON, false = OFF\r\n     */\r\n    setGateState(state) {\r\n        this.gateState = Boolean(state);\r\n    }\r\n\r\n    /**\r\n     * 獲取當前開關狀態\r\n     * @returns {boolean}\r\n     */\r\n    getGateState() {\r\n        return this.gateState;\r\n    }\r\n\r\n    /**\r\n     * 計算 MOSFET 通道的等效電阻\r\n     * @returns {number} 等效電阻 (歐姆)\r\n     */\r\n    getMOSFETResistance() {\r\n        return this.gateState ? this.Ron : this.Roff;\r\n    }\r\n\r\n    /**\r\n     * 計算體二極體的等效電阻\r\n     * @param {number} vds Drain-Source 電壓 (V)\r\n     * @returns {number} 等效電阻 (歐姆)\r\n     */\r\n    getBodyDiodeResistance(vds) {\r\n        // 體二極體：當 Vs > Vd + Vf 時導通 (即 vds < -Vf)\r\n        const isDiodeForward = vds < -this.Vf_diode;\r\n        return isDiodeForward ? this.Von_diode : this.Roff_diode;\r\n    }\r\n\r\n    /**\r\n     * 計算總的等效電阻 (MOSFET 通道與體二極體並聯)\r\n     * @param {number} vds Drain-Source 電壓 (V)\r\n     * @returns {number} 等效電阻 (歐姆)\r\n     */\r\n    getEquivalentResistance(vds) {\r\n        const rMosfet = this.getMOSFETResistance();\r\n        const rDiode = this.getBodyDiodeResistance(vds);\r\n        \r\n        // 並聯電阻計算: 1/Rtotal = 1/R1 + 1/R2\r\n        const rTotal = 1 / (1/rMosfet + 1/rDiode);\r\n        return rTotal;\r\n    }\r\n\r\n    /**\r\n     * 為 MNA 分析提供印花 (stamping) 支援\r\n     * 注意：這是一個非線性元件，需要在每次迭代中更新\r\n     * \r\n     * @param {Matrix} matrix MNA 矩陣\r\n     * @param {Vector} rhs 右側向量  \r\n     * @param {Map} nodeMap 節點映射\r\n     * @param {Map} voltageSourceMap 電壓源映射\r\n     * @param {number} time 當前時間\r\n     */\r\n    stamp(matrix, rhs, nodeMap, voltageSourceMap, time) {\r\n        // 獲取節點索引，接地節點返回 -1\r\n        const drainIndex = this.drain === '0' || this.drain === 'gnd' ? -1 : nodeMap.get(this.drain);\r\n        const sourceIndex = this.source === '0' || this.source === 'gnd' ? -1 : nodeMap.get(this.source);\r\n        \r\n        if (drainIndex === undefined || sourceIndex === undefined) {\r\n            throw new Error(`MOSFET ${this.name}: Node mapping not found (drain: ${this.drain}, source: ${this.source})`);\r\n        }\r\n\r\n        // 獲取當前 Drain-Source 電壓 (初始化時為0)\r\n        let vds = 0;\r\n        if (this.drainSourceVoltage !== undefined) {\r\n            vds = this.drainSourceVoltage;\r\n        }\r\n\r\n        const resistance = this.getEquivalentResistance(vds);\r\n        const conductance = 1 / resistance;\r\n\r\n        // 印花導納矩陣 (類似電阻的印花方式)\r\n        // 接地節點 (index = -1) 不需要印花到矩陣中\r\n        if (drainIndex >= 0) {\r\n            matrix.addAt(drainIndex, drainIndex, conductance);\r\n            if (sourceIndex >= 0) {\r\n                matrix.addAt(drainIndex, sourceIndex, -conductance);\r\n            }\r\n        }\r\n        \r\n        if (sourceIndex >= 0) {\r\n            matrix.addAt(sourceIndex, sourceIndex, conductance);\r\n            if (drainIndex >= 0) {\r\n                matrix.addAt(sourceIndex, drainIndex, -conductance);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新元件狀態 (在每個時間步後調用)\r\n     * @param {number} vds Drain-Source 電壓\r\n     * @param {number} ids Drain-Source 電流\r\n     */\r\n    updateState(vds, ids) {\r\n        this.drainSourceVoltage = vds;\r\n        this.totalCurrent = ids;\r\n        \r\n        // 估算通道電流和二極體電流的分配\r\n        const rMosfet = this.getMOSFETResistance();\r\n        const rDiode = this.getBodyDiodeResistance(vds);\r\n        const rTotal = this.getEquivalentResistance(vds);\r\n        \r\n        // 電流分配 (基於並聯電阻的電流分割)\r\n        this.mosfetCurrent = ids * (rTotal / rMosfet);\r\n        this.diodeCurrent = ids * (rTotal / rDiode);\r\n    }\r\n\r\n    /**\r\n     * 計算通過MOSFET的總電流\r\n     * @param {Map<string, number>} nodeVoltages 節點電壓\r\n     * @returns {number} 總電流 (安培)，正值表示從drain流向source\r\n     */\r\n    getCurrent(nodeVoltages) {\r\n        const vds = this.getVoltage(nodeVoltages); // drain-source電壓\r\n        this.drainSourceVoltage = vds;\r\n        \r\n        const rTotal = this.getEquivalentResistance(vds);\r\n        const ids = vds / rTotal;\r\n        \r\n        // 更新電流狀態\r\n        this.totalCurrent = ids;\r\n        this.operatingPoint.current = ids;\r\n        \r\n        return ids;\r\n    }\r\n\r\n    /**\r\n     * 檢查是否需要電流變數 (對於理想開關，通常不需要)\r\n     * @returns {boolean}\r\n     */\r\n    needsCurrentVariable() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 獲取元件資訊字串\r\n     * @returns {string}\r\n     */\r\n    toString() {\r\n        const gateInfo = this.gate ? ` G=${this.gate}` : ' (Ext. Control)';\r\n        return `${this.name} (MOSFET): D=${this.drain} S=${this.source}${gateInfo}, ` +\r\n               `State=${this.gateState ? 'ON' : 'OFF'}, Ron=${this.Ron}Ω, Roff=${this.Roff}Ω`;\r\n    }\r\n\r\n    /**\r\n     * 獲取詳細的工作狀態\r\n     * @returns {Object}\r\n     */\r\n    getOperatingStatus() {\r\n        return {\r\n            name: this.name,\r\n            type: 'MOSFET',\r\n            gateState: this.gateState ? 'ON' : 'OFF',\r\n            drainSourceVoltage: this.drainSourceVoltage,\r\n            totalCurrent: this.totalCurrent,\r\n            mosfetCurrent: this.mosfetCurrent,\r\n            diodeCurrent: this.diodeCurrent,\r\n            currentResistance: this.getEquivalentResistance(this.drainSourceVoltage),\r\n            bodyDiodeActive: this.drainSourceVoltage < -this.Vf_diode\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 序列化為 JSON\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            gateState: this.gateState,\r\n            Ron: this.Ron,\r\n            Roff: this.Roff,\r\n            Vf_diode: this.Vf_diode,\r\n            Von_diode: this.Von_diode,\r\n            operatingStatus: this.getOperatingStatus()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 復製 MOSFET\r\n     * @returns {MOSFET}\r\n     */\r\n    clone() {\r\n        const cloned = new MOSFET(this.name, this.nodes, {\r\n            Ron: this.Ron,\r\n            Roff: this.Roff,\r\n            Vf_diode: this.Vf_diode,\r\n            Von_diode: this.Von_diode,\r\n            Roff_diode: this.Roff_diode\r\n        });\r\n        cloned.setGateState(this.gateState);\r\n        return cloned;\r\n    }\r\n}","/**\r\n * SPICE風格網表解析器\r\n * \r\n * 解析傳統SPICE格式的網表文件，建立電路元件列表\r\n */\r\n\r\nimport { Resistor } from '../components/resistor.js';\r\nimport { Capacitor } from '../components/capacitor.js';\r\nimport { Inductor } from '../components/inductor.js';\r\nimport { VoltageSource, CurrentSource, VCVS, VCCS } from '../components/sources.js';\r\nimport { MOSFET } from '../components/mosfet.js';\r\n\r\n/**\r\n * 網表解析器\r\n */\r\nexport class NetlistParser {\r\n    constructor() {\r\n        this.components = [];\r\n        this.models = new Map(); // .MODEL 定義\r\n        this.parameters = new Map(); // .PARAM 定義\r\n        this.analyses = []; // .TRAN, .DC 等分析指令\r\n        this.options = new Map(); // .OPTIONS 設置\r\n        this.includes = []; // .INCLUDE 文件\r\n        \r\n        // 解析統計\r\n        this.stats = {\r\n            totalLines: 0,\r\n            parsedLines: 0,\r\n            skippedLines: 0,\r\n            errors: []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 解析網表字符串\r\n     * @param {string} netlistText 網表內容\r\n     * @returns {Object} 解析結果\r\n     */\r\n    parse(netlistText) {\r\n        this.reset();\r\n        \r\n        const lines = netlistText.split(/\\r?\\n/).map(line => line.trim());\r\n        this.stats.totalLines = lines.length;\r\n        \r\n        console.log(`Parsing netlist with ${lines.length} lines...`);\r\n        \r\n        try {\r\n            // 預處理：移除註釋、合併續行\r\n            const processedLines = this.preprocessLines(lines);\r\n            \r\n            // 逐行解析\r\n            for (let i = 0; i < processedLines.length; i++) {\r\n                const line = processedLines[i];\r\n                if (line.length === 0) continue;\r\n                \r\n                try {\r\n                    this.parseLine(line, i + 1);\r\n                    this.stats.parsedLines++;\r\n                } catch (error) {\r\n                    this.stats.errors.push({\r\n                        line: i + 1,\r\n                        content: line,\r\n                        error: error.message\r\n                    });\r\n                }\r\n            }\r\n            \r\n            console.log(`Netlist parsing completed: ${this.components.length} components, ${this.stats.errors.length} errors`);\r\n            \r\n            return {\r\n                components: this.components,\r\n                models: this.models,\r\n                parameters: this.parameters,\r\n                analyses: this.analyses,\r\n                options: this.options,\r\n                stats: this.stats\r\n            };\r\n            \r\n        } catch (error) {\r\n            console.error('Netlist parsing failed:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 重置解析器狀態\r\n     */\r\n    reset() {\r\n        this.components = [];\r\n        this.models.clear();\r\n        this.parameters.clear();\r\n        this.analyses = [];\r\n        this.options.clear();\r\n        this.includes = [];\r\n        this.stats = {\r\n            totalLines: 0,\r\n            parsedLines: 0,\r\n            skippedLines: 0,\r\n            errors: []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 預處理網表行\r\n     * @param {string[]} lines 原始行\r\n     * @returns {string[]} 處理後的行\r\n     */\r\n    preprocessLines(lines) {\r\n        const processed = [];\r\n        let currentLine = '';\r\n        \r\n        for (let line of lines) {\r\n            // 移除註釋 (以 * 或 ; 開頭的行)\r\n            if (line.startsWith('*') || line.startsWith(';')) {\r\n                continue;\r\n            }\r\n            \r\n            // 移除行內註釋 ($ 或 ; 之後的內容)\r\n            const commentIndex = Math.min(\r\n                line.indexOf('$') >= 0 ? line.indexOf('$') : line.length,\r\n                line.indexOf(';') >= 0 ? line.indexOf(';') : line.length\r\n            );\r\n            line = line.substring(0, commentIndex).trim();\r\n            \r\n            if (line.length === 0) continue;\r\n            \r\n            // 處理續行 (以 + 開頭)\r\n            if (line.startsWith('+')) {\r\n                currentLine += ' ' + line.substring(1).trim();\r\n            } else {\r\n                if (currentLine.length > 0) {\r\n                    processed.push(currentLine);\r\n                }\r\n                currentLine = line;\r\n            }\r\n        }\r\n        \r\n        // 添加最後一行\r\n        if (currentLine.length > 0) {\r\n            processed.push(currentLine);\r\n        }\r\n        \r\n        return processed;\r\n    }\r\n\r\n    /**\r\n     * 解析單行網表\r\n     * @param {string} line 網表行\r\n     * @param {number} lineNumber 行號\r\n     * @returns {BaseComponent} 創建的組件 (如果是組件行)\r\n     */\r\n    parseLine(line, lineNumber = 1) {\r\n        const tokens = line.split(/\\s+/);\r\n        if (tokens.length === 0) return null;\r\n        \r\n        const firstChar = tokens[0][0].toUpperCase();\r\n        let component = null;\r\n        \r\n        try {\r\n            switch (firstChar) {\r\n                case 'R':\r\n                    component = this.parseResistor(tokens);\r\n                    break;\r\n                case 'C':\r\n                    component = this.parseCapacitor(tokens);\r\n                    break;\r\n                case 'L':\r\n                    component = this.parseInductor(tokens);\r\n                    break;\r\n                case 'V':\r\n                    component = this.parseVoltageSource(tokens);\r\n                    break;\r\n                case 'I':\r\n                    component = this.parseCurrentSource(tokens);\r\n                    break;\r\n                case 'E':\r\n                    component = this.parseVCVS(tokens);\r\n                    break;\r\n                case 'G':\r\n                    component = this.parseVCCS(tokens);\r\n                    break;\r\n                case 'M':\r\n                    component = this.parseMOSFET(tokens);\r\n                    break;\r\n                case '.':\r\n                    this.parseDirective(tokens);\r\n                    break;\r\n                default:\r\n                    console.warn(`Unknown component type: ${tokens[0]} (line ${lineNumber})`);\r\n                    this.stats.skippedLines++;\r\n            }\r\n        } catch (error) {\r\n            throw new Error(`Line ${lineNumber}: ${error.message}`);\r\n        }\r\n        \r\n        return component;\r\n    }\r\n\r\n    /**\r\n     * 解析電阻\r\n     * 格式: R<name> <node1> <node2> <value> [parameters]\r\n     * @returns {Resistor} 創建的電阻組件\r\n     */\r\n    parseResistor(tokens) {\r\n        if (tokens.length < 4) {\r\n            throw new Error('Resistor requires at least 4 tokens: R<name> <node1> <node2> <value>');\r\n        }\r\n        \r\n        const name = tokens[0];\r\n        const nodes = [tokens[1], tokens[2]];\r\n        const value = tokens[3];\r\n        const params = this.parseParameters(tokens.slice(4));\r\n        \r\n        const resistor = new Resistor(name, nodes, value, params);\r\n        this.components.push(resistor);\r\n        return resistor;\r\n    }\r\n\r\n    /**\r\n     * 解析電容\r\n     * 格式: C<name> <node1> <node2> <value> [IC=<initial_voltage>]\r\n     * @returns {Capacitor} 創建的電容組件\r\n     */\r\n    parseCapacitor(tokens) {\r\n        if (tokens.length < 4) {\r\n            throw new Error('Capacitor requires at least 4 tokens: C<name> <node1> <node2> <value>');\r\n        }\r\n        \r\n        const name = tokens[0];\r\n        const nodes = [tokens[1], tokens[2]];\r\n        const value = tokens[3];\r\n        const params = this.parseParameters(tokens.slice(4));\r\n        \r\n        const capacitor = new Capacitor(name, nodes, value, params);\r\n        this.components.push(capacitor);\r\n        return capacitor;\r\n    }\r\n\r\n    /**\r\n     * 解析電感\r\n     * 格式: L<name> <node1> <node2> <value> [IC=<initial_current>]\r\n     * @returns {Inductor} 創建的電感組件\r\n     */\r\n    parseInductor(tokens) {\r\n        if (tokens.length < 4) {\r\n            throw new Error('Inductor requires at least 4 tokens: L<name> <node1> <node2> <value>');\r\n        }\r\n        \r\n        const name = tokens[0];\r\n        const nodes = [tokens[1], tokens[2]];\r\n        const value = tokens[3];\r\n        const params = this.parseParameters(tokens.slice(4));\r\n        \r\n        const inductor = new Inductor(name, nodes, value, params);\r\n        this.components.push(inductor);\r\n        return inductor;\r\n    }\r\n\r\n    /**\r\n     * 解析 MOSFET\r\n     * 格式: M<name> <drain> <source> <gate> [Ron=<value>] [Roff=<value>] [Vf=<value>]\r\n     * @returns {MOSFET} 創建的 MOSFET 組件\r\n     */\r\n    parseMOSFET(tokens) {\r\n        if (tokens.length < 4) {\r\n            throw new Error('MOSFET requires at least 4 tokens: M<name> <drain> <source> <gate>');\r\n        }\r\n        \r\n        const name = tokens[0];\r\n        const drain = tokens[1];\r\n        const source = tokens[2];\r\n        const gate = tokens[3];\r\n        // 完整節點信息，但只有 drain 和 source 會被用於 MNA 矩陣\r\n        const allNodes = [drain, source, gate];\r\n        \r\n        // 解析 MOSFET 參數\r\n        const params = this.parseParameters(tokens.slice(4));\r\n        \r\n        // 參數會通過 MOSFET 構造函數中的 parseValue 方法處理\r\n        const mosfetParams = {\r\n            Ron: params.Ron || params.ron || '1m',        // 默認 1mΩ\r\n            Roff: params.Roff || params.roff || '1M',     // 默認 1MΩ  \r\n            Vf_diode: params.Vf || params.vf || params.Vf_diode || '0.7',\r\n            Von_diode: params.Von_diode || params.von_diode || '1m',\r\n            Roff_diode: params.Roff_diode || params.roff_diode || '1M'\r\n        };\r\n        \r\n        const mosfet = new MOSFET(name, allNodes, mosfetParams);\r\n        this.components.push(mosfet);\r\n        return mosfet;\r\n    }\r\n\r\n    /**\r\n     * 解析電壓源\r\n     * 格式: V<name> <node+> <node-> <source_spec>\r\n     * @returns {VoltageSource} 創建的電壓源組件\r\n     */\r\n    parseVoltageSource(tokens) {\r\n        if (tokens.length < 4) {\r\n            throw new Error('Voltage source requires at least 4 tokens: V<name> <node+> <node-> <source>');\r\n        }\r\n        \r\n        const name = tokens[0];\r\n        const nodes = [tokens[1], tokens[2]];\r\n        \r\n        // 合併source specification (可能包含空格)\r\n        let sourceSpec = tokens.slice(3).join(' ');\r\n        \r\n        // 解析參數\r\n        const params = {};\r\n        \r\n        const voltageSource = new VoltageSource(name, nodes, sourceSpec, params);\r\n        this.components.push(voltageSource);\r\n        return voltageSource;\r\n    }\r\n\r\n    /**\r\n     * 解析電流源\r\n     * 格式: I<name> <node+> <node-> <source_spec>\r\n     * @returns {CurrentSource} 創建的電流源組件\r\n     */\r\n    parseCurrentSource(tokens) {\r\n        if (tokens.length < 4) {\r\n            throw new Error('Current source requires at least 4 tokens: I<name> <node+> <node-> <source>');\r\n        }\r\n        \r\n        const name = tokens[0];\r\n        const nodes = [tokens[1], tokens[2]];\r\n        \r\n        // 合併source specification\r\n        let sourceSpec = tokens.slice(3).join(' ');\r\n        const params = {};\r\n        \r\n        const currentSource = new CurrentSource(name, nodes, sourceSpec, params);\r\n        this.components.push(currentSource);\r\n        return currentSource;\r\n    }\r\n\r\n    /**\r\n     * 解析壓控電壓源 (VCVS)\r\n     * 格式: E<name> <out+> <out-> <in+> <in-> <gain>\r\n     */\r\n    parseVCVS(tokens) {\r\n        if (tokens.length < 6) {\r\n            throw new Error('VCVS requires 6 tokens: E<name> <out+> <out-> <in+> <in-> <gain>');\r\n        }\r\n        \r\n        const name = tokens[0];\r\n        const outputNodes = [tokens[1], tokens[2]];\r\n        const controlNodes = [tokens[3], tokens[4]];\r\n        const gain = parseFloat(tokens[5]);\r\n        \r\n        const vcvs = new VCVS(name, outputNodes, controlNodes, gain);\r\n        this.components.push(vcvs);\r\n    }\r\n\r\n    /**\r\n     * 解析壓控電流源 (VCCS)\r\n     * 格式: G<name> <out+> <out-> <in+> <in-> <transconductance>\r\n     */\r\n    parseVCCS(tokens) {\r\n        if (tokens.length < 6) {\r\n            throw new Error('VCCS requires 6 tokens: G<name> <out+> <out-> <in+> <in-> <gm>');\r\n        }\r\n        \r\n        const name = tokens[0];\r\n        const outputNodes = [tokens[1], tokens[2]];\r\n        const controlNodes = [tokens[3], tokens[4]];\r\n        const transconductance = parseFloat(tokens[5]);\r\n        \r\n        const vccs = new VCCS(name, outputNodes, controlNodes, transconductance);\r\n        this.components.push(vccs);\r\n    }\r\n\r\n    /**\r\n     * 解析指令 (以 . 開頭的行)\r\n     * @param {string[]} tokens 標記陣列\r\n     */\r\n    parseDirective(tokens) {\r\n        const directive = tokens[0].toLowerCase();\r\n        \r\n        switch (directive) {\r\n            case '.tran':\r\n                this.parseTranDirective(tokens);\r\n                break;\r\n            case '.dc':\r\n                this.parseDCDirective(tokens);\r\n                break;\r\n            case '.param':\r\n                this.parseParamDirective(tokens);\r\n                break;\r\n            case '.model':\r\n                this.parseModelDirective(tokens);\r\n                break;\r\n            case '.options':\r\n                this.parseOptionsDirective(tokens);\r\n                break;\r\n            case '.end':\r\n                // 網表結束標記\r\n                break;\r\n            case '.title':\r\n                // 標題行，忽略\r\n                break;\r\n            default:\r\n                console.warn(`Unknown directive: ${directive}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 解析 .TRAN 指令\r\n     * 格式: .TRAN <tstep> <tstop> [tstart] [tmax]\r\n     */\r\n    parseTranDirective(tokens) {\r\n        if (tokens.length < 3) {\r\n            throw new Error('.TRAN requires at least 2 parameters: .TRAN <tstep> <tstop>');\r\n        }\r\n        \r\n        const analysis = {\r\n            type: 'TRAN',\r\n            tstep: tokens[1],\r\n            tstop: tokens[2],\r\n            tstart: tokens[3] || '0',\r\n            tmax: tokens[4] || tokens[1]\r\n        };\r\n        \r\n        this.analyses.push(analysis);\r\n    }\r\n\r\n    /**\r\n     * 解析 .DC 指令\r\n     */\r\n    parseDCDirective(tokens) {\r\n        const analysis = {\r\n            type: 'DC',\r\n            parameters: tokens.slice(1)\r\n        };\r\n        \r\n        this.analyses.push(analysis);\r\n    }\r\n\r\n    /**\r\n     * 解析 .PARAM 指令\r\n     */\r\n    parseParamDirective(tokens) {\r\n        for (let i = 1; i < tokens.length; i++) {\r\n            const param = tokens[i];\r\n            const equalIndex = param.indexOf('=');\r\n            if (equalIndex > 0) {\r\n                const name = param.substring(0, equalIndex);\r\n                const value = param.substring(equalIndex + 1);\r\n                this.parameters.set(name, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 解析 .MODEL 指令\r\n     */\r\n    parseModelDirective(tokens) {\r\n        if (tokens.length < 3) {\r\n            throw new Error('.MODEL requires at least 2 parameters: .MODEL <name> <type>');\r\n        }\r\n        \r\n        const modelName = tokens[1];\r\n        const modelType = tokens[2];\r\n        const modelParams = this.parseParameters(tokens.slice(3));\r\n        \r\n        this.models.set(modelName, {\r\n            type: modelType,\r\n            parameters: modelParams\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 解析 .OPTIONS 指令\r\n     */\r\n    parseOptionsDirective(tokens) {\r\n        for (let i = 1; i < tokens.length; i++) {\r\n            const option = tokens[i];\r\n            const equalIndex = option.indexOf('=');\r\n            if (equalIndex > 0) {\r\n                const name = option.substring(0, equalIndex);\r\n                const value = option.substring(equalIndex + 1);\r\n                this.options.set(name.toLowerCase(), value);\r\n            } else {\r\n                this.options.set(option.toLowerCase(), true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 解析參數列表 (key=value 格式)\r\n     * @param {string[]} tokens 參數標記\r\n     * @returns {Object} 參數對象\r\n     */\r\n    parseParameters(tokens) {\r\n        const params = {};\r\n        \r\n        for (const token of tokens) {\r\n            const equalIndex = token.indexOf('=');\r\n            if (equalIndex > 0) {\r\n                const key = token.substring(0, equalIndex).toLowerCase();\r\n                const value = token.substring(equalIndex + 1);\r\n                \r\n                // 保持字符串格式，讓各個組件自己處理工程記號\r\n                // 只有明確的純數字才轉換為數字類型\r\n                const trimmedValue = value.trim();\r\n                if (/^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$/.test(trimmedValue)) {\r\n                    // 純數字（包括科學記號）\r\n                    const numValue = parseFloat(trimmedValue);\r\n                    params[key] = isNaN(numValue) ? value : numValue;\r\n                } else {\r\n                    // 包含單位後綴或其他文本，保持字符串\r\n                    params[key] = value;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return params;\r\n    }\r\n\r\n    /**\r\n     * 獲取解析統計信息\r\n     * @returns {Object} 統計信息\r\n     */\r\n    getStats() {\r\n        return {\r\n            ...this.stats,\r\n            componentCount: this.components.length,\r\n            modelCount: this.models.size,\r\n            parameterCount: this.parameters.size,\r\n            analysisCount: this.analyses.length\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 解析工程記號值的助手方法\r\n     * @param {string|number} value 要解析的值\r\n     * @returns {number} 解析後的數值\r\n     */\r\n    parseValue(value) {\r\n        if (typeof value === 'number') return value;\r\n        if (typeof value !== 'string') return null;\r\n        \r\n        const str = value.toString().trim().toLowerCase();\r\n        const numberPart = parseFloat(str);\r\n        if (isNaN(numberPart)) return null;\r\n        \r\n        // 檢查工程記號後綴\r\n        const suffix = str.slice(numberPart.toString().length);\r\n        switch (suffix) {\r\n            case 'p': case 'pico': return numberPart * 1e-12;\r\n            case 'n': case 'nano': return numberPart * 1e-9;\r\n            case 'u': case 'μ': case 'micro': return numberPart * 1e-6;\r\n            case 'm': case 'milli': return numberPart * 1e-3;\r\n            case 'k': case 'kilo': return numberPart * 1e3;\r\n            case 'meg': case 'mega': return numberPart * 1e6;\r\n            case 'g': case 'giga': return numberPart * 1e9;\r\n            case 't': case 'tera': return numberPart * 1e12;\r\n            case '': return numberPart;\r\n            default: return numberPart; // 未知後綴，返回數字部分\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 打印解析報告\r\n     */\r\n    printReport() {\r\n        console.log('\\\\n=== Netlist Parsing Report ===');\r\n        console.log(`Total lines: ${this.stats.totalLines}`);\r\n        console.log(`Parsed lines: ${this.stats.parsedLines}`);\r\n        console.log(`Skipped lines: ${this.stats.skippedLines}`);\r\n        console.log(`Errors: ${this.stats.errors.length}`);\r\n        \r\n        console.log(`\\\\nComponents: ${this.components.length}`);\r\n        const componentTypes = {};\r\n        for (const comp of this.components) {\r\n            componentTypes[comp.type] = (componentTypes[comp.type] || 0) + 1;\r\n        }\r\n        for (const [type, count] of Object.entries(componentTypes)) {\r\n            console.log(`  ${type}: ${count}`);\r\n        }\r\n        \r\n        if (this.analyses.length > 0) {\r\n            console.log(`\\\\nAnalyses: ${this.analyses.length}`);\r\n            for (const analysis of this.analyses) {\r\n                console.log(`  ${analysis.type}`);\r\n            }\r\n        }\r\n        \r\n        if (this.stats.errors.length > 0) {\r\n            console.log('\\\\nErrors:');\r\n            for (const error of this.stats.errors) {\r\n                console.log(`  Line ${error.line}: ${error.error}`);\r\n                console.log(`    \"${error.content}\"`);\r\n            }\r\n        }\r\n        \r\n        console.log('==============================\\\\n');\r\n    }\r\n}","/**\r\n * 線性代數核心 - LU分解求解器\r\n * \r\n * 這是AkingSPICE的數值計算核心，負責求解 Ax = z 形式的線性方程組。\r\n * 使用LU分解方法，這是求解中等規模稠密或稀疏矩陣的標準高效方法。\r\n */\r\n\r\n/**\r\n * 矩陣類 - 提供基本的矩陣操作\r\n */\r\nexport class Matrix {\r\n    /**\r\n     * @param {number} rows 矩陣行數\r\n     * @param {number} cols 矩陣列數\r\n     * @param {number[][]} data 可選的初始數據\r\n     */\r\n    constructor(rows, cols, data = null) {\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n        \r\n        if (data) {\r\n            this.data = data;\r\n        } else {\r\n            this.data = Array(rows).fill().map(() => Array(cols).fill(0));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取元素值\r\n     * @param {number} i 行索引 (0-based)\r\n     * @param {number} j 列索引 (0-based)\r\n     * @returns {number}\r\n     */\r\n    get(i, j) {\r\n        if (i < 0 || i >= this.rows || j < 0 || j >= this.cols) {\r\n            throw new Error(`Matrix index out of bounds: (${i}, ${j})`);\r\n        }\r\n        return this.data[i][j];\r\n    }\r\n\r\n    /**\r\n     * 設置元素值\r\n     * @param {number} i 行索引\r\n     * @param {number} j 列索引\r\n     * @param {number} value 要設置的值\r\n     */\r\n    set(i, j, value) {\r\n        if (i < 0 || i >= this.rows || j < 0 || j >= this.cols) {\r\n            throw new Error(`Matrix index out of bounds: (${i}, ${j})`);\r\n        }\r\n        this.data[i][j] = value;\r\n    }\r\n\r\n    /**\r\n     * 累加元素值 (常用於組裝MNA矩陣)\r\n     * @param {number} i 行索引\r\n     * @param {number} j 列索引\r\n     * @param {number} value 要累加的值\r\n     */\r\n    addAt(i, j, value) {\r\n        this.data[i][j] += value;\r\n    }\r\n\r\n    /**\r\n     * 創建單位矩陣\r\n     * @param {number} size 矩陣大小\r\n     * @returns {Matrix}\r\n     */\r\n    static identity(size) {\r\n        const matrix = new Matrix(size, size);\r\n        for (let i = 0; i < size; i++) {\r\n            matrix.set(i, i, 1);\r\n        }\r\n        return matrix;\r\n    }\r\n\r\n    /**\r\n     * 創建零矩陣\r\n     * @param {number} rows 行數\r\n     * @param {number} cols 列數\r\n     * @returns {Matrix}\r\n     */\r\n    static zeros(rows, cols = rows) {\r\n        return new Matrix(rows, cols);\r\n    }\r\n\r\n    /**\r\n     * 矩陣複製\r\n     * @returns {Matrix}\r\n     */\r\n    clone() {\r\n        const newData = this.data.map(row => [...row]);\r\n        return new Matrix(this.rows, this.cols, newData);\r\n    }\r\n\r\n    /**\r\n     * 檢查矩陣是否為方陣\r\n     * @returns {boolean}\r\n     */\r\n    isSquare() {\r\n        return this.rows === this.cols;\r\n    }\r\n\r\n    /**\r\n     * 打印矩陣 (調試用)\r\n     * @param {number} precision 小數點後位數\r\n     */\r\n    print(precision = 6) {\r\n        console.log('Matrix:');\r\n        for (let i = 0; i < this.rows; i++) {\r\n            const row = this.data[i].map(val => val.toFixed(precision)).join('  ');\r\n            console.log(`[${row}]`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 轉換為字符串表示\r\n     * @param {number} precision 小數點後位數\r\n     * @returns {string}\r\n     */\r\n    toString(precision = 6) {\r\n        let result = `Matrix ${this.rows}x${this.cols}:\\n`;\r\n        for (let i = 0; i < this.rows; i++) {\r\n            const row = this.data[i].map(val => val.toExponential(precision)).join('  ');\r\n            result += `[${row}]\\n`;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * 向量類 - 本質上是單列矩陣的特殊形式\r\n */\r\nexport class Vector {\r\n    /**\r\n     * @param {number} size 向量大小\r\n     * @param {number[]} data 可選的初始數據\r\n     */\r\n    constructor(size, data = null) {\r\n        this.size = size;\r\n        this.data = data ? [...data] : Array(size).fill(0);\r\n    }\r\n\r\n    /**\r\n     * 獲取元素值\r\n     * @param {number} i 索引\r\n     * @returns {number}\r\n     */\r\n    get(i) {\r\n        if (i < 0 || i >= this.size) {\r\n            throw new Error(`Vector index out of bounds: ${i}`);\r\n        }\r\n        return this.data[i];\r\n    }\r\n\r\n    /**\r\n     * 設置元素值\r\n     * @param {number} i 索引\r\n     * @param {number} value 值\r\n     */\r\n    set(i, value) {\r\n        if (i < 0 || i >= this.size) {\r\n            throw new Error(`Vector index out of bounds: ${i}`);\r\n        }\r\n        this.data[i] = value;\r\n    }\r\n\r\n    /**\r\n     * 累加元素值\r\n     * @param {number} i 索引\r\n     * @param {number} value 要累加的值\r\n     */\r\n    addAt(i, value) {\r\n        this.data[i] += value;\r\n    }\r\n\r\n    /**\r\n     * 創建零向量\r\n     * @param {number} size 大小\r\n     * @returns {Vector}\r\n     */\r\n    static zeros(size) {\r\n        return new Vector(size);\r\n    }\r\n\r\n    /**\r\n     * 向量複製\r\n     * @returns {Vector}\r\n     */\r\n    clone() {\r\n        return new Vector(this.size, this.data);\r\n    }\r\n\r\n    /**\r\n     * 打印向量 (調試用)\r\n     * @param {number} precision 小數點後位數\r\n     */\r\n    print(precision = 6) {\r\n        const values = this.data.map(val => val.toFixed(precision)).join(', ');\r\n        console.log(`Vector: [${values}]`);\r\n    }\r\n}\r\n\r\n/**\r\n * LU分解求解器\r\n * \r\n * 實現帶部分主元選擇的LU分解算法，用於求解線性方程組 Ax = b\r\n * 這是電路模擬器的數值核心，所有MNA矩陣最終都通過這裡求解。\r\n */\r\nexport class LUSolver {\r\n    /**\r\n     * 求解線性方程組 Ax = b\r\n     * @param {Matrix} A 係數矩陣 (將被修改)\r\n     * @param {Vector} b 右手邊向量 (將被修改)\r\n     * @returns {Vector} 解向量 x\r\n     */\r\n    static solve(A, b) {\r\n        if (!A.isSquare()) {\r\n            throw new Error('Matrix A must be square');\r\n        }\r\n        \r\n        if (A.rows !== b.size) {\r\n            throw new Error('Matrix A and vector b dimensions do not match');\r\n        }\r\n\r\n        const n = A.rows;\r\n        const x = b.clone();\r\n        \r\n        // Step 1: LU分解 (帶部分主元選擇)\r\n        const permutation = this.luDecomposition(A);\r\n        \r\n        // Step 2: 應用置換到右手邊向量\r\n        this.applyPermutation(x, permutation);\r\n        \r\n        // Step 3: 前向替代 (Forward Substitution) - 求解 Ly = b\r\n        this.forwardSubstitution(A, x);\r\n        \r\n        // Step 4: 後向替代 (Backward Substitution) - 求解 Ux = y\r\n        this.backwardSubstitution(A, x);\r\n        \r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * LU分解 (帶部分主元選擇)\r\n     * 在原矩陣上進行分解，L存儲在下三角部分，U存儲在上三角部分\r\n     * @param {Matrix} A 要分解的矩陣 (會被修改)\r\n     * @returns {number[]} 置換向量\r\n     */\r\n    static luDecomposition(A) {\r\n        const n = A.rows;\r\n        const permutation = Array.from({length: n}, (_, i) => i);\r\n\r\n        for (let k = 0; k < n - 1; k++) {\r\n            // 部分主元選擇 - 找到第k列中絕對值最大的元素\r\n            let maxRow = k;\r\n            let maxVal = Math.abs(A.get(k, k));\r\n            \r\n            for (let i = k + 1; i < n; i++) {\r\n                const val = Math.abs(A.get(i, k));\r\n                if (val > maxVal) {\r\n                    maxVal = val;\r\n                    maxRow = i;\r\n                }\r\n            }\r\n\r\n            // 檢查奇異性\r\n            if (maxVal < 1e-14) {\r\n                throw new Error(`Matrix is singular or nearly singular at column ${k}`);\r\n            }\r\n\r\n            // 交換行\r\n            if (maxRow !== k) {\r\n                this.swapRows(A, k, maxRow);\r\n                [permutation[k], permutation[maxRow]] = [permutation[maxRow], permutation[k]];\r\n            }\r\n\r\n            // 高斯消元\r\n            const pivot = A.get(k, k);\r\n            for (let i = k + 1; i < n; i++) {\r\n                const factor = A.get(i, k) / pivot;\r\n                A.set(i, k, factor); // 存儲L矩陣的元素\r\n                \r\n                for (let j = k + 1; j < n; j++) {\r\n                    const newVal = A.get(i, j) - factor * A.get(k, j);\r\n                    A.set(i, j, newVal);\r\n                }\r\n            }\r\n        }\r\n\r\n        // 檢查最後一個對角元素\r\n        if (Math.abs(A.get(n-1, n-1)) < 1e-14) {\r\n            throw new Error('Matrix is singular or nearly singular');\r\n        }\r\n\r\n        return permutation;\r\n    }\r\n\r\n    /**\r\n     * 交換矩陣的兩行\r\n     * @param {Matrix} A 矩陣\r\n     * @param {number} row1 行1\r\n     * @param {number} row2 行2\r\n     */\r\n    static swapRows(A, row1, row2) {\r\n        if (row1 === row2) return;\r\n        \r\n        for (let j = 0; j < A.cols; j++) {\r\n            const temp = A.get(row1, j);\r\n            A.set(row1, j, A.get(row2, j));\r\n            A.set(row2, j, temp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 應用置換到向量\r\n     * @param {Vector} x 向量 (會被修改)\r\n     * @param {number[]} permutation 置換向量\r\n     */\r\n    static applyPermutation(x, permutation) {\r\n        const temp = Array(x.size);\r\n        for (let i = 0; i < x.size; i++) {\r\n            temp[i] = x.get(permutation[i]);\r\n        }\r\n        for (let i = 0; i < x.size; i++) {\r\n            x.set(i, temp[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 前向替代 - 求解 Ly = b (其中L的對角元素為1)\r\n     * @param {Matrix} LU LU分解後的矩陣\r\n     * @param {Vector} x 向量 (會被修改)\r\n     */\r\n    static forwardSubstitution(LU, x) {\r\n        const n = x.size;\r\n        \r\n        for (let i = 0; i < n; i++) {\r\n            let sum = 0;\r\n            for (let j = 0; j < i; j++) {\r\n                sum += LU.get(i, j) * x.get(j);\r\n            }\r\n            x.set(i, x.get(i) - sum);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 後向替代 - 求解 Ux = y\r\n     * @param {Matrix} LU LU分解後的矩陣\r\n     * @param {Vector} x 向量 (會被修改)\r\n     */\r\n    static backwardSubstitution(LU, x) {\r\n        const n = x.size;\r\n        \r\n        for (let i = n - 1; i >= 0; i--) {\r\n            let sum = 0;\r\n            for (let j = i + 1; j < n; j++) {\r\n                sum += LU.get(i, j) * x.get(j);\r\n            }\r\n            x.set(i, (x.get(i) - sum) / LU.get(i, i));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 矩陣條件數估算 (用於數值穩定性檢查)\r\n     * @param {Matrix} A 原矩陣\r\n     * @returns {number} 估算的條件數\r\n     */\r\n    static estimateConditionNumber(A) {\r\n        // 簡單的條件數估算：最大對角元素 / 最小對角元素\r\n        let maxDiag = 0;\r\n        let minDiag = Infinity;\r\n        \r\n        for (let i = 0; i < A.rows; i++) {\r\n            const val = Math.abs(A.get(i, i));\r\n            maxDiag = Math.max(maxDiag, val);\r\n            minDiag = Math.min(minDiag, val);\r\n        }\r\n        \r\n        return minDiag > 1e-14 ? maxDiag / minDiag : Infinity;\r\n    }\r\n}\r\n\r\n/**\r\n * 數值工具函數\r\n */\r\nexport class NumericalUtils {\r\n    /**\r\n     * 檢查兩個數值是否在容差範圍內相等\r\n     * @param {number} a 數值a\r\n     * @param {number} b 數值b\r\n     * @param {number} tolerance 容差\r\n     * @returns {boolean}\r\n     */\r\n    static isClose(a, b, tolerance = 1e-12) {\r\n        return Math.abs(a - b) <= tolerance;\r\n    }\r\n\r\n    /**\r\n     * 檢查向量的收斂性 (用於Newton-Raphson迭代)\r\n     * @param {Vector} x1 舊解\r\n     * @param {Vector} x2 新解\r\n     * @param {number} tolerance 收斂容差\r\n     * @returns {boolean}\r\n     */\r\n    static hasConverged(x1, x2, tolerance = 1e-9) {\r\n        for (let i = 0; i < x1.size; i++) {\r\n            const relError = Math.abs(x2.get(i) - x1.get(i)) / (Math.abs(x2.get(i)) + 1e-12);\r\n            if (relError > tolerance) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 計算向量的無窮範數 (最大絕對值)\r\n     * @param {Vector} x 向量\r\n     * @returns {number}\r\n     */\r\n    static infinityNorm(x) {\r\n        let maxVal = 0;\r\n        for (let i = 0; i < x.size; i++) {\r\n            maxVal = Math.max(maxVal, Math.abs(x.get(i)));\r\n        }\r\n        return maxVal;\r\n    }\r\n}","/**\r\n * 修正節點分析法 (Modified Nodal Analysis, MNA) 核心\r\n * \r\n * MNA是建立電路方程式的標準工業方法，能夠同時處理：\r\n * - 電阻、電容、電感等雙端元件\r\n * - 電壓源、電流源\r\n * - 受控源等複雜元件\r\n * \r\n * 基本概念：\r\n * - 對每個節點寫KCL方程式\r\n * - 對每個電壓源寫額外的約束方程式\r\n * - 形成 [G C; B D] * [v; j] = [i; e] 的線性方程組\r\n */\r\n\r\nimport { Matrix, Vector } from './linalg.js';\r\n\r\n/**\r\n * MNA矩陣生成器\r\n * 負責從電路元件列表生成MNA矩陣和右手邊向量\r\n */\r\nexport class MNABuilder {\r\n    constructor() {\r\n        // 節點映射：節點名稱 -> 矩陣索引\r\n        this.nodeMap = new Map();\r\n        this.nodeCount = 0;\r\n        \r\n        // 電壓源映射：電壓源名稱 -> 電流變數索引\r\n        this.voltageSourceMap = new Map();\r\n        this.voltageSourceCount = 0;\r\n        \r\n        // 矩陣維度\r\n        this.matrixSize = 0;\r\n        \r\n        // MNA矩陣和向量\r\n        this.matrix = null;\r\n        this.rhs = null;\r\n        \r\n        // 調試信息\r\n        this.debugInfo = {\r\n            nodeNames: [],\r\n            voltageSourceNames: [],\r\n            matrixLabels: []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 重置建構器，準備處理新電路\r\n     */\r\n    reset() {\r\n        this.nodeMap.clear();\r\n        this.nodeCount = 0;\r\n        this.voltageSourceMap.clear();\r\n        this.voltageSourceCount = 0;\r\n        this.matrixSize = 0;\r\n        this.matrix = null;\r\n        this.rhs = null;\r\n        this.debugInfo = {\r\n            nodeNames: [],\r\n            voltageSourceNames: [],\r\n            matrixLabels: []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 分析電路並建立節點映射\r\n     * @param {BaseComponent[]} components 電路元件列表\r\n     */\r\n    analyzeCircuit(components) {\r\n        this.reset();\r\n        \r\n        // 首先收集所有節點\r\n        const nodeSet = new Set();\r\n        const voltageSourceSet = new Set();\r\n        \r\n        for (const component of components) {\r\n            // 收集節點\r\n            if (component.nodes) {\r\n                for (const node of component.nodes) {\r\n                    if (node !== '0' && node !== 'gnd') { // 排除接地節點\r\n                        nodeSet.add(node);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // 收集電壓源 (需要額外的電流變數)\r\n            if (component.type === 'V' || component.needsCurrentVariable()) {\r\n                voltageSourceSet.add(component.name);\r\n            }\r\n        }\r\n\r\n        // 建立節點映射 (接地節點不包含在矩陣中)\r\n        let nodeIndex = 0;\r\n        for (const node of Array.from(nodeSet).sort()) {\r\n            this.nodeMap.set(node, nodeIndex);\r\n            this.debugInfo.nodeNames.push(node);\r\n            nodeIndex++;\r\n        }\r\n        this.nodeCount = nodeIndex;\r\n\r\n        // 建立電壓源映射\r\n        let vsIndex = 0;\r\n        for (const vsName of Array.from(voltageSourceSet).sort()) {\r\n            this.voltageSourceMap.set(vsName, this.nodeCount + vsIndex);\r\n            this.debugInfo.voltageSourceNames.push(vsName);\r\n            vsIndex++;\r\n        }\r\n        this.voltageSourceCount = vsIndex;\r\n\r\n        // 計算總矩陣大小\r\n        this.matrixSize = this.nodeCount + this.voltageSourceCount;\r\n        \r\n        // 建立調試標籤\r\n        this.debugInfo.matrixLabels = [\r\n            ...this.debugInfo.nodeNames.map(name => `V(${name})`),\r\n            ...this.debugInfo.voltageSourceNames.map(name => `I(${name})`)\r\n        ];\r\n\r\n        console.log(`MNA Analysis: ${this.nodeCount} nodes, ${this.voltageSourceCount} voltage sources, matrix size: ${this.matrixSize}x${this.matrixSize}`);\r\n    }\r\n\r\n    /**\r\n     * 建立MNA矩陣\r\n     * @param {BaseComponent[]} components 電路元件列表\r\n     * @param {number} time 當前時間 (用於時變元件)\r\n     * @returns {{matrix: Matrix, rhs: Vector}}\r\n     */\r\n    buildMNAMatrix(components, time = 0) {\r\n        if (this.matrixSize === 0) {\r\n            throw new Error('Circuit not analyzed. Call analyzeCircuit() first.');\r\n        }\r\n\r\n        // 初始化矩陣和右手邊向量\r\n        this.matrix = Matrix.zeros(this.matrixSize, this.matrixSize);\r\n        this.rhs = Vector.zeros(this.matrixSize);\r\n\r\n        // 🔥 新增：在蓋章前，先更新所有非線性元件的狀態\r\n        if (time > 0) {  // DC 分析時跳過\r\n            for (const component of components) {\r\n                if (component.type === 'VM' && typeof component.updateFromPreviousVoltages === 'function') {\r\n                    component.updateFromPreviousVoltages();\r\n                }\r\n            }\r\n        }\r\n\r\n        // 逐個添加元件的貢獻\r\n        for (const component of components) {\r\n            try {\r\n                this.stampComponent(component, time);\r\n            } catch (error) {\r\n                throw new Error(`Failed to stamp component ${component.name}: ${error.message}`);\r\n            }\r\n        }\r\n\r\n        return {\r\n            matrix: this.matrix,\r\n            rhs: this.rhs\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 將元件的貢獻添加到MNA矩陣中 (Stamping)\r\n     * @param {BaseComponent} component 電路元件\r\n     * @param {number} time 當前時間\r\n     */\r\n    stampComponent(component, time) {\r\n        switch (component.type) {\r\n            case 'R':\r\n                this.stampResistor(component);\r\n                break;\r\n            case 'C':\r\n                this.stampCapacitor(component);\r\n                break;\r\n            case 'L':\r\n                this.stampInductor(component);\r\n                break;\r\n            case 'V':\r\n                this.stampVoltageSource(component, time);\r\n                break;\r\n            case 'I':\r\n                this.stampCurrentSource(component, time);\r\n                break;\r\n            case 'VCVS': // 壓控電壓源\r\n                this.stampVCVS(component);\r\n                break;\r\n            case 'VCCS': // 壓控電流源\r\n                this.stampVCCS(component);\r\n                break;\r\n            default:\r\n                if (typeof component.stamp === 'function') {\r\n                    // 允許自定義元件實現自己的stamp方法\r\n                    component.stamp(this.matrix, this.rhs, this.nodeMap, this.voltageSourceMap, time);\r\n                } else {\r\n                    console.warn(`Unknown component type: ${component.type} (${component.name})`);\r\n                }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 電阻的MNA印記\r\n     * 在節點i和j之間添加電導 G = 1/R\r\n     */\r\n    stampResistor(resistor) {\r\n        const nodes = resistor.nodes;\r\n        const conductance = 1 / resistor.value;\r\n        \r\n        const n1 = this.getNodeIndex(nodes[0]);\r\n        const n2 = this.getNodeIndex(nodes[1]);\r\n\r\n        // G矩陣的印記: G[i,i] += G, G[j,j] += G, G[i,j] -= G, G[j,i] -= G\r\n        if (n1 >= 0) {\r\n            this.matrix.addAt(n1, n1, conductance);\r\n            if (n2 >= 0) {\r\n                this.matrix.addAt(n1, n2, -conductance);\r\n            }\r\n        }\r\n        \r\n        if (n2 >= 0) {\r\n            this.matrix.addAt(n2, n2, conductance);\r\n            if (n1 >= 0) {\r\n                this.matrix.addAt(n2, n1, -conductance);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 電容的MNA印記 (用於暫態分析)\r\n     * 使用伴隨模型，支持不同的積分方法\r\n     */\r\n    stampCapacitor(capacitor) {\r\n        if (!capacitor.timeStep) {\r\n            // 在DC分析中，電容視為開路\r\n            return;\r\n        }\r\n\r\n        const nodes = capacitor.nodes;\r\n        // 使用組件自己的等效電導 (支持梯形法)\r\n        const Geq = capacitor.equivalentConductance;\r\n\r\n        const n1 = this.getNodeIndex(nodes[0]);\r\n        const n2 = this.getNodeIndex(nodes[1]);\r\n\r\n        // 等效電導的印記\r\n        if (n1 >= 0) {\r\n            this.matrix.addAt(n1, n1, Geq);\r\n            if (n2 >= 0) {\r\n                this.matrix.addAt(n1, n2, -Geq);\r\n            }\r\n        }\r\n        \r\n        if (n2 >= 0) {\r\n            this.matrix.addAt(n2, n2, Geq);\r\n            if (n1 >= 0) {\r\n                this.matrix.addAt(n2, n1, -Geq);\r\n            }\r\n        }\r\n\r\n        // 歷史電流項 (右手邊)\r\n        if (capacitor.historyCurrentSource !== undefined) {\r\n            if (n1 >= 0) {\r\n                this.rhs.addAt(n1, capacitor.historyCurrentSource);\r\n            }\r\n            if (n2 >= 0) {\r\n                this.rhs.addAt(n2, -capacitor.historyCurrentSource);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 電感的MNA印記 (需要電流變數)\r\n     * 使用伴隨模型: v_L(t) = L * di/dt ≈ L/h * (i(t) - i(t-h))\r\n     */\r\n    /**\r\n     * 電感的MNA印記 (需要電流變數)\r\n     * 🔥 修正版：支援耦合電感（互感）\r\n     */\r\n    stampInductor(inductor) {\r\n        const nodes = inductor.nodes;\r\n        const L = inductor.getInductance(); // 使用 getInductance()\r\n        \r\n        const n1 = this.getNodeIndex(nodes[0]);\r\n        const n2 = this.getNodeIndex(nodes[1]);\r\n        const currIndex = this.voltageSourceMap.get(inductor.name);\r\n        \r\n        if (currIndex === undefined) {\r\n            throw new Error(`Inductor ${inductor.name} current variable not found`);\r\n        }\r\n\r\n        // B矩陣和C矩陣：電流從節點流出的關係\r\n        // V_n1 - V_n2 - V_L = 0  =>  V_n1 - V_n2 = V_L\r\n        if (n1 >= 0) {\r\n            this.matrix.addAt(n1, currIndex, 1);\r\n            this.matrix.addAt(currIndex, n1, 1);\r\n        }\r\n        if (n2 >= 0) {\r\n            this.matrix.addAt(n2, currIndex, -1);\r\n            this.matrix.addAt(currIndex, n2, -1);\r\n        }\r\n\r\n        // D矩陣：電感的電壓-電流關係\r\n        if (inductor.timeStep) {\r\n            // 暫態分析：使用組件的等效電阻 (支持梯形法)\r\n            const Req = inductor.equivalentResistance;\r\n            \r\n            // 1. 印花等效電阻項\r\n            this.matrix.addAt(currIndex, currIndex, -Req);\r\n            \r\n            // 2. 印花歷史電壓源項\r\n            if (inductor.historyVoltageSource !== undefined) {\r\n                this.rhs.addAt(currIndex, -inductor.historyVoltageSource);\r\n            }\r\n\r\n            // 🔥 3. 印花互感項\r\n            if (inductor.couplings) {\r\n                // 獲取時間步長\r\n                const h = inductor.timeStep;\r\n                if (!h) {\r\n                    throw new Error(`Inductor ${inductor.name} time step not initialized for coupling`);\r\n                }\r\n                \r\n                for (const coupling of inductor.couplings) {\r\n                    const otherInductor = coupling.inductor;\r\n                    const M = coupling.mutualInductance;\r\n                    \r\n                    // 獲取另一個電感的電流變數索引\r\n                    const otherCurrIndex = this.voltageSourceMap.get(otherInductor.name);\r\n                    if (otherCurrIndex === undefined) {\r\n                        throw new Error(`Coupled inductor ${otherInductor.name} not found for ${inductor.name}`);\r\n                    }\r\n\r\n                    // 添加互感對矩陣的貢獻 (V_L += M * dI_other/dt)\r\n                    this.matrix.addAt(currIndex, otherCurrIndex, -M / h);\r\n                    \r\n                    // 添加互感對歷史項的貢獻\r\n                    if (otherInductor.historyTerm !== undefined) {\r\n                        this.rhs.addAt(currIndex, -M / h * otherInductor.historyTerm);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // DC 分析：電感表現為短路，V_L = 0\r\n            // 直接設置電壓約束 V_n1 - V_n2 = 0\r\n            // 這已經在上面的 B 和 C 矩陣中處理了\r\n            \r\n            // 添加電感的寄生電阻（如果有的話）\r\n            const R = inductor.resistance || 1e-9; // 添加極小電阻避免數值問題\r\n            this.matrix.addAt(currIndex, currIndex, -R);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 電壓源的MNA印記\r\n     */\r\n    stampVoltageSource(voltageSource, time) {\r\n        const nodes = voltageSource.nodes;\r\n        const n1 = this.getNodeIndex(nodes[0]); // 正端\r\n        const n2 = this.getNodeIndex(nodes[1]); // 負端\r\n        const currIndex = this.voltageSourceMap.get(voltageSource.name);\r\n        \r\n        if (currIndex === undefined) {\r\n            throw new Error(`Voltage source ${voltageSource.name} current variable not found`);\r\n        }\r\n\r\n        // B矩陣和C矩陣: 電流約束\r\n        if (n1 >= 0) {\r\n            this.matrix.addAt(n1, currIndex, 1);\r\n            this.matrix.addAt(currIndex, n1, 1);\r\n        }\r\n        if (n2 >= 0) {\r\n            this.matrix.addAt(n2, currIndex, -1);\r\n            this.matrix.addAt(currIndex, n2, -1);\r\n        }\r\n\r\n        // E向量: 電壓約束\r\n        const voltage = voltageSource.getValue(time);\r\n        this.rhs.addAt(currIndex, voltage);\r\n    }\r\n\r\n    /**\r\n     * 電流源的MNA印記\r\n     */\r\n    stampCurrentSource(currentSource, time) {\r\n        const nodes = currentSource.nodes;\r\n        const n1 = this.getNodeIndex(nodes[0]); // 電流流出的節點\r\n        const n2 = this.getNodeIndex(nodes[1]); // 電流流入的節點\r\n        \r\n        const current = currentSource.getValue(time);\r\n        \r\n        // I向量: 注入電流\r\n        if (n1 >= 0) {\r\n            this.rhs.addAt(n1, -current);\r\n        }\r\n        if (n2 >= 0) {\r\n            this.rhs.addAt(n2, current);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 壓控電壓源 (VCVS) 的印記\r\n     * E * V_control = V_output\r\n     */\r\n    stampVCVS(vcvs) {\r\n        const outputNodes = [vcvs.nodes[0], vcvs.nodes[1]]; // 輸出節點\r\n        const controlNodes = [vcvs.nodes[2], vcvs.nodes[3]]; // 控制節點\r\n        const gain = vcvs.value;\r\n        \r\n        const no1 = this.getNodeIndex(outputNodes[0]);\r\n        const no2 = this.getNodeIndex(outputNodes[1]);\r\n        const nc1 = this.getNodeIndex(controlNodes[0]);\r\n        const nc2 = this.getNodeIndex(controlNodes[1]);\r\n        const currIndex = this.voltageSourceMap.get(vcvs.name);\r\n\r\n        // 類似電壓源的處理，但右手邊是控制電壓的函數\r\n        if (no1 >= 0) {\r\n            this.matrix.addAt(no1, currIndex, 1);\r\n            this.matrix.addAt(currIndex, no1, 1);\r\n        }\r\n        if (no2 >= 0) {\r\n            this.matrix.addAt(no2, currIndex, -1);\r\n            this.matrix.addAt(currIndex, no2, -1);\r\n        }\r\n\r\n        // 控制關係: V_out = gain * (V_c1 - V_c2)\r\n        if (nc1 >= 0) {\r\n            this.matrix.addAt(currIndex, nc1, -gain);\r\n        }\r\n        if (nc2 >= 0) {\r\n            this.matrix.addAt(currIndex, nc2, gain);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 壓控電流源 (VCCS) 的印記  \r\n     * I_output = gm * V_control\r\n     */\r\n    stampVCCS(vccs) {\r\n        const outputNodes = [vccs.nodes[0], vccs.nodes[1]]; // 輸出節點\r\n        const controlNodes = [vccs.nodes[2], vccs.nodes[3]]; // 控制節點\r\n        const transconductance = vccs.value; // gm\r\n        \r\n        const no1 = this.getNodeIndex(outputNodes[0]);\r\n        const no2 = this.getNodeIndex(outputNodes[1]);\r\n        const nc1 = this.getNodeIndex(controlNodes[0]);\r\n        const nc2 = this.getNodeIndex(controlNodes[1]);\r\n\r\n        // G矩陣的修改: 添加跨導項\r\n        if (no1 >= 0 && nc1 >= 0) {\r\n            this.matrix.addAt(no1, nc1, transconductance);\r\n        }\r\n        if (no1 >= 0 && nc2 >= 0) {\r\n            this.matrix.addAt(no1, nc2, -transconductance);\r\n        }\r\n        if (no2 >= 0 && nc1 >= 0) {\r\n            this.matrix.addAt(no2, nc1, -transconductance);\r\n        }\r\n        if (no2 >= 0 && nc2 >= 0) {\r\n            this.matrix.addAt(no2, nc2, transconductance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取節點在矩陣中的索引\r\n     * @param {string} nodeName 節點名稱\r\n     * @returns {number} 矩陣索引，如果是接地節點則返回-1\r\n     */\r\n    getNodeIndex(nodeName) {\r\n        if (nodeName === '0' || nodeName === 'gnd') {\r\n            return -1; // 接地節點\r\n        }\r\n        \r\n        const index = this.nodeMap.get(nodeName);\r\n        if (index === undefined) {\r\n            throw new Error(`Node ${nodeName} not found in circuit`);\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * 從解向量中提取節點電壓\r\n     * @param {Vector} solution MNA求解結果\r\n     * @returns {Map<string, number>} 節點名稱 -> 電壓值的映射\r\n     */\r\n    extractNodeVoltages(solution) {\r\n        const voltages = new Map();\r\n        \r\n        // 接地節點電壓為0\r\n        voltages.set('0', 0);\r\n        voltages.set('gnd', 0);\r\n        \r\n        // 其他節點電壓\r\n        for (const [nodeName, index] of this.nodeMap) {\r\n            voltages.set(nodeName, solution.get(index));\r\n        }\r\n        \r\n        return voltages;\r\n    }\r\n\r\n    /**\r\n     * 從解向量中提取電壓源電流\r\n     * @param {Vector} solution MNA求解結果\r\n     * @returns {Map<string, number>} 電壓源名稱 -> 電流值的映射\r\n     */\r\n    extractVoltageSourceCurrents(solution) {\r\n        const currents = new Map();\r\n        \r\n        for (const [vsName, index] of this.voltageSourceMap) {\r\n            currents.set(vsName, solution.get(index));\r\n        }\r\n        \r\n        return currents;\r\n    }\r\n\r\n    /**\r\n     * 打印MNA矩陣 (調試用)\r\n     * @param {number} precision 小數點位數\r\n     */\r\n    printMNAMatrix(precision = 4) {\r\n        console.log('\\n=== MNA Matrix ===');\r\n        \r\n        // 打印標題行\r\n        const header = '     ' + this.debugInfo.matrixLabels.map(label => \r\n            label.padStart(12)).join('');\r\n        console.log(header + '     RHS');\r\n        \r\n        // 打印矩陣行\r\n        for (let i = 0; i < this.matrixSize; i++) {\r\n            const rowLabel = this.debugInfo.matrixLabels[i].padStart(4);\r\n            let row = rowLabel + ' ';\r\n            \r\n            for (let j = 0; j < this.matrixSize; j++) {\r\n                const val = this.matrix.get(i, j);\r\n                row += val.toFixed(precision).padStart(12);\r\n            }\r\n            \r\n            row += ' | ' + this.rhs.get(i).toFixed(precision).padStart(10);\r\n            console.log(row);\r\n        }\r\n        console.log('==================\\n');\r\n    }\r\n\r\n    /**\r\n     * 獲取矩陣信息 (用於調試和分析)\r\n     * @returns {Object} 包含矩陣信息的對象\r\n     */\r\n    getMatrixInfo() {\r\n        return {\r\n            nodeCount: this.nodeCount,\r\n            voltageSourceCount: this.voltageSourceCount,\r\n            matrixSize: this.matrixSize,\r\n            nodeNames: [...this.debugInfo.nodeNames],\r\n            voltageSourceNames: [...this.debugInfo.voltageSourceNames],\r\n            matrixLabels: [...this.debugInfo.matrixLabels]\r\n        };\r\n    }\r\n}","/**\r\n * 暫態分析 (Transient Analysis) 實現\r\n * \r\n * 基於後向歐拉法的固定步長時域分析算法\r\n * 這是AkingSPICE v0.1的核心分析引擎\r\n */\r\n\r\nimport { Matrix, Vector, LUSolver } from '../core/linalg.js';\r\nimport { MNABuilder } from '../core/mna.js';\r\n\r\n/**\r\n * 暫態分析結果類\r\n * 存儲和管理時域分析的結果數據\r\n */\r\nexport class TransientResult {\r\n    constructor() {\r\n        this.timeVector = [];\r\n        this.nodeVoltages = new Map(); // nodeName -> voltage array\r\n        this.branchCurrents = new Map(); // branchName -> current array\r\n        this.componentData = new Map(); // componentName -> data array\r\n        this.analysisInfo = {};\r\n    }\r\n\r\n    /**\r\n     * 添加一個時間點的結果\r\n     * @param {number} time 時間點\r\n     * @param {Map<string, number>} voltages 節點電壓\r\n     * @param {Map<string, number>} currents 支路電流\r\n     */\r\n    addTimePoint(time, voltages, currents) {\r\n        this.timeVector.push(time);\r\n        \r\n        // 添加節點電壓\r\n        for (const [nodeName, voltage] of voltages) {\r\n            if (!this.nodeVoltages.has(nodeName)) {\r\n                this.nodeVoltages.set(nodeName, []);\r\n            }\r\n            this.nodeVoltages.get(nodeName).push(voltage);\r\n        }\r\n        \r\n        // 添加支路電流\r\n        for (const [branchName, current] of currents) {\r\n            if (!this.branchCurrents.has(branchName)) {\r\n                this.branchCurrents.set(branchName, []);\r\n            }\r\n            this.branchCurrents.get(branchName).push(current);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取時間向量\r\n     * @returns {number[]} 時間點陣列\r\n     */\r\n    getTimeVector() {\r\n        return [...this.timeVector];\r\n    }\r\n\r\n    /**\r\n     * 獲取節點電壓向量\r\n     * @param {string} nodeName 節點名稱 (如 'V(1)', '1')\r\n     * @returns {number[]} 電壓值陣列\r\n     */\r\n    getVoltageVector(nodeName) {\r\n        // 處理SPICE格式的節點名稱 V(nodeName)\r\n        let actualNodeName = nodeName;\r\n        const voltageMatch = nodeName.match(/^V\\((.+)\\)$/);\r\n        if (voltageMatch) {\r\n            actualNodeName = voltageMatch[1];\r\n        }\r\n        \r\n        return this.nodeVoltages.get(actualNodeName) || [];\r\n    }\r\n\r\n    /**\r\n     * 獲取支路電流向量\r\n     * @param {string} branchName 支路名稱 (如 'I(V1)', 'V1')\r\n     * @returns {number[]} 電流值陣列\r\n     */\r\n    getCurrentVector(branchName) {\r\n        // 處理SPICE格式的電流名稱 I(componentName)\r\n        let actualBranchName = branchName;\r\n        const currentMatch = branchName.match(/^I\\((.+)\\)$/);\r\n        if (currentMatch) {\r\n            actualBranchName = currentMatch[1];\r\n        }\r\n        \r\n        return this.branchCurrents.get(actualBranchName) || [];\r\n    }\r\n\r\n    /**\r\n     * 獲取通用向量 (時間、電壓或電流)\r\n     * @param {string} vectorName 向量名稱\r\n     * @returns {number[]} 數值陣列\r\n     */\r\n    getVector(vectorName) {\r\n        if (vectorName.toLowerCase() === 'time') {\r\n            return this.getTimeVector();\r\n        }\r\n        \r\n        // 嘗試作為電壓獲取\r\n        const voltageVector = this.getVoltageVector(vectorName);\r\n        if (voltageVector.length > 0) {\r\n            return voltageVector;\r\n        }\r\n        \r\n        // 嘗試作為電流獲取\r\n        const currentVector = this.getCurrentVector(vectorName);\r\n        if (currentVector.length > 0) {\r\n            return currentVector;\r\n        }\r\n        \r\n        console.warn(`Vector ${vectorName} not found`);\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * 獲取所有可用的向量名稱\r\n     * @returns {string[]} 向量名稱列表\r\n     */\r\n    getAvailableVectors() {\r\n        const vectors = ['time'];\r\n        \r\n        // 添加電壓向量\r\n        for (const nodeName of this.nodeVoltages.keys()) {\r\n            vectors.push(`V(${nodeName})`);\r\n        }\r\n        \r\n        // 添加電流向量\r\n        for (const branchName of this.branchCurrents.keys()) {\r\n            vectors.push(`I(${branchName})`);\r\n        }\r\n        \r\n        return vectors;\r\n    }\r\n\r\n    /**\r\n     * 獲取分析統計信息\r\n     * @returns {Object} 統計信息\r\n     */\r\n    getAnalysisInfo() {\r\n        const info = {\r\n            ...this.analysisInfo,\r\n            totalTimePoints: this.timeVector.length,\r\n            startTime: this.timeVector[0] || 0,\r\n            stopTime: this.timeVector[this.timeVector.length - 1] || 0,\r\n            availableVectors: this.getAvailableVectors()\r\n        };\r\n        \r\n        if (this.timeVector.length > 1) {\r\n            const timeSteps = [];\r\n            for (let i = 1; i < this.timeVector.length; i++) {\r\n                timeSteps.push(this.timeVector[i] - this.timeVector[i-1]);\r\n            }\r\n            info.averageTimeStep = timeSteps.reduce((sum, step) => sum + step, 0) / timeSteps.length;\r\n            info.minTimeStep = Math.min(...timeSteps);\r\n            info.maxTimeStep = Math.max(...timeSteps);\r\n        }\r\n        \r\n        return info;\r\n    }\r\n}\r\n\r\n/**\r\n * 暫態分析引擎\r\n */\r\nexport class TransientAnalysis {\r\n    constructor() {\r\n        this.mnaBuilder = new MNABuilder();\r\n        this.components = [];\r\n        this.result = null;\r\n        \r\n        // 分析參數\r\n        this.timeStep = 1e-6;     // 預設時間步長: 1µs\r\n        this.startTime = 0;       // 開始時間\r\n        this.stopTime = 1e-3;     // 結束時間: 1ms\r\n        this.maxTimeStep = 1e-6;  // 最大時間步長\r\n        this.minTimeStep = 1e-12; // 最小時間步長\r\n        \r\n        // 數值參數\r\n        this.maxIterations = 50;  // 最大Newton-Raphson迭代次數\r\n        this.convergenceTol = 1e-9; // 收斂容差\r\n        \r\n        // 調試和監控\r\n        this.debug = false;\r\n        this.saveHistory = true;\r\n        this.progressCallback = null;\r\n    }\r\n\r\n    /**\r\n     * 設置分析參數\r\n     * @param {Object} params 參數對象\r\n     */\r\n    setParameters(params) {\r\n        if (params.timeStep !== undefined) this.timeStep = params.timeStep;\r\n        if (params.startTime !== undefined) this.startTime = params.startTime;\r\n        if (params.stopTime !== undefined) this.stopTime = params.stopTime;\r\n        if (params.maxTimeStep !== undefined) this.maxTimeStep = params.maxTimeStep;\r\n        if (params.minTimeStep !== undefined) this.minTimeStep = params.minTimeStep;\r\n        if (params.maxIterations !== undefined) this.maxIterations = params.maxIterations;\r\n        if (params.convergenceTol !== undefined) this.convergenceTol = params.convergenceTol;\r\n        if (params.debug !== undefined) this.debug = params.debug;\r\n        if (params.progressCallback !== undefined) this.progressCallback = params.progressCallback;\r\n    }\r\n\r\n    /**\r\n     * 執行暫態分析\r\n     * @param {BaseComponent[]} components 電路元件列表\r\n     * @param {Object} params 分析參數\r\n     * @returns {TransientResult} 分析結果\r\n     */\r\n    async run(components, params = {}) {\r\n        this.setParameters(params);\r\n        this.components = [...components];\r\n        this.result = new TransientResult();\r\n        \r\n        console.log(`Starting transient analysis: ${this.startTime}s to ${this.stopTime}s, step=${this.timeStep}s`);\r\n        \r\n        try {\r\n            // 初始化\r\n            await this.initialize();\r\n            \r\n            // 主時域迴圈\r\n            await this.timeLoop();\r\n            \r\n            // 完成分析\r\n            this.finalize();\r\n            \r\n            console.log(`Transient analysis completed: ${this.result.timeVector.length} time points`);\r\n            return this.result;\r\n            \r\n        } catch (error) {\r\n            console.error('Transient analysis failed:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化分析\r\n     */\r\n    /**\r\n     * 初始化暫態分析\r\n     * @param {BaseComponent[]} components 元件列表\r\n     * @param {number} timeStep 時間步長\r\n     * @param {string} integrationMethod 積分方法: 'backward_euler' 或 'trapezoidal'\r\n     */\r\n    async initialize(components = null, timeStep = null, integrationMethod = 'backward_euler') {\r\n        // 如果提供了元件列表，使用它\r\n        if (components) {\r\n            this.components = [...components];\r\n        }\r\n        \r\n        // 如果提供了時間步長，使用它\r\n        if (timeStep !== null) {\r\n            this.timeStep = timeStep;\r\n        }\r\n        \r\n        // 設置積分方法\r\n        this.integrationMethod = integrationMethod;\r\n        \r\n        // 分析電路拓撲\r\n        this.mnaBuilder.analyzeCircuit(this.components);\r\n        \r\n        // 初始化所有元件的暫態狀態\r\n        for (const component of this.components) {\r\n            component.initTransient(this.timeStep, integrationMethod);\r\n        }\r\n        \r\n        // 設置初始條件 (DC工作點)\r\n        await this.setInitialConditions();\r\n        \r\n        // 儲存分析信息\r\n        const methodName = integrationMethod === 'trapezoidal' ? 'Trapezoidal Rule' : 'Backward Euler';\r\n        this.result.analysisInfo = {\r\n            timeStep: this.timeStep,\r\n            startTime: this.startTime,\r\n            stopTime: this.stopTime,\r\n            method: methodName,\r\n            integrationMethod: integrationMethod,\r\n            matrixSize: this.mnaBuilder.matrixSize,\r\n            nodeCount: this.mnaBuilder.nodeCount,\r\n            voltageSourceCount: this.mnaBuilder.voltageSourceCount\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 設置初始條件 (執行DC分析)\r\n     */\r\n    async setInitialConditions() {\r\n        if (this.debug) {\r\n            console.log('Setting initial conditions...');\r\n        }\r\n        \r\n        // 建立t=0時的MNA矩陣\r\n        const { matrix, rhs } = this.mnaBuilder.buildMNAMatrix(this.components, 0);\r\n        \r\n        if (this.debug) {\r\n            this.mnaBuilder.printMNAMatrix();\r\n        }\r\n        \r\n        // 求解初始工作點\r\n        const solution = LUSolver.solve(matrix, rhs);\r\n        \r\n        // 提取初始狀態\r\n        const nodeVoltages = this.mnaBuilder.extractNodeVoltages(solution);\r\n        const branchCurrents = this.mnaBuilder.extractVoltageSourceCurrents(solution);\r\n        \r\n        // 更新元件歷史狀態\r\n        for (const component of this.components) {\r\n            component.updateHistory(nodeVoltages, branchCurrents);\r\n        }\r\n        \r\n        // 保存初始點\r\n        this.result.addTimePoint(this.startTime, nodeVoltages, branchCurrents);\r\n        \r\n        if (this.debug) {\r\n            console.log('Initial conditions set');\r\n            this.printSolutionSummary(nodeVoltages, branchCurrents);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 主時域迴圈\r\n     */\r\n    async timeLoop() {\r\n        let currentTime = this.startTime + this.timeStep;\r\n        let stepCount = 0;\r\n        const totalSteps = Math.ceil((this.stopTime - this.startTime) / this.timeStep);\r\n        \r\n        while (currentTime <= this.stopTime) {\r\n            stepCount++;\r\n            \r\n            try {\r\n                // 執行一個時間步\r\n                await this.singleTimeStep(currentTime);\r\n                \r\n                // 進度回調\r\n                if (this.progressCallback) {\r\n                    const progress = stepCount / totalSteps;\r\n                    this.progressCallback(progress, currentTime, stepCount);\r\n                }\r\n                \r\n                // 調試輸出\r\n                if (this.debug && stepCount % 100 === 0) {\r\n                    console.log(`Step ${stepCount}/${totalSteps}, time=${(currentTime * 1e6).toFixed(2)}µs`);\r\n                }\r\n                \r\n                currentTime += this.timeStep;\r\n                \r\n            } catch (error) {\r\n                console.error(`Time step failed at t=${currentTime}s:`, error);\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 執行單個時間步\r\n     * @param {number} time 當前時間\r\n     */\r\n    async singleTimeStep(time) {\r\n        // 更新所有元件的伴隨模型\r\n        for (const component of this.components) {\r\n            if (typeof component.updateCompanionModel === 'function') {\r\n                component.updateCompanionModel();\r\n            }\r\n        }\r\n        \r\n        // 建立當前時間點的MNA矩陣\r\n        const { matrix, rhs } = this.mnaBuilder.buildMNAMatrix(this.components, time);\r\n        \r\n        // 求解線性方程組\r\n        const solution = LUSolver.solve(matrix, rhs);\r\n        \r\n        // 提取節點電壓和支路電流\r\n        const nodeVoltages = this.mnaBuilder.extractNodeVoltages(solution);\r\n        const branchCurrents = this.mnaBuilder.extractVoltageSourceCurrents(solution);\r\n        \r\n        // 更新所有元件的歷史狀態\r\n        for (const component of this.components) {\r\n            component.updateHistory(nodeVoltages, branchCurrents);\r\n        }\r\n        \r\n        // 保存結果\r\n        this.result.addTimePoint(time, nodeVoltages, branchCurrents);\r\n    }\r\n\r\n    /**\r\n     * 完成分析\r\n     */\r\n    finalize() {\r\n        // 計算最終統計信息\r\n        const info = this.result.getAnalysisInfo();\r\n        console.log(`Analysis summary: ${info.totalTimePoints} points, avg step=${(info.averageTimeStep * 1e6).toFixed(2)}µs`);\r\n        \r\n        // 清理資源\r\n        this.mnaBuilder.reset();\r\n    }\r\n\r\n    /**\r\n     * 打印解的摘要 (調試用)\r\n     * @param {Map<string, number>} nodeVoltages 節點電壓\r\n     * @param {Map<string, number>} branchCurrents 支路電流\r\n     */\r\n    printSolutionSummary(nodeVoltages, branchCurrents) {\r\n        console.log('\\\\nSolution Summary:');\r\n        console.log('Node Voltages:');\r\n        for (const [node, voltage] of nodeVoltages) {\r\n            console.log(`  V(${node}) = ${voltage.toFixed(6)}V`);\r\n        }\r\n        \r\n        console.log('Branch Currents:');\r\n        for (const [branch, current] of branchCurrents) {\r\n            console.log(`  I(${branch}) = ${(current * 1000).toFixed(3)}mA`);\r\n        }\r\n        console.log('');\r\n    }\r\n\r\n    /**\r\n     * 設置調試模式\r\n     * @param {boolean} enabled 是否啟用調試\r\n     */\r\n    setDebug(enabled) {\r\n        this.debug = enabled;\r\n    }\r\n\r\n    /**\r\n     * 獲取當前分析狀態\r\n     * @returns {Object} 狀態信息\r\n     */\r\n    getStatus() {\r\n        return {\r\n            isRunning: this.result !== null,\r\n            currentTime: this.result ? this.result.timeVector[this.result.timeVector.length - 1] : 0,\r\n            progress: this.result ? this.result.timeVector.length / Math.ceil((this.stopTime - this.startTime) / this.timeStep) : 0,\r\n            timePoints: this.result ? this.result.timeVector.length : 0\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 執行單一時間步求解 (用於步進式控制)\r\n     * @param {number} currentTime 當前時間\r\n     * @param {number} maxIterations 最大迭代次數\r\n     * @returns {Object} 求解結果\r\n     */\r\n    solveTimeStep(currentTime, maxIterations = this.maxIterations) {\r\n        try {\r\n            // 建立當前時間步的 MNA 矩陣 (考慮歷史項)\r\n            const { matrix, rhs } = this.mnaBuilder.buildMNAMatrix(this.components, currentTime);\r\n            \r\n            // 求解線性系統\r\n            const solution = LUSolver.solve(matrix, rhs);\r\n            \r\n            // 提取結果\r\n            const nodeVoltages = this.mnaBuilder.extractNodeVoltages(solution);\r\n            const branchCurrents = this.mnaBuilder.extractVoltageSourceCurrents(solution);\r\n            \r\n            // 檢查收斂性 (簡化檢查)\r\n            const converged = true; // 在線性分析中總是收斂\r\n            \r\n            // 更新元件歷史狀態\r\n            for (const component of this.components) {\r\n                component.updateHistory(nodeVoltages, branchCurrents);\r\n            }\r\n            \r\n            return {\r\n                converged: converged,\r\n                nodeVoltages: nodeVoltages,\r\n                branchCurrents: branchCurrents,\r\n                time: currentTime\r\n            };\r\n            \r\n        } catch (error) {\r\n            throw new Error(`Time step solution failed at t=${currentTime}s: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 暫態分析工具函數\r\n */\r\nexport class TransientUtils {\r\n    /**\r\n     * 解析SPICE風格的暫態分析指令\r\n     * @param {string} command 指令字符串 (如 '.tran 1us 1ms')\r\n     * @returns {Object} 解析後的參數\r\n     */\r\n    static parseTranCommand(command) {\r\n        const cmd = command.trim().toLowerCase();\r\n        \r\n        // 匹配 .tran [step] [stop] [start] [max_step]\r\n        // 使用正規表示式字面量，並用單反斜線進行轉義\r\n        const match = cmd.match(/^\\.tran\\s+([0-9.]+[a-z]*)\\s+([0-9.]+[a-z]*)(?:\\s+([0-9.]+[a-z]*))?(?:\\s+([0-9.]+[a-z]*))?/);\r\n        \r\n        if (!match) {\r\n            throw new Error(`Invalid .tran command: ${command}`);\r\n        }\r\n        \r\n        const params = {\r\n            timeStep: this.parseTimeValue(match[1]),\r\n            stopTime: this.parseTimeValue(match[2]),\r\n            startTime: match[3] ? this.parseTimeValue(match[3]) : 0,\r\n            maxTimeStep: match[4] ? this.parseTimeValue(match[4]) : undefined\r\n        };\r\n        \r\n        return params;\r\n    }\r\n\r\n    /**\r\n     * 解析時間值 (支援工程記號)\r\n     * @param {string} timeStr 時間字符串 (如 '1us', '2.5ms')\r\n     * @returns {number} 時間值 (秒)\r\n     */\r\n    static parseTimeValue(timeStr) {\r\n        const str = timeStr.trim().toLowerCase();\r\n        \r\n        // 按照長度降序排列，確保最長的後綴先被匹配，避免 's' 匹配 'us' 的問題\r\n        const suffixes = {\r\n            'fs': 1e-15,\r\n            'ps': 1e-12,\r\n            'ns': 1e-9,\r\n            'us': 1e-6,\r\n            'µs': 1e-6,\r\n            'ms': 1e-3,\r\n            's': 1\r\n        };\r\n        \r\n        for (const [suffix, multiplier] of Object.entries(suffixes)) {\r\n            if (str.endsWith(suffix)) {\r\n                const numPart = parseFloat(str.slice(0, -suffix.length));\r\n                if (!isNaN(numPart)) {\r\n                    return numPart * multiplier;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // 如果沒有後綴，假設是秒\r\n        const numValue = parseFloat(str);\r\n        if (!isNaN(numValue)) {\r\n            return numValue;\r\n        }\r\n        \r\n        throw new Error(`Cannot parse time value: ${timeStr}`);\r\n    }\r\n\r\n    /**\r\n     * 格式化時間值為可讀字符串\r\n     * @param {number} time 時間值 (秒)\r\n     * @returns {string} 格式化的字符串\r\n     */\r\n    static formatTime(time) {\r\n        const abs = Math.abs(time);\r\n        \r\n        if (abs >= 1) {\r\n            return `${time.toFixed(3)}s`;\r\n        } else if (abs >= 1e-3) {\r\n            return `${(time * 1e3).toFixed(3)}ms`;\r\n        } else if (abs >= 1e-6) {\r\n            return `${(time * 1e6).toFixed(3)}µs`;\r\n        } else if (abs >= 1e-9) {\r\n            return `${(time * 1e9).toFixed(3)}ns`;\r\n        } else {\r\n            return `${(time * 1e12).toFixed(3)}ps`;\r\n        }\r\n    }\r\n}","/**\r\n * 直流分析 (DC Analysis) 實現\r\n * \r\n * 用於求解電路的直流工作點，是暫態分析的初始條件\r\n */\r\n\r\nimport { Matrix, Vector, LUSolver } from '../core/linalg.js';\r\nimport { MNABuilder } from '../core/mna.js';\r\n\r\n/**\r\n * DC分析結果類\r\n */\r\nexport class DCResult {\r\n    constructor() {\r\n        this.nodeVoltages = new Map();\r\n        this.branchCurrents = new Map();\r\n        this.componentPower = new Map();\r\n        this.totalPower = 0;\r\n        this.analysisInfo = {};\r\n        this.converged = false;\r\n    }\r\n\r\n    /**\r\n     * 獲取節點電壓\r\n     * @param {string} nodeName 節點名稱\r\n     * @returns {number} 電壓值\r\n     */\r\n    getNodeVoltage(nodeName) {\r\n        return this.nodeVoltages.get(nodeName) || 0;\r\n    }\r\n\r\n    /**\r\n     * 獲取支路電流\r\n     * @param {string} branchName 支路名稱\r\n     * @returns {number} 電流值\r\n     */\r\n    getBranchCurrent(branchName) {\r\n        return this.branchCurrents.get(branchName) || 0;\r\n    }\r\n\r\n    /**\r\n     * 計算元件功耗\r\n     * @param {BaseComponent[]} components 元件列表\r\n     */\r\n    calculatePower(components) {\r\n        this.totalPower = 0;\r\n        \r\n        for (const component of components) {\r\n            let power = 0;\r\n            \r\n            if (component.type === 'R') {\r\n                // 電阻功耗: P = V² / R\r\n                const voltage = component.getVoltage(this.nodeVoltages);\r\n                power = voltage * voltage / component.getResistance();\r\n                \r\n            } else if (component.type === 'V') {\r\n                // 電壓源功耗: P = V * I\r\n                const voltage = component.getValue();\r\n                const current = this.getBranchCurrent(component.name);\r\n                power = -voltage * current; // 負號表示電壓源提供功率\r\n                \r\n            } else if (component.type === 'I') {\r\n                // 電流源功耗: P = V * I\r\n                const voltage = component.getVoltage(this.nodeVoltages);\r\n                const current = component.getValue();\r\n                power = -voltage * current; // 負號表示電流源提供功率\r\n            }\r\n            \r\n            this.componentPower.set(component.name, power);\r\n            this.totalPower += Math.abs(power);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取分析摘要\r\n     * @returns {Object} 摘要信息\r\n     */\r\n    getSummary() {\r\n        const nodeCount = this.nodeVoltages.size;\r\n        const branchCount = this.branchCurrents.size;\r\n        \r\n        return {\r\n            ...this.analysisInfo,\r\n            converged: this.converged,\r\n            nodeCount,\r\n            branchCount,\r\n            totalPower: this.totalPower,\r\n            nodes: Array.from(this.nodeVoltages.keys()),\r\n            branches: Array.from(this.branchCurrents.keys())\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * DC分析引擎\r\n */\r\nexport class DCAnalysis {\r\n    constructor() {\r\n        this.mnaBuilder = new MNABuilder();\r\n        this.debug = false;\r\n    }\r\n\r\n    /**\r\n     * 執行DC分析\r\n     * @param {BaseComponent[]} components 電路元件列表\r\n     * @param {Object} options 分析選項\r\n     * @returns {DCResult} DC分析結果\r\n     */\r\n    async run(components, options = {}) {\r\n        this.debug = options.debug || false;\r\n        const result = new DCResult();\r\n        \r\n        try {\r\n            if (this.debug) {\r\n                console.log('Starting DC analysis...');\r\n            }\r\n            \r\n            // 分析電路拓撲\r\n            this.mnaBuilder.analyzeCircuit(components);\r\n            \r\n            // 非線性求解迭代\r\n            const maxIterations = 20;\r\n            const tolerance = 1e-9;\r\n            let iteration = 0;\r\n            let converged = false;\r\n            let solution;\r\n            \r\n            while (iteration < maxIterations && !converged) {\r\n                iteration++;\r\n                \r\n                // 建立MNA矩陣 (t=0，所有動態元件使用DC行為)\r\n                const { matrix, rhs } = this.mnaBuilder.buildMNAMatrix(components, 0);\r\n                \r\n                if (this.debug && iteration === 1) {\r\n                    console.log('MNA Matrix built');\r\n                    this.mnaBuilder.printMNAMatrix();\r\n                }\r\n                \r\n                // 求解線性方程組\r\n                const newSolution = LUSolver.solve(matrix, rhs);\r\n                \r\n                // 檢查收斂性\r\n                if (iteration > 1) {\r\n                    let maxChange = 0;\r\n                    for (let i = 0; i < newSolution.size; i++) {\r\n                        const change = Math.abs(newSolution.get(i) - solution.get(i));\r\n                        maxChange = Math.max(maxChange, change);\r\n                    }\r\n                    \r\n                    if (maxChange < tolerance) {\r\n                        converged = true;\r\n                        if (this.debug) {\r\n                            console.log(`DC analysis converged after ${iteration} iterations (max change: ${maxChange.toExponential(2)})`);\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                solution = newSolution;\r\n                \r\n                // 提取結果並更新組件狀態\r\n                const tempNodeVoltages = this.mnaBuilder.extractNodeVoltages(solution);\r\n                const tempBranchCurrents = this.mnaBuilder.extractVoltageSourceCurrents(solution);\r\n                \r\n                // 更新所有組件的電壓狀態\r\n                for (const component of components) {\r\n                    if (typeof component.updateHistory === 'function') {\r\n                        component.updateHistory(tempNodeVoltages, tempBranchCurrents);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (!converged) {\r\n                console.warn(`DC analysis did not converge after ${maxIterations} iterations`);\r\n            }\r\n            \r\n            // 設置最終結果\r\n            result.nodeVoltages = this.mnaBuilder.extractNodeVoltages(solution);\r\n            result.branchCurrents = this.mnaBuilder.extractVoltageSourceCurrents(solution);\r\n            result.converged = converged;\r\n            \r\n            // 計算功耗\r\n            result.calculatePower(components);\r\n            \r\n            // 設置分析信息\r\n            result.analysisInfo = {\r\n                method: 'Modified Nodal Analysis',\r\n                matrixSize: this.mnaBuilder.matrixSize,\r\n                nodeCount: this.mnaBuilder.nodeCount,\r\n                voltageSourceCount: this.mnaBuilder.voltageSourceCount,\r\n                iterations: iteration,\r\n                convergence: converged ? 'converged' : 'max iterations reached'\r\n            };\r\n            \r\n            if (this.debug) {\r\n                this.printResults(result);\r\n            }\r\n            \r\n            return result;\r\n            \r\n        } catch (error) {\r\n            console.error('DC analysis failed:', error);\r\n            result.converged = false;\r\n            result.analysisInfo.error = error.message;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 估算矩陣條件數\r\n     * @param {Matrix} matrix MNA矩陣\r\n     * @returns {number} 條件數估計值\r\n     */\r\n    estimateCondition(matrix) {\r\n        try {\r\n            return LUSolver.estimateConditionNumber(matrix);\r\n        } catch (error) {\r\n            return Infinity;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 打印DC分析結果\r\n     * @param {DCResult} result DC分析結果\r\n     */\r\n    printResults(result) {\r\n        console.log('\\\\n=== DC Analysis Results ===');\r\n        \r\n        console.log('\\\\nNode Voltages:');\r\n        for (const [node, voltage] of result.nodeVoltages) {\r\n            if (Math.abs(voltage) < 1e-12) {\r\n                console.log(`  V(${node}) = 0V`);\r\n            } else if (Math.abs(voltage) >= 1000) {\r\n                console.log(`  V(${node}) = ${(voltage / 1000).toFixed(3)}kV`);\r\n            } else if (Math.abs(voltage) >= 1) {\r\n                console.log(`  V(${node}) = ${voltage.toFixed(6)}V`);\r\n            } else if (Math.abs(voltage) >= 1e-3) {\r\n                console.log(`  V(${node}) = ${(voltage * 1000).toFixed(3)}mV`);\r\n            } else if (Math.abs(voltage) >= 1e-6) {\r\n                console.log(`  V(${node}) = ${(voltage * 1e6).toFixed(3)}µV`);\r\n            } else {\r\n                console.log(`  V(${node}) = ${voltage.toExponential(3)}V`);\r\n            }\r\n        }\r\n        \r\n        console.log('\\\\nBranch Currents:');\r\n        for (const [branch, current] of result.branchCurrents) {\r\n            if (Math.abs(current) < 1e-12) {\r\n                console.log(`  I(${branch}) = 0A`);\r\n            } else if (Math.abs(current) >= 1) {\r\n                console.log(`  I(${branch}) = ${current.toFixed(6)}A`);\r\n            } else if (Math.abs(current) >= 1e-3) {\r\n                console.log(`  I(${branch}) = ${(current * 1000).toFixed(3)}mA`);\r\n            } else if (Math.abs(current) >= 1e-6) {\r\n                console.log(`  I(${branch}) = ${(current * 1e6).toFixed(3)}µA`);\r\n            } else if (Math.abs(current) >= 1e-9) {\r\n                console.log(`  I(${branch}) = ${(current * 1e9).toFixed(3)}nA`);\r\n            } else {\r\n                console.log(`  I(${branch}) = ${current.toExponential(3)}A`);\r\n            }\r\n        }\r\n        \r\n        console.log('\\\\nComponent Power:');\r\n        let totalSupplied = 0;\r\n        let totalDissipated = 0;\r\n        \r\n        for (const [component, power] of result.componentPower) {\r\n            if (power < 0) {\r\n                totalSupplied += Math.abs(power);\r\n                console.log(`  P(${component}) = ${Math.abs(power).toFixed(6)}W (supplied)`);\r\n            } else if (power > 1e-12) {\r\n                totalDissipated += power;\r\n                console.log(`  P(${component}) = ${power.toFixed(6)}W (dissipated)`);\r\n            }\r\n        }\r\n        \r\n        console.log(`\\\\nPower Balance:`);\r\n        console.log(`  Total Supplied: ${totalSupplied.toFixed(6)}W`);\r\n        console.log(`  Total Dissipated: ${totalDissipated.toFixed(6)}W`);\r\n        console.log(`  Balance Error: ${Math.abs(totalSupplied - totalDissipated).toFixed(9)}W`);\r\n        \r\n        const info = result.getSummary();\r\n        console.log(`\\\\nMatrix Info: ${info.matrixSize}×${info.matrixSize}, iterations: ${info.iterations}`);\r\n        console.log('===========================\\\\n');\r\n    }\r\n\r\n    /**\r\n     * 設置調試模式\r\n     * @param {boolean} enabled 是否啟用調試\r\n     */\r\n    setDebug(enabled) {\r\n        this.debug = enabled;\r\n    }\r\n}","/**\r\n * AkingSPICE 主求解器類別\r\n * \r\n * 這是使用者的主要介面，整合了網表解析、電路分析和結果管理\r\n */\r\n\r\nimport { NetlistParser } from '../parser/netlist.js';\r\nimport { TransientAnalysis, TransientUtils, TransientResult } from '../analysis/transient.js';\r\nimport { DCAnalysis } from '../analysis/dc.js';\r\n\r\n/**\r\n * AkingSPICE 主求解器\r\n */\r\nexport class AkingSPICE {\r\n    constructor(netlist = null) {\r\n        this.parser = new NetlistParser();\r\n        this.transientAnalysis = new TransientAnalysis();\r\n        this.dcAnalysis = new DCAnalysis();\r\n        \r\n        // 電路數據\r\n        this._components = []; // 使用內部變數儲存\r\n        this.models = new Map();\r\n        this.parameters = new Map();\r\n        this.analyses = [];\r\n        this.options = new Map();\r\n        \r\n        // 分析結果\r\n        this.results = new Map();\r\n        this.lastResult = null;\r\n        \r\n        // 狀態信息\r\n        this.isInitialized = false;\r\n        this.debug = false;\r\n        \r\n        // 如果提供了網表，立即解析\r\n        if (netlist) {\r\n            this.loadNetlist(netlist);\r\n        }\r\n    }\r\n\r\n    // 🔥 新增：Component Setter，自動處理元元件\r\n    set components(componentArray) {\r\n        this._components = []; // 清空現有組件\r\n        this.addComponents(componentArray);\r\n    }\r\n\r\n    // 🔥 新增：Component Getter\r\n    get components() {\r\n        return this._components || [];\r\n    }\r\n    \r\n    // 🔥 新增：addComponent 方法，用於單個元件\r\n    addComponent(component) {\r\n        if (!this._components) {\r\n            this._components = [];\r\n        }\r\n        if (component.type === 'T_META' && typeof component.getComponents === 'function') {\r\n            // 如果是元元件，添加其子元件\r\n            this._components.push(...component.getComponents());\r\n        } else {\r\n            this._components.push(component);\r\n        }\r\n    }\r\n\r\n    // 🔥 新增：addComponents 方法，用於陣列\r\n    addComponents(componentArray) {\r\n        for (const comp of componentArray) {\r\n            this.addComponent(comp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 載入並解析網表\r\n     * @param {string} netlistText 網表文本\r\n     * @returns {Object} 解析結果統計\r\n     */\r\n    loadNetlist(netlistText) {\r\n        console.log('Loading netlist...');\r\n        \r\n        try {\r\n            const parseResult = this.parser.parse(netlistText);\r\n            \r\n            this.components = parseResult.components;\r\n            this.models = parseResult.models;\r\n            this.parameters = parseResult.parameters;\r\n            this.analyses = parseResult.analyses;\r\n            this.options = parseResult.options;\r\n            \r\n            this.isInitialized = true;\r\n            \r\n            if (this.debug) {\r\n                this.parser.printReport();\r\n            }\r\n            \r\n            console.log(`Netlist loaded: ${this.components.length} components`);\r\n            return parseResult.stats;\r\n            \r\n        } catch (error) {\r\n            console.error('Failed to load netlist:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 執行分析 (批次模式 API)\r\n     * @param {string} analysisCommand 分析指令 (如 '.tran 1us 1ms')\r\n     * @returns {Object} 分析結果\r\n     */\r\n    async runAnalysis(analysisCommand = null) {\r\n        if (!this.isInitialized) {\r\n            throw new Error('No netlist loaded. Call loadNetlist() first.');\r\n        }\r\n\r\n        // 如果提供了分析指令，解析它\r\n        if (analysisCommand) {\r\n            const cmd = analysisCommand.trim().toLowerCase();\r\n            \r\n            if (cmd.startsWith('.tran')) {\r\n                return await this.runTransientAnalysis(analysisCommand);\r\n            } else if (cmd.startsWith('.dc') || cmd.startsWith('.op')) {\r\n                return await this.runDCAnalysis();\r\n            } else {\r\n                throw new Error(`Unsupported analysis command: ${analysisCommand}`);\r\n            }\r\n        }\r\n\r\n        // 如果沒有提供指令，查看網表中是否有分析指令\r\n        if (this.analyses.length > 0) {\r\n            const analysis = this.analyses[0]; // 使用第一個分析指令\r\n            \r\n            if (analysis.type === 'TRAN') {\r\n                const tranCommand = `.tran ${analysis.tstep} ${analysis.tstop} ${analysis.tstart || '0'} ${analysis.tmax || analysis.tstep}`;\r\n                return await this.runTransientAnalysis(tranCommand);\r\n            } else if (analysis.type === 'DC') {\r\n                return await this.runDCAnalysis();\r\n            }\r\n        }\r\n\r\n        // 預設執行DC分析\r\n        console.log('No analysis specified, running DC analysis');\r\n        return await this.runDCAnalysis();\r\n    }\r\n\r\n    /**\r\n     * 執行暫態分析\r\n     * @param {string} tranCommand 暫態分析指令\r\n     * @returns {Object} 暫態分析結果\r\n     */\r\n    async runTransientAnalysis(tranCommand) {\r\n        console.log(`Running transient analysis: ${tranCommand}`);\r\n        \r\n        try {\r\n            // 解析暫態分析參數\r\n            const params = TransientUtils.parseTranCommand(tranCommand);\r\n            params.debug = this.debug;\r\n            \r\n            // 執行分析\r\n            const result = await this.transientAnalysis.run(this.components, params);\r\n            \r\n            // 保存結果\r\n            this.results.set('tran', result);\r\n            this.lastResult = result;\r\n            \r\n            console.log(`Transient analysis completed: ${result.timeVector.length} time points`);\r\n            return result;\r\n            \r\n        } catch (error) {\r\n            console.error('Transient analysis failed:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 執行DC分析\r\n     * @returns {Object} DC分析結果\r\n     */\r\n    async runDCAnalysis() {\r\n        console.log('Running DC analysis...');\r\n        \r\n        try {\r\n            const options = { debug: this.debug };\r\n            const result = await this.dcAnalysis.run(this.components, options);\r\n            \r\n            // 保存結果\r\n            this.results.set('dc', result);\r\n            this.lastResult = result;\r\n            \r\n            console.log('DC analysis completed');\r\n            return result;\r\n            \r\n        } catch (error) {\r\n            console.error('DC analysis failed:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取分析結果\r\n     * @param {string} analysisType 分析類型 ('tran', 'dc')\r\n     * @returns {Object} 分析結果\r\n     */\r\n    getResult(analysisType = null) {\r\n        if (analysisType) {\r\n            return this.results.get(analysisType);\r\n        }\r\n        return this.lastResult;\r\n    }\r\n\r\n    /**\r\n     * 獲取電路信息\r\n     * @returns {Object} 電路信息\r\n     */\r\n    getCircuitInfo() {\r\n        return {\r\n            componentCount: this.components.length,\r\n            components: this.components.map(comp => ({\r\n                name: comp.name,\r\n                type: comp.type,\r\n                nodes: comp.nodes,\r\n                value: comp.value\r\n            })),\r\n            nodeList: this.getNodeList(),\r\n            modelCount: this.models.size,\r\n            parameterCount: this.parameters.size,\r\n            analysisCount: this.analyses.length,\r\n            isInitialized: this.isInitialized\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 獲取所有節點列表\r\n     * @returns {string[]} 節點名稱列表\r\n     */\r\n    getNodeList() {\r\n        const nodeSet = new Set();\r\n        \r\n        for (const component of this.components) {\r\n            if (component.nodes) {\r\n                for (const node of component.nodes) {\r\n                    nodeSet.add(node);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return Array.from(nodeSet).sort();\r\n    }\r\n\r\n    /**\r\n     * 設置調試模式\r\n     * @param {boolean} enabled 是否啟用調試\r\n     */\r\n    setDebug(enabled) {\r\n        this.debug = enabled;\r\n        this.transientAnalysis.setDebug(enabled);\r\n        this.dcAnalysis.setDebug(enabled);\r\n    }\r\n\r\n    /**\r\n     * 驗證電路\r\n     * @returns {Object} 驗證結果\r\n     */\r\n    validateCircuit() {\r\n        const issues = [];\r\n        const warnings = [];\r\n        \r\n        // 檢查基本問題\r\n        if (this.components.length === 0) {\r\n            issues.push('No components found in circuit');\r\n            return { valid: false, issues, warnings };\r\n        }\r\n        \r\n        // 檢查每個元件\r\n        for (const component of this.components) {\r\n            if (!component.isValid()) {\r\n                issues.push(`Invalid component: ${component.name}`);\r\n            }\r\n            \r\n            // 檢查節點連接\r\n            for (const node of component.nodes) {\r\n                if (!node || typeof node !== 'string') {\r\n                    issues.push(`Invalid node in component ${component.name}: ${node}`);\r\n                }\r\n            }\r\n            \r\n            // 檢查元件值\r\n            if (component.value === 0 && (component.type === 'R' || component.type === 'L' || component.type === 'C')) {\r\n                warnings.push(`Zero value in ${component.name} may cause numerical issues`);\r\n            }\r\n        }\r\n        \r\n        // 檢查接地節點\r\n        const nodes = this.getNodeList();\r\n        const hasGround = nodes.includes('0') || nodes.includes('gnd') || nodes.includes('GND');\r\n        if (!hasGround) {\r\n            warnings.push('No ground node (0 or gnd) found - circuit may be floating');\r\n        }\r\n        \r\n        // 檢查獨立節點\r\n        const nodeConnections = new Map();\r\n        for (const component of this.components) {\r\n            for (const node of component.nodes) {\r\n                nodeConnections.set(node, (nodeConnections.get(node) || 0) + 1);\r\n            }\r\n        }\r\n        \r\n        for (const [node, connectionCount] of nodeConnections) {\r\n            if (connectionCount === 1 && node !== '0' && node !== 'gnd') {\r\n                warnings.push(`Node ${node} has only one connection`);\r\n            }\r\n        }\r\n        \r\n        return {\r\n            valid: issues.length === 0,\r\n            issues,\r\n            warnings,\r\n            componentCount: this.components.length,\r\n            nodeCount: nodes.length\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 打印電路摘要\r\n     */\r\n    printCircuitSummary() {\r\n        console.log('\\\\n=== Circuit Summary ===');\r\n        \r\n        const info = this.getCircuitInfo();\r\n        console.log(`Components: ${info.componentCount}`);\r\n        console.log(`Nodes: ${info.nodeList.length}`);\r\n        console.log(`Models: ${info.modelCount}`);\r\n        console.log(`Parameters: ${info.parameterCount}`);\r\n        \r\n        // 按類型統計元件\r\n        const componentTypes = {};\r\n        for (const comp of this.components) {\r\n            componentTypes[comp.type] = (componentTypes[comp.type] || 0) + 1;\r\n        }\r\n        \r\n        console.log('\\\\nComponent breakdown:');\r\n        for (const [type, count] of Object.entries(componentTypes)) {\r\n            console.log(`  ${type}: ${count}`);\r\n        }\r\n        \r\n        console.log('\\\\nNodes:', info.nodeList.join(', '));\r\n        \r\n        // 驗證電路\r\n        const validation = this.validateCircuit();\r\n        console.log(`\\\\nValidation: ${validation.valid ? 'PASSED' : 'FAILED'}`);\r\n        \r\n        if (validation.issues.length > 0) {\r\n            console.log('Issues:');\r\n            validation.issues.forEach(issue => console.log(`  - ${issue}`));\r\n        }\r\n        \r\n        if (validation.warnings.length > 0) {\r\n            console.log('Warnings:');\r\n            validation.warnings.forEach(warning => console.log(`  - ${warning}`));\r\n        }\r\n        \r\n        console.log('=======================\\\\n');\r\n    }\r\n\r\n    /**\r\n     * 重置求解器\r\n     */\r\n    reset() {\r\n        this.components = [];\r\n        this.models.clear();\r\n        this.parameters.clear();\r\n        this.analyses = [];\r\n        this.options.clear();\r\n        this.results.clear();\r\n        this.lastResult = null;\r\n        this.isInitialized = false;\r\n        this.parser.reset();\r\n    }\r\n\r\n    // ==================== 步進式模擬控制 API ====================\r\n    \r\n    /**\r\n     * 初始化步進式暫態分析\r\n     * @param {Object} params 參數 {startTime, stopTime, timeStep, maxIterations}\r\n     * @returns {boolean} 初始化是否成功\r\n     */\r\n    async initSteppedTransient(params = {}) {\r\n        try {\r\n            if (!this.isInitialized) {\r\n                throw new Error('Circuit not initialized. Load a netlist first.');\r\n            }\r\n\r\n            // 設置默認參數\r\n            this.steppedParams = {\r\n                startTime: params.startTime || 0,\r\n                stopTime: params.stopTime || 1e-3,  // 1ms\r\n                timeStep: params.timeStep || 1e-6,   // 1μs\r\n                maxIterations: params.maxIterations || 10\r\n            };\r\n\r\n            // 先設置參數再初始化\r\n            this.transientAnalysis.setParameters({\r\n                timeStep: this.steppedParams.timeStep,\r\n                startTime: this.steppedParams.startTime,\r\n                stopTime: this.steppedParams.stopTime,\r\n                maxIterations: this.steppedParams.maxIterations\r\n            });\r\n            \r\n            // 創建 result 對象\r\n            this.transientAnalysis.result = new TransientResult();\r\n            \r\n            // 初始化暫態分析\r\n            await this.transientAnalysis.initialize(this.components, this.steppedParams.timeStep);\r\n            \r\n            // 重置狀態\r\n            this.currentTime = this.steppedParams.startTime;\r\n            this.currentIteration = 0;\r\n            this.isSteppedMode = true;\r\n            this.steppedResults = {\r\n                time: [],\r\n                voltages: [],\r\n                currents: [],\r\n                componentStates: []\r\n            };\r\n\r\n            console.log(`步進式暫態分析初始化完成:`);\r\n            console.log(`  時間範圍: ${this.steppedParams.startTime}s 到 ${this.steppedParams.stopTime}s`);\r\n            console.log(`  時間步長: ${this.steppedParams.timeStep}s`);\r\n            console.log(`  最大迭代數: ${this.steppedParams.maxIterations}`);\r\n\r\n            return true;\r\n\r\n        } catch (error) {\r\n            console.error(`步進式暫態分析初始化失敗: ${error.message}`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 執行一個時間步\r\n     * @param {Object} controlInputs 控制輸入 {gateName: state, ...}\r\n     * @returns {Object} 當前時間步的結果\r\n     */\r\n    step(controlInputs = {}) {\r\n        if (!this.isSteppedMode) {\r\n            throw new Error('Step mode not initialized. Call initSteppedTransient() first.');\r\n        }\r\n\r\n        if (this.isFinished()) {\r\n            console.warn('Simulation already finished');\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            // 更新控制輸入 (如 MOSFET 開關狀態)\r\n            this.updateControlInputs(controlInputs);\r\n            \r\n            // 執行一個時間步\r\n            const stepResult = this.transientAnalysis.solveTimeStep(\r\n                this.currentTime, \r\n                this.steppedParams.maxIterations\r\n            );\r\n\r\n            // 記錄結果 - 將 Map 轉換為普通物件\r\n            const nodeVoltagesObj = Object.fromEntries(stepResult.nodeVoltages);\r\n            const branchCurrentsObj = Object.fromEntries(stepResult.branchCurrents);\r\n            \r\n            this.steppedResults.time.push(this.currentTime);\r\n            this.steppedResults.voltages.push({...nodeVoltagesObj});\r\n            this.steppedResults.currents.push({...branchCurrentsObj});\r\n            \r\n            // 記錄元件狀態 (特別是 MOSFET 等可控元件)\r\n            const componentStates = {};\r\n            for (const component of this.components) {\r\n                if (component.getOperatingStatus) {\r\n                    componentStates[component.name] = component.getOperatingStatus();\r\n                }\r\n            }\r\n            this.steppedResults.componentStates.push(componentStates);\r\n\r\n            // 準備下一步\r\n            this.currentTime += this.steppedParams.timeStep;\r\n            this.currentIteration++;\r\n\r\n            // 返回當前步驟的結果 - 將 Map 轉換為普通物件\r\n            return {\r\n                time: this.currentTime - this.steppedParams.timeStep,\r\n                iteration: this.currentIteration - 1,\r\n                nodeVoltages: Object.fromEntries(stepResult.nodeVoltages),\r\n                branchCurrents: Object.fromEntries(stepResult.branchCurrents),\r\n                componentStates: componentStates,\r\n                converged: stepResult.converged\r\n            };\r\n\r\n        } catch (error) {\r\n            console.error(`Time step ${this.currentIteration} failed: ${error.message}`);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 檢查模擬是否完成\r\n     * @returns {boolean} 是否完成\r\n     */\r\n    isFinished() {\r\n        return this.isSteppedMode && (this.currentTime >= this.steppedParams.stopTime);\r\n    }\r\n\r\n    /**\r\n     * 獲取當前模擬時間\r\n     * @returns {number} 當前時間 (秒)\r\n     */\r\n    getCurrentTime() {\r\n        return this.currentTime || 0;\r\n    }\r\n\r\n    /**\r\n     * 更新控制輸入 (如 MOSFET 閘極狀態)\r\n     * @param {Object} controlInputs 控制輸入映射 {componentName: state, ...}\r\n     */\r\n    updateControlInputs(controlInputs) {\r\n        for (const [componentName, state] of Object.entries(controlInputs)) {\r\n            const component = this.components.find(c => c.name === componentName);\r\n            if (component && component.setGateState) {\r\n                component.setGateState(state);\r\n                if (this.debug) {\r\n                    console.log(`Updated ${componentName} gate state: ${state ? 'ON' : 'OFF'}`);\r\n                }\r\n            } else if (component && component.setValue) {\r\n                // 支援其他類型的控制輸入\r\n                component.setValue(state);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 設置特定元件的閘極狀態 (便捷方法)\r\n     * @param {string} componentName 元件名稱\r\n     * @param {boolean} state 閘極狀態\r\n     */\r\n    setGateState(componentName, state) {\r\n        this.updateControlInputs({[componentName]: state});\r\n    }\r\n\r\n    /**\r\n     * 獲取節點電壓\r\n     * @param {string} nodeName 節點名稱\r\n     * @returns {number} 電壓值 (V)\r\n     */\r\n    getVoltage(nodeName) {\r\n        if (!this.isSteppedMode || this.steppedResults.voltages.length === 0) {\r\n            return 0;\r\n        }\r\n        \r\n        const lastVoltages = this.steppedResults.voltages[this.steppedResults.voltages.length - 1];\r\n        return lastVoltages[nodeName] || 0;\r\n    }\r\n\r\n    /**\r\n     * 獲取支路電流 (通過元件)\r\n     * @param {string} componentName 元件名稱  \r\n     * @returns {number} 電流值 (A)\r\n     */\r\n    getCurrent(componentName) {\r\n        if (!this.isSteppedMode || this.steppedResults.currents.length === 0) {\r\n            return 0;\r\n        }\r\n        \r\n        const lastCurrents = this.steppedResults.currents[this.steppedResults.currents.length - 1];\r\n        return lastCurrents[componentName] || 0;\r\n    }\r\n\r\n    /**\r\n     * 獲取元件工作狀態\r\n     * @param {string} componentName 元件名稱\r\n     * @returns {Object} 元件狀態\r\n     */\r\n    getComponentState(componentName) {\r\n        if (!this.isSteppedMode || this.steppedResults.componentStates.length === 0) {\r\n            return null;\r\n        }\r\n        \r\n        const lastStates = this.steppedResults.componentStates[this.steppedResults.componentStates.length - 1];\r\n        return lastStates[componentName] || null;\r\n    }\r\n\r\n    /**\r\n     * 獲取完整的步進式模擬結果\r\n     * @returns {Object} 完整結果\r\n     */\r\n    getSteppedResults() {\r\n        return this.isSteppedMode ? this.steppedResults : null;\r\n    }\r\n\r\n    /**\r\n     * 運行完整的步進式模擬 (帶控制函數)\r\n     * @param {Function} controlFunction 控制函數 (time) => {componentName: state, ...}\r\n     * @param {Object} params 模擬參數\r\n     * @returns {Object} 完整模擬結果\r\n     */\r\n    async runSteppedSimulation(controlFunction, params = {}) {\r\n        console.log('開始步進式模擬...');\r\n        \r\n        if (!(await this.initSteppedTransient(params))) {\r\n            throw new Error('Failed to initialize stepped simulation');\r\n        }\r\n\r\n        const results = [];\r\n        let stepCount = 0;\r\n\r\n        while (!this.isFinished()) {\r\n            // 獲取當前時間的控制輸入\r\n            const controlInputs = controlFunction ? controlFunction(this.currentTime) : {};\r\n            \r\n            // 執行一步\r\n            const stepResult = this.step(controlInputs);\r\n            if (stepResult) {\r\n                results.push(stepResult);\r\n                stepCount++;\r\n\r\n                // 進度報告\r\n                if (stepCount % 1000 === 0) {\r\n                    const progress = ((this.currentTime - this.steppedParams.startTime) / \r\n                                    (this.steppedParams.stopTime - this.steppedParams.startTime)) * 100;\r\n                    console.log(`模擬進度: ${progress.toFixed(1)}% (${stepCount} steps)`);\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(`步進式模擬完成: ${stepCount} 個時間步`);\r\n        return {\r\n            steps: results,\r\n            summary: {\r\n                totalSteps: stepCount,\r\n                simulationTime: this.steppedParams.stopTime - this.steppedParams.startTime,\r\n                timeStep: this.steppedParams.timeStep\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 重置步進式模擬狀態\r\n     */\r\n    resetSteppedMode() {\r\n        this.isSteppedMode = false;\r\n        this.currentTime = 0;\r\n        this.currentIteration = 0;\r\n        this.steppedParams = null;\r\n        this.steppedResults = null;\r\n    }\r\n\r\n    /**\r\n     * 獲取求解器版本信息\r\n     * @returns {Object} 版本信息\r\n     */\r\n    static getVersionInfo() {\r\n        return {\r\n            name: 'AkingSPICE',\r\n            version: '0.1.0',\r\n            description: 'JavaScript Solver for Power Electronics',\r\n            features: [\r\n                'Modified Nodal Analysis (MNA)',\r\n                'LU decomposition solver',\r\n                'Backward Euler transient analysis',\r\n                'DC operating point analysis',\r\n                'SPICE-compatible netlist format',\r\n                'Basic passive components (R, L, C)',\r\n                'Independent sources (V, I)',\r\n                'Controlled sources (VCVS, VCCS)',\r\n                'MOSFET with body diode model',\r\n                'Stepped simulation control API'\r\n            ],\r\n            author: 'AkingSPICE Development Team',\r\n            license: 'MIT'\r\n        };\r\n    }\r\n}","/**\r\n * 三相電壓源模型 - 專為 VIENNA PFC、T-type PFC 等三相拓撲設計\r\n * \r\n * 特點：\r\n * - 自動生成 120° 相位差的三相電壓\r\n * - 支援星形 (Wye) 和三角形 (Delta) 連接\r\n * - 可配置相序（ABC 或 ACB）\r\n * - 支援不平衡和諧波分析\r\n */\r\n\r\nimport { VoltageSource } from './sources.js';\r\nimport { BaseComponent } from './base.js';\r\n\r\n/**\r\n * 三相電壓源\r\n * \r\n * 這個模型實現了：\r\n * 1. 三個相位差 120° 的正弦電壓源\r\n * 2. 星形連接（含中性點）或三角形連接\r\n * 3. 相序控制（正序 ABC 或反序 ACB）\r\n * 4. 頻率、幅值、相位偏移控制\r\n */\r\nexport class ThreePhaseSource extends BaseComponent {\r\n    /**\r\n     * @param {string} name 三相源名稱 (如 'V3PH1', 'GRID1')\r\n     * @param {Object} config 三相源配置\r\n     * @param {string[]} config.nodes 節點連接\r\n     * @param {number} config.voltage 線電壓RMS值 (V)\r\n     * @param {number} config.frequency 頻率 (Hz)\r\n     * @param {Object} params 額外參數\r\n     * \r\n     * 節點配置：\r\n     * - 星形連接：['A', 'B', 'C', 'N'] (A相, B相, C相, 中性點)\r\n     * - 三角形連接：['AB', 'BC', 'CA'] (線電壓節點)\r\n     */\r\n    constructor(name, config, params = {}) {\r\n        super(name, 'V3PH', config.nodes, config.voltage, params);\r\n        \r\n        if (!config || !config.nodes) {\r\n            throw new Error(`ThreePhaseSource ${name}: nodes configuration required`);\r\n        }\r\n        \r\n        // 基本參數\r\n        this.voltage = config.voltage || 220;        // 線電壓 RMS (V)\r\n        this.frequency = config.frequency || 50;     // 頻率 (Hz)\r\n        this.phaseOffset = config.phaseOffset || 0;  // 相位偏移 (度)\r\n        this.phaseSequence = config.phaseSequence || 'ABC'; // 相序\r\n        \r\n        // 連接方式\r\n        this.connection = config.connection || 'wye'; // 'wye' 或 'delta'\r\n        this.nodes = config.nodes;\r\n        \r\n        // 驗證節點配置\r\n        this.validateNodeConfiguration();\r\n        \r\n        // 計算相電壓（星形連接時）\r\n        this.phaseVoltage = this.connection === 'wye' ? \r\n            this.voltage / Math.sqrt(3) : this.voltage;\r\n        \r\n        // 創建內部電壓源\r\n        this.createInternalSources();\r\n        \r\n        // 計算相位角\r\n        this.calculatePhaseAngles();\r\n    }\r\n\r\n    /**\r\n     * 驗證節點配置\r\n     */\r\n    validateNodeConfiguration() {\r\n        if (this.connection === 'wye') {\r\n            if (this.nodes.length !== 4) {\r\n                throw new Error(`ThreePhaseSource ${this.name}: Wye connection requires 4 nodes [A, B, C, N]`);\r\n            }\r\n        } else if (this.connection === 'delta') {\r\n            if (this.nodes.length !== 3) {\r\n                throw new Error(`ThreePhaseSource ${this.name}: Delta connection requires 3 nodes [AB, BC, CA]`);\r\n            }\r\n        } else {\r\n            throw new Error(`ThreePhaseSource ${this.name}: Invalid connection type '${this.connection}'. Use 'wye' or 'delta'`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 計算相位角\r\n     */\r\n    calculatePhaseAngles() {\r\n        const basePhase = this.phaseOffset * Math.PI / 180; // 轉換為弧度\r\n        \r\n        if (this.phaseSequence === 'ABC') {\r\n            // 正序\r\n            this.phaseAngles = {\r\n                A: basePhase,\r\n                B: basePhase - 2 * Math.PI / 3,     // -120°\r\n                C: basePhase - 4 * Math.PI / 3      // -240° = +120°\r\n            };\r\n        } else if (this.phaseSequence === 'ACB') {\r\n            // 反序\r\n            this.phaseAngles = {\r\n                A: basePhase,\r\n                B: basePhase + 2 * Math.PI / 3,     // +120°\r\n                C: basePhase + 4 * Math.PI / 3      // +240° = -120°\r\n            };\r\n        } else {\r\n            throw new Error(`ThreePhaseSource ${this.name}: Invalid phase sequence '${this.phaseSequence}'. Use 'ABC' or 'ACB'`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 創建內部電壓源\r\n     */\r\n    createInternalSources() {\r\n        this.internalSources = [];\r\n        \r\n        if (this.connection === 'wye') {\r\n            // 星形連接：創建三個相電壓源\r\n            const neutralNode = this.nodes[3]; // 中性點\r\n            \r\n            const phases = ['A', 'B', 'C'];\r\n            phases.forEach((phase, index) => {\r\n                const phaseNode = this.nodes[index];\r\n                const sourceName = `${this.name}_${phase}`;\r\n                \r\n                // 創建正弦電壓源\r\n                const source = new VoltageSource(sourceName, [phaseNode, neutralNode], {\r\n                    type: 'SINE',\r\n                    amplitude: this.phaseVoltage * Math.sqrt(2), // 峰值\r\n                    frequency: this.frequency,\r\n                    phase: this.phaseAngles[phase] * 180 / Math.PI, // 轉回度數\r\n                    offset: 0\r\n                });\r\n                \r\n                this.internalSources.push(source);\r\n            });\r\n            \r\n        } else if (this.connection === 'delta') {\r\n            // 三角形連接：創建三個線電壓源\r\n            const lineVoltages = [\r\n                { name: 'AB', nodes: [this.nodes[0], this.nodes[1]], phase: 'A' },\r\n                { name: 'BC', nodes: [this.nodes[1], this.nodes[2]], phase: 'B' },  \r\n                { name: 'CA', nodes: [this.nodes[2], this.nodes[0]], phase: 'C' }\r\n            ];\r\n            \r\n            lineVoltages.forEach(line => {\r\n                const sourceName = `${this.name}_${line.name}`;\r\n                \r\n                const source = new VoltageSource(sourceName, line.nodes, {\r\n                    type: 'SINE',\r\n                    amplitude: this.voltage * Math.sqrt(2), // 線電壓峰值\r\n                    frequency: this.frequency,\r\n                    phase: this.phaseAngles[line.phase] * 180 / Math.PI,\r\n                    offset: 0\r\n                });\r\n                \r\n                this.internalSources.push(source);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取特定相的瞬時電壓\r\n     * @param {string} phase 相別 ('A', 'B', 'C')\r\n     * @param {number} time 時間 (秒)\r\n     * @returns {number} 瞬時電壓 (V)\r\n     */\r\n    getPhaseVoltage(phase, time) {\r\n        if (!this.phaseAngles[phase]) {\r\n            throw new Error(`Invalid phase: ${phase}`);\r\n        }\r\n        \r\n        const omega = 2 * Math.PI * this.frequency;\r\n        const amplitude = this.connection === 'wye' ? \r\n            this.phaseVoltage * Math.sqrt(2) : \r\n            this.voltage * Math.sqrt(2);\r\n            \r\n        return amplitude * Math.sin(omega * time + this.phaseAngles[phase]);\r\n    }\r\n\r\n    /**\r\n     * 獲取線電壓\r\n     * @param {string} line 線別 ('AB', 'BC', 'CA')\r\n     * @param {number} time 時間 (秒)\r\n     * @returns {number} 線電壓 (V)\r\n     */\r\n    getLineVoltage(line, time) {\r\n        if (this.connection === 'delta') {\r\n            // 三角形連接：直接是線電壓\r\n            const phaseMap = { 'AB': 'A', 'BC': 'B', 'CA': 'C' };\r\n            return this.getPhaseVoltage(phaseMap[line], time);\r\n        } else {\r\n            // 星形連接：線電壓 = 相電壓差\r\n            switch (line) {\r\n                case 'AB':\r\n                    return this.getPhaseVoltage('A', time) - this.getPhaseVoltage('B', time);\r\n                case 'BC':\r\n                    return this.getPhaseVoltage('B', time) - this.getPhaseVoltage('C', time);\r\n                case 'CA':\r\n                    return this.getPhaseVoltage('C', time) - this.getPhaseVoltage('A', time);\r\n                default:\r\n                    throw new Error(`Invalid line: ${line}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 為 MNA 分析提供印花支援\r\n     * 三相源通過內部電壓源來實現印花\r\n     */\r\n    stamp(matrix, rhs, nodeMap, voltageSourceMap, time) {\r\n        // 委託給內部電壓源進行印花\r\n        this.internalSources.forEach(source => {\r\n            if (source.stamp) {\r\n                source.stamp(matrix, rhs, nodeMap, voltageSourceMap, time);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 檢查是否需要電流變數\r\n     * @returns {boolean}\r\n     */\r\n    needsCurrentVariable() {\r\n        return true; // 三相源包含電壓源，需要電流變數\r\n    }\r\n\r\n    /**\r\n     * 獲取所需的電流變數數量\r\n     * @returns {number}\r\n     */\r\n    getCurrentVariableCount() {\r\n        return this.internalSources.length; // 每個內部電壓源需要一個電流變數\r\n    }\r\n\r\n    /**\r\n     * 獲取三相源資訊\r\n     * @returns {Object}\r\n     */\r\n    getThreePhaseInfo() {\r\n        return {\r\n            name: this.name,\r\n            connection: this.connection,\r\n            voltage: this.voltage,\r\n            phaseVoltage: this.phaseVoltage,\r\n            frequency: this.frequency,\r\n            phaseSequence: this.phaseSequence,\r\n            phaseOffset: this.phaseOffset,\r\n            nodes: this.nodes,\r\n            phaseAngles: Object.fromEntries(\r\n                Object.entries(this.phaseAngles).map(([k, v]) => [k, v * 180 / Math.PI])\r\n            ),\r\n            internalSources: this.internalSources.map(s => s.name)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 獲取元件資訊字串\r\n     * @returns {string}\r\n     */\r\n    toString() {\r\n        const connectionStr = this.connection.toUpperCase();\r\n        const nodesStr = this.nodes.join('-');\r\n        \r\n        return `${this.name} (3Phase ${connectionStr}): ${nodesStr}, ${this.voltage}V, ${this.frequency}Hz, ${this.phaseSequence}`;\r\n    }\r\n\r\n    /**\r\n     * 序列化為 JSON\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            connection: this.connection,\r\n            voltage: this.voltage,\r\n            frequency: this.frequency,\r\n            phaseSequence: this.phaseSequence,\r\n            phaseOffset: this.phaseOffset,\r\n            threePhaseInfo: this.getThreePhaseInfo()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 復製三相源\r\n     * @returns {ThreePhaseSource}\r\n     */\r\n    clone() {\r\n        return new ThreePhaseSource(this.name, {\r\n            nodes: [...this.nodes],\r\n            connection: this.connection,\r\n            voltage: this.voltage,\r\n            frequency: this.frequency,\r\n            phaseSequence: this.phaseSequence,\r\n            phaseOffset: this.phaseOffset\r\n        }, { ...this.params });\r\n    }\r\n}","/**\r\n * 電壓控制 MOSFET 模型 - 基於閘極電壓自動決定導通狀態\r\n * \r\n * 特點：\r\n * - 基於 Vgs 閾值電壓自動切換導通狀態\r\n * - 支援線性區和飽和區模型\r\n * - 包含體二極體和寄生電容\r\n * - 適用於閘極驅動電路分析\r\n */\r\n\r\nimport { BaseComponent } from './base.js';\r\n\r\n/**\r\n * 電壓控制 MOSFET\r\n * \r\n * 這個模型實現了：\r\n * 1. 根據 Vgs 自動決定 ON/OFF 狀態\r\n * 2. 閾值電壓 (Vth) 和跨導 (gm) 特性\r\n * 3. 線性區和飽和區行為\r\n * 4. 寄生效應（體二極體、電容）\r\n */\r\nexport class VoltageControlledMOSFET extends BaseComponent {\r\n    /**\r\n     * @param {string} name MOSFET名稱 (如 'M1', 'Q1')\r\n     * @param {string[]} nodes 連接節點 [drain, gate, source] 或 [drain, gate, source, bulk]\r\n     * @param {Object} params MOSFET參數\r\n     * @param {Object} modelParams 額外模型參數\r\n     * \r\n     * 主要參數：\r\n     * - Vth: 閾值電壓 (V)\r\n     * - Kp: 跨導參數 (A/V²)\r\n     * - W/L: 寬長比\r\n     * - Ron: 導通電阻 (Ω)\r\n     * - Vf_body: 體二極體順向電壓 (V)\r\n     */\r\n    constructor(name, nodes, params = {}, modelParams = {}) {\r\n        super(name, 'VM', nodes, 0, { ...params, ...modelParams });\r\n        \r\n        if (nodes.length < 3 || nodes.length > 4) {\r\n            throw new Error(`VoltageControlledMOSFET ${name} must have 3 or 4 nodes: [drain, gate, source] or [drain, gate, source, bulk]`);\r\n        }\r\n        \r\n        // 節點分配\r\n        this.drain = nodes[0];\r\n        this.gate = nodes[1];\r\n        this.source = nodes[2];\r\n        this.bulk = nodes[3] || nodes[2]; // 如果沒有指定 bulk，預設接 source\r\n        \r\n        // MOSFET 基本參數\r\n        this.Vth = this.safeParseValue(params.Vth, 2.0);        // 閾值電壓 (V)\r\n        this.Kp = this.safeParseValue(params.Kp, 100e-6);      // 跨導參數 (A/V²)\r\n        this.W = this.safeParseValue(params.W, 100e-6);        // 通道寬度 (m)\r\n        this.L = this.safeParseValue(params.L, 10e-6);         // 通道長度 (m)\r\n        this.lambda = this.safeParseValue(params.lambda, 0);   // 通道長度調制參數 (V⁻¹)\r\n        \r\n        // 寄生參數\r\n        this.Ron = this.safeParseValue(params.Ron, 0.1);       // 導通電阻 (Ω)\r\n        this.Roff = this.safeParseValue(params.Roff, 1e9);     // 關斷電阻 (Ω)\r\n        this.Vf_body = this.safeParseValue(params.Vf_body, 0.7); // 體二極體順向電壓 (V)\r\n        this.Ron_body = this.safeParseValue(params.Ron_body, 0.01); // 體二極體導通電阻 (Ω)\r\n        \r\n        // 電容參數 (暫時簡化，不在 MNA 中處理)\r\n        this.Cgs = this.safeParseValue(params.Cgs, 1e-12);     // 閘源電容 (F)\r\n        this.Cgd = this.safeParseValue(params.Cgd, 1e-12);     // 閘汲電容 (F) \r\n        this.Cds = this.safeParseValue(params.Cds, 1e-12);     // 汲源電容 (F)\r\n        \r\n        // 模型類型\r\n        this.modelType = params.modelType || 'NMOS'; // 'NMOS' 或 'PMOS'\r\n        this.operatingRegion = 'OFF'; // 'OFF', 'LINEAR', 'SATURATION'\r\n        \r\n        // 狀態變數\r\n        this.Vgs = 0;  // 閘源電壓\r\n        this.Vds = 0;  // 汲源電壓\r\n        this.Vbs = 0;  // 體源電壓\r\n        this.Id = 0;   // 汲極電流\r\n        \r\n        // 驗證參數\r\n        this.validate();\r\n    }\r\n\r\n    /**\r\n     * 安全地解析數值參數\r\n     */\r\n    safeParseValue(value, defaultValue) {\r\n        try {\r\n            if (value === undefined || value === null) {\r\n                return defaultValue;\r\n            }\r\n            return this.parseValue(value);\r\n        } catch (error) {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新 MOSFET 的工作電壓\r\n     * @param {Map} nodeVoltages 節點電壓映射\r\n     */\r\n    updateVoltages(nodeVoltages) {\r\n        const Vd = nodeVoltages.get(this.drain) || 0;\r\n        const Vg = nodeVoltages.get(this.gate) || 0;\r\n        const Vs = nodeVoltages.get(this.source) || 0;\r\n        const Vb = nodeVoltages.get(this.bulk) || Vs;\r\n        \r\n        this.Vgs = Vg - Vs;\r\n        this.Vds = Vd - Vs;\r\n        this.Vbs = Vb - Vs;\r\n        \r\n        // 更新工作區域和電流\r\n        this.updateOperatingRegion();\r\n        this.calculateDrainCurrent();\r\n    }\r\n\r\n    /**\r\n     * 判斷 MOSFET 工作區域\r\n     */\r\n    updateOperatingRegion() {\r\n        const effectiveVth = this.getEffectiveThresholdVoltage();\r\n        \r\n        if (this.modelType === 'NMOS') {\r\n            if (this.Vgs < effectiveVth) {\r\n                this.operatingRegion = 'OFF';\r\n            } else if (this.Vds < (this.Vgs - effectiveVth)) {\r\n                this.operatingRegion = 'LINEAR';\r\n            } else {\r\n                this.operatingRegion = 'SATURATION';\r\n            }\r\n        } else { // PMOS\r\n            if (this.Vgs > effectiveVth) {\r\n                this.operatingRegion = 'OFF';\r\n            } else if (this.Vds > (this.Vgs - effectiveVth)) {\r\n                this.operatingRegion = 'LINEAR';\r\n            } else {\r\n                this.operatingRegion = 'SATURATION';\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取有效閾值電壓（考慮體效應）\r\n     * @returns {number} 有效閾值電壓 (V)\r\n     */\r\n    getEffectiveThresholdVoltage() {\r\n        // 簡化的體效應模型：Vth_eff = Vth + γ * (sqrt(|Vbs| + 2φf) - sqrt(2φf))\r\n        // 這裡使用簡化版本，忽略體效應\r\n        return this.Vth;\r\n    }\r\n\r\n    /**\r\n     * 計算汲極電流\r\n     */\r\n    calculateDrainCurrent() {\r\n        const effectiveVth = this.getEffectiveThresholdVoltage();\r\n        const beta = this.Kp * this.W / this.L; // 跨導參數\r\n        \r\n        switch (this.operatingRegion) {\r\n            case 'OFF':\r\n                this.Id = 0;\r\n                break;\r\n                \r\n            case 'LINEAR':\r\n                // 線性區：Id = β * [(Vgs - Vth) * Vds - Vds²/2] * (1 + λ * Vds)\r\n                const Vov = this.Vgs - effectiveVth; // 過驅動電壓\r\n                this.Id = beta * (Vov * this.Vds - this.Vds * this.Vds / 2) * (1 + this.lambda * this.Vds);\r\n                break;\r\n                \r\n            case 'SATURATION':\r\n                // 飽和區：Id = β/2 * (Vgs - Vth)² * (1 + λ * Vds)\r\n                const Vov_sat = this.Vgs - effectiveVth;\r\n                this.Id = (beta / 2) * Vov_sat * Vov_sat * (1 + this.lambda * this.Vds);\r\n                break;\r\n        }\r\n        \r\n        // 確保電流方向正確（NMOS vs PMOS）\r\n        if (this.modelType === 'PMOS') {\r\n            this.Id = -this.Id;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取等效電阻（用於 MNA 分析的簡化模型）\r\n     * @returns {number} 等效電阻 (Ω)\r\n     */\r\n    getEquivalentResistance() {\r\n        if (this.operatingRegion === 'OFF') {\r\n            return this.Roff;\r\n        } else {\r\n            // 使用導通電阻作為簡化模型\r\n            // 在實際應用中，這裡應該根據工作點計算小信號電阻\r\n            return this.Ron;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 檢查體二極體是否導通\r\n     * 體二極體是從 Source 到 Drain 的內建二極體\r\n     * @returns {boolean}\r\n     */\r\n    isBodyDiodeOn() {\r\n        // 體二極體：source 到 drain（對於 NMOS）\r\n        if (this.modelType === 'NMOS') {\r\n            // 當 Vs > Vd + Vf 時，體二極體導通（電流從 source 流向 drain）\r\n            return (-this.Vds) > this.Vf_body;\r\n        } else {\r\n            // 對於 PMOS，體二極體方向相反\r\n            return this.Vds > this.Vf_body;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 為 MNA 分析提供印花支援\r\n     * 使用等效電阻模型進行簡化分析\r\n     */\r\n    stamp(matrix, rhs, nodeMap, voltageSourceMap, time) {\r\n        // 獲取節點索引\r\n        const drainIndex = this.drain === '0' ? -1 : nodeMap.get(this.drain);\r\n        const sourceIndex = this.source === '0' ? -1 : nodeMap.get(this.source);\r\n        \r\n        if (drainIndex === undefined || sourceIndex === undefined) {\r\n            throw new Error(`VoltageControlledMOSFET ${this.name}: Node mapping not found`);\r\n        }\r\n        \r\n        // === 1. MOSFET 通道模型 ===\r\n        const channelResistance = this.getEquivalentResistance();\r\n        const channelConductance = 1 / channelResistance;\r\n        \r\n        // 印花 MOSFET 通道電阻 (drain-source)\r\n        if (drainIndex >= 0) {\r\n            matrix.addAt(drainIndex, drainIndex, channelConductance);\r\n            if (sourceIndex >= 0) {\r\n                matrix.addAt(drainIndex, sourceIndex, -channelConductance);\r\n            }\r\n        }\r\n        \r\n        if (sourceIndex >= 0) {\r\n            matrix.addAt(sourceIndex, sourceIndex, channelConductance);\r\n            if (drainIndex >= 0) {\r\n                matrix.addAt(sourceIndex, drainIndex, -channelConductance);\r\n            }\r\n        }\r\n        \r\n        // === 2. 體二極體模型 ===\r\n        // 體二極體是從 source 到 drain 的反向並聯二極體\r\n        // 導通條件：Vs - Vd > Vf_body (源極電壓高於汲極電壓 + 順向壓降)\r\n        \r\n        // 檢查體二極體是否應該導通\r\n        const bodyDiodeOn = this.isBodyDiodeOn();\r\n        \r\n        if (bodyDiodeOn) {\r\n            // 體二極體導通：建模為理想電壓源 + 串聯電阻\r\n            // 等效電路：從 source 到 drain，壓降 = Vf_body\r\n            \r\n            const diodeConductance = 1 / this.Ron_body;\r\n            \r\n            // 添加體二極體的導納矩陣 (與通道並聯)\r\n            if (drainIndex >= 0) {\r\n                matrix.addAt(drainIndex, drainIndex, diodeConductance);\r\n                if (sourceIndex >= 0) {\r\n                    matrix.addAt(drainIndex, sourceIndex, -diodeConductance);\r\n                }\r\n            }\r\n            \r\n            if (sourceIndex >= 0) {\r\n                matrix.addAt(sourceIndex, sourceIndex, diodeConductance);\r\n                if (drainIndex >= 0) {\r\n                    matrix.addAt(sourceIndex, drainIndex, -diodeConductance);\r\n                }\r\n            }\r\n            \r\n            // 添加體二極體的電壓源項到右側向量\r\n            // 電流 = G * (Vs - Vd - Vf_body)\r\n            // 重新排列：G * Vs - G * Vd = G * Vf_body\r\n            // 右側項：drain 節點 = -G * Vf_body, source 節點 = +G * Vf_body\r\n            \r\n            const voltageTerm = diodeConductance * this.Vf_body;\r\n            \r\n            if (drainIndex >= 0) {\r\n                rhs.addAt(drainIndex, -voltageTerm);\r\n            }\r\n            if (sourceIndex >= 0) {\r\n                rhs.addAt(sourceIndex, voltageTerm);\r\n            }\r\n        }\r\n        \r\n        // 調試輸出（簡化）\r\n        if (this.name === 'M1' && bodyDiodeOn) {\r\n            console.log(`${this.name}: Body diode ON, Vds=${this.Vds.toFixed(2)}V, Channel R=${channelResistance.toExponential(1)}Ω`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 從上一時間步的節點電壓更新狀態（在蓋章前調用）\r\n     */\r\n    updateFromPreviousVoltages() {\r\n        if (!this.previousNodeVoltages) {\r\n            // 第一次調用，使用初始條件\r\n            this.Vgs = 0;\r\n            this.Vds = 0;\r\n            this.Vbs = 0;\r\n            this.updateOperatingRegion();\r\n            this.calculateDrainCurrent();\r\n            return;\r\n        }\r\n        \r\n        const Vg = this.previousNodeVoltages.get(this.gate) || 0;\r\n        const Vd = this.previousNodeVoltages.get(this.drain) || 0;\r\n        const Vs = this.previousNodeVoltages.get(this.source) || 0;\r\n        const Vb = this.previousNodeVoltages.get(this.bulk) || Vs;\r\n        \r\n        this.Vgs = Vg - Vs;\r\n        this.Vds = Vd - Vs;\r\n        this.Vbs = Vb - Vs;\r\n        this.updateOperatingRegion();\r\n        this.calculateDrainCurrent();\r\n    }\r\n\r\n    /**\r\n     * 更新元件歷史狀態（在每個時間步求解後調用）\r\n     * @param {Map} nodeVoltages 節點電壓映射\r\n     * @param {Map} branchCurrents 支路電流映射\r\n     */\r\n    updateHistory(nodeVoltages, branchCurrents) {\r\n        // 保存當前節點電壓供下一時間步使用\r\n        this.previousNodeVoltages = new Map(nodeVoltages);\r\n        \r\n        // 🔥 關鍵修正：在每個時間步後更新 MOSFET 的工作狀態\r\n        this.updateVoltages(nodeVoltages);\r\n        \r\n        // 調用父類的 updateHistory\r\n        super.updateHistory(nodeVoltages, branchCurrents);\r\n    }\r\n\r\n    /**\r\n     * 設置閘極狀態（由控制器調用）\r\n     * @param {boolean} state 閘極狀態（true=ON, false=OFF）\r\n     */\r\n    setGateState(state) {\r\n        // 這個方法由 solver 的 updateControlInputs 調用\r\n        // 我們可以在這裡設置閘極電壓，但實際上閘極電壓由 VoltageSource 控制\r\n        // 因此這個方法主要用於觸發狀態更新\r\n        this.gateState = state;\r\n        \r\n        // 觸發電壓和工作狀態更新\r\n        // 注意：這裡無法獲取實際的節點電壓，需要等到 stamp 時再更新\r\n    }\r\n\r\n    /**\r\n     * 檢查是否需要電流變數\r\n     * @returns {boolean}\r\n     */\r\n    needsCurrentVariable() {\r\n        return false; // 使用等效電阻模型，不需要額外電流變數\r\n    }\r\n\r\n    /**\r\n     * 計算通過MOSFET的電流\r\n     * @param {Map<string, number>} nodeVoltages 節點電壓\r\n     * @returns {number} 汲極電流 (安培)，正值表示從drain流向source\r\n     */\r\n    getCurrent(nodeVoltages) {\r\n        // 更新電壓\r\n        this.updateVoltages(nodeVoltages);\r\n        \r\n        // 更新操作點\r\n        this.operatingPoint.current = this.Id;\r\n        \r\n        return this.Id;\r\n    }\r\n\r\n    /**\r\n     * 驗證 MOSFET 參數\r\n     */\r\n    validate() {\r\n        if (this.Kp <= 0) {\r\n            throw new Error(`VoltageControlledMOSFET ${this.name}: Kp must be positive`);\r\n        }\r\n        if (this.W <= 0 || this.L <= 0) {\r\n            throw new Error(`VoltageControlledMOSFET ${this.name}: W and L must be positive`);\r\n        }\r\n        if (this.Ron <= 0) {\r\n            throw new Error(`VoltageControlledMOSFET ${this.name}: Ron must be positive`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取詳細工作狀態\r\n     * @returns {Object}\r\n     */\r\n    getOperatingStatus() {\r\n        return {\r\n            name: this.name,\r\n            type: 'VoltageControlledMOSFET',\r\n            modelType: this.modelType,\r\n            operatingRegion: this.operatingRegion,\r\n            voltages: {\r\n                Vgs: this.Vgs,\r\n                Vds: this.Vds,\r\n                Vbs: this.Vbs\r\n            },\r\n            current: {\r\n                Id: this.Id\r\n            },\r\n            equivalentResistance: this.getEquivalentResistance(),\r\n            bodyDiodeOn: this.isBodyDiodeOn(),\r\n            parameters: {\r\n                Vth: this.Vth,\r\n                Kp: this.Kp,\r\n                WoverL: this.W / this.L\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 獲取元件資訊字串\r\n     * @returns {string}\r\n     */\r\n    toString() {\r\n        return `${this.name} (${this.modelType} VC-MOSFET): D=${this.drain} G=${this.gate} S=${this.source}, ` +\r\n               `Vth=${this.Vth}V, Region=${this.operatingRegion}, Id=${this.Id.toExponential(3)}A`;\r\n    }\r\n\r\n    /**\r\n     * 復製 MOSFET\r\n     * @returns {VoltageControlledMOSFET}\r\n     */\r\n    clone() {\r\n        const nodes = [this.drain, this.gate, this.source];\r\n        if (this.bulk !== this.source) {\r\n            nodes.push(this.bulk);\r\n        }\r\n        \r\n        return new VoltageControlledMOSFET(this.name, nodes, {\r\n            Vth: this.Vth,\r\n            Kp: this.Kp,\r\n            W: this.W,\r\n            L: this.L,\r\n            lambda: this.lambda,\r\n            Ron: this.Ron,\r\n            Roff: this.Roff,\r\n            Vf_body: this.Vf_body,\r\n            Ron_body: this.Ron_body,\r\n            modelType: this.modelType\r\n        }, { ...this.params });\r\n    }\r\n}","/**\r\n * Diode 元件模型 (理想二極體模型)\r\n * \r\n * 特點：\r\n * - 基於電壓控制的開關模型\r\n * - 包含順向偏壓電壓 (Vf) 和導通電阻 (Ron)\r\n * - 適用於整流電路、續流二極體等應用\r\n * - 自動根據陽極-陰極電壓決定導通狀態\r\n */\r\n\r\nimport { BaseComponent } from './base.js';\r\n\r\n/**\r\n * 理想二極體模型\r\n * \r\n * 這個模型實現了：\r\n * 1. 當 Va > Vk + Vf 時二極體導通 (低電阻)\r\n * 2. 當 Va <= Vk + Vf 時二極體截止 (高電阻)  \r\n * 3. 支援快速狀態切換和非線性分析\r\n */\r\nexport class Diode extends BaseComponent {\r\n    /**\r\n     * @param {string} name 二極體名稱 (如 'D1', 'CR1')\r\n     * @param {string[]} nodes 連接節點 [anode, cathode]\r\n     * @param {Object} params 參數 {Vf, Ron, Roff}\r\n     */\r\n    constructor(name, nodes, params = {}) {\r\n        super(name, 'D', nodes, 0, params);\r\n        \r\n        if (nodes.length < 2) {\r\n            throw new Error(`Diode ${name} must have 2 nodes: [anode, cathode]`);\r\n        }\r\n        \r\n        // 二極體參數 - 安全地解析參數，如果解析失敗使用默認值\r\n        this.Vf = this.safeParseValue(params.Vf, 0.7);        // 順向偏壓電壓 (默認 0.7V)\r\n        this.Ron = this.safeParseValue(params.Ron, 0.01);     // 導通電阻 (默認 10mΩ)\r\n        this.Roff = this.safeParseValue(params.Roff, 1e6);    // 截止電阻 (默認 1MΩ)\r\n        \r\n        // 節點分配\r\n        this.anode = nodes[0];      // 陽極\r\n        this.cathode = nodes[1];    // 陰極\r\n        \r\n        // 狀態追蹤\r\n        this.isForwardBiased = false;   // 是否順向偏壓\r\n        this.anodeCathodeVoltage = 0;   // 陽極-陰極電壓\r\n        this.current = 0;               // 通過電流\r\n        \r\n        // 初始化參數驗證\r\n        this.validate();\r\n    }\r\n\r\n    /**\r\n     * 安全地解析數值參數，如果失敗則返回默認值\r\n     * @param {*} value 要解析的值\r\n     * @param {number} defaultValue 默認值\r\n     * @returns {number} 解析後的數值或默認值\r\n     */\r\n    safeParseValue(value, defaultValue) {\r\n        try {\r\n            if (value === undefined || value === null) {\r\n                return defaultValue;\r\n            }\r\n            return this.parseValue(value);\r\n        } catch (error) {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 驗證二極體參數\r\n     */\r\n    validate() {\r\n        if (this.Ron <= 0) {\r\n            throw new Error(`Diode ${this.name}: Ron must be positive`);\r\n        }\r\n        if (this.Roff <= this.Ron) {\r\n            throw new Error(`Diode ${this.name}: Roff must be greater than Ron`);\r\n        }\r\n        if (this.Vf < 0) {\r\n            throw new Error(`Diode ${this.name}: Forward voltage Vf must be non-negative`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 計算二極體的等效電阻\r\n     * @param {number} vak 陽極-陰極電壓 (V)\r\n     * @returns {number} 等效電阻 (歐姆)\r\n     */\r\n    getEquivalentResistance(vak) {\r\n        // 二極體導通條件：Va > Vk + Vf，即 vak > Vf\r\n        this.isForwardBiased = vak > this.Vf;\r\n        return this.isForwardBiased ? this.Ron : this.Roff;\r\n    }\r\n\r\n    /**\r\n     * 檢查二極體是否處於導通狀態\r\n     * @returns {boolean}\r\n     */\r\n    isOn() {\r\n        return this.isForwardBiased;\r\n    }\r\n\r\n    /**\r\n     * 獲取二極體壓降 (包含順向偏壓電壓)\r\n     * @returns {number} 實際壓降 (V)\r\n     */\r\n    getVoltageDrop() {\r\n        if (this.isForwardBiased) {\r\n            // 導通時：壓降 = Vf + I * Ron\r\n            return this.Vf + this.current * this.Ron;\r\n        } else {\r\n            // 截止時：壓降等於陽極-陰極電壓\r\n            return this.anodeCathodeVoltage;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 為 MNA 分析提供印花 (stamping) 支援\r\n     * 注意：這是一個非線性元件，需要在每次迭代中更新\r\n     * \r\n     * @param {Matrix} matrix MNA 矩陣\r\n     * @param {Vector} rhs 右側向量  \r\n     * @param {Map} nodeMap 節點映射\r\n     * @param {Map} voltageSourceMap 電壓源映射\r\n     * @param {number} time 當前時間\r\n     */\r\n    stamp(matrix, rhs, nodeMap, voltageSourceMap, time) {\r\n        // 獲取節點索引，接地節點返回 -1\r\n        const anodeIndex = this.anode === '0' || this.anode === 'gnd' ? -1 : nodeMap.get(this.anode);\r\n        const cathodeIndex = this.cathode === '0' || this.cathode === 'gnd' ? -1 : nodeMap.get(this.cathode);\r\n        \r\n        if (anodeIndex === undefined || cathodeIndex === undefined) {\r\n            throw new Error(`Diode ${this.name}: Node mapping not found (anode: ${this.anode}, cathode: ${this.cathode})`);\r\n        }\r\n\r\n        // 獲取當前陽極-陰極電壓 (初始化時為0)\r\n        let vak = 0;\r\n        if (this.anodeCathodeVoltage !== undefined) {\r\n            vak = this.anodeCathodeVoltage;\r\n        }\r\n\r\n        const resistance = this.getEquivalentResistance(vak);\r\n        const conductance = 1 / resistance;\r\n        \r\n        if (Math.abs(vak) > 0.1) {\r\n            console.log(`  [${this.name}] 印花: VAK=${vak.toFixed(3)}V, R=${resistance.toExponential(2)}Ω, G=${conductance.toExponential(2)}S, 狀態=${this.isForwardBiased ? 'ON' : 'OFF'}`);\r\n        }\r\n\r\n        // 印花導納矩陣 (類似電阻的印花方式)\r\n        // 接地節點 (index = -1) 不需要印花到矩陣中\r\n        if (anodeIndex >= 0) {\r\n            matrix.addAt(anodeIndex, anodeIndex, conductance);\r\n            if (cathodeIndex >= 0) {\r\n                matrix.addAt(anodeIndex, cathodeIndex, -conductance);\r\n            }\r\n        }\r\n        \r\n        if (cathodeIndex >= 0) {\r\n            matrix.addAt(cathodeIndex, cathodeIndex, conductance);\r\n            if (anodeIndex >= 0) {\r\n                matrix.addAt(cathodeIndex, anodeIndex, -conductance);\r\n            }\r\n        }\r\n\r\n        // 如果二極體導通，需要在 RHS 向量中添加順向偏壓的影響\r\n        if (this.isForwardBiased) {\r\n            const currentSource = this.Vf / resistance;  // 等效電流源\r\n            console.log(`  [${this.name}] 順向偏壓電流源: ${currentSource.toExponential(3)}A`);\r\n            \r\n            if (anodeIndex >= 0) {\r\n                rhs[anodeIndex] += -currentSource;\r\n            }\r\n            if (cathodeIndex >= 0) {\r\n                rhs[cathodeIndex] += currentSource;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新元件狀態 (在每個時間步後調用)\r\n     * 統一接口，與 ExplicitStateSolver 配合使用\r\n     * @param {Map<string, number>} nodeVoltages 節點電壓映射\r\n     * @param {Array<number>} solutionVector 解向量  \r\n     * @param {number} timeStep 時間步長\r\n     * @param {number} currentTime 當前時間\r\n     * @param {Map<string, number>} nodeMap 節點映射\r\n     * @param {Matrix} gMatrix G矩陣\r\n     */\r\n    updateState(nodeVoltages, solutionVector, timeStep, currentTime, nodeMap, gMatrix) {\r\n        // 獲取陽極和陰極電壓\r\n        const anodeVoltage = nodeVoltages.get(this.anode) || 0;\r\n        const cathodeVoltage = nodeVoltages.get(this.cathode) || 0;\r\n        const vak = anodeVoltage - cathodeVoltage;\r\n        \r\n        // 計算通過二極體的電流\r\n        const resistance = this.getEquivalentResistance(vak);\r\n        const current = vak / resistance;\r\n        \r\n        // 更新內部狀態\r\n        this.anodeCathodeVoltage = vak;\r\n        this.current = current;\r\n        this.isForwardBiased = vak > this.Vf;\r\n        \r\n        // 調試輸出\r\n        if (Math.abs(vak) > 0.1 || this.isForwardBiased) {\r\n            console.log(`  [${this.name}] updateState: 陽極=${anodeVoltage.toFixed(3)}V, 陰極=${cathodeVoltage.toFixed(3)}V`);\r\n            console.log(`  [${this.name}] updateState: VAK=${vak.toFixed(3)}V, 電流=${current.toFixed(6)}A, 狀態=${this.isForwardBiased ? 'ON' : 'OFF'}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新元件狀態 (舊版接口，保持向後兼容)\r\n     * @param {number} vak 陽極-陰極電壓\r\n     * @param {number} iak 陽極到陰極電流\r\n     */\r\n    updateStateOld(vak, iak) {\r\n        this.anodeCathodeVoltage = vak;\r\n        this.current = iak;\r\n        \r\n        // 更新導通狀態\r\n        this.isForwardBiased = vak > this.Vf;\r\n    }\r\n\r\n    /**\r\n     * 更新歷史狀態 (在每個時間步結束時調用)\r\n     * @param {Map<string, number>} nodeVoltages 節點電壓\r\n     * @param {Map<string, number>} branchCurrents 支路電流\r\n     */\r\n    updateHistory(nodeVoltages, branchCurrents) {\r\n        // 調用基類方法\r\n        super.updateHistory(nodeVoltages, branchCurrents);\r\n        \r\n        // 計算陽極-陰極電壓\r\n        const anodeVoltage = nodeVoltages.get(this.anode) || 0;\r\n        const cathodeVoltage = nodeVoltages.get(this.cathode) || 0;\r\n        const vak = anodeVoltage - cathodeVoltage;\r\n        \r\n        // 計算電流 (使用歐姆定律)\r\n        const resistance = this.getEquivalentResistance(vak);\r\n        const current = vak / resistance;\r\n        \r\n        // 更新狀態\r\n        this.updateState(vak, current);\r\n    }\r\n\r\n    /**\r\n     * 檢查是否需要電流變數 (對於理想二極體，通常不需要)\r\n     * @returns {boolean}\r\n     */\r\n    needsCurrentVariable() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 獲取元件資訊字串\r\n     * @returns {string}\r\n     */\r\n    toString() {\r\n        return `${this.name} (Diode): A=${this.anode} K=${this.cathode}, ` +\r\n               `State=${this.isForwardBiased ? 'ON' : 'OFF'}, Vf=${this.Vf}V, Ron=${this.Ron}Ω`;\r\n    }\r\n\r\n    /**\r\n     * 獲取詳細的工作狀態\r\n     * @returns {Object}\r\n     */\r\n    getOperatingStatus() {\r\n        return {\r\n            name: this.name,\r\n            type: 'Diode',\r\n            state: this.isForwardBiased ? 'ON' : 'OFF',\r\n            anodeCathodeVoltage: this.anodeCathodeVoltage,\r\n            current: this.current,\r\n            voltageDrop: this.getVoltageDrop(),\r\n            currentResistance: this.getEquivalentResistance(this.anodeCathodeVoltage),\r\n            isForwardBiased: this.isForwardBiased\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 序列化為 JSON\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            Vf: this.Vf,\r\n            Ron: this.Ron,\r\n            Roff: this.Roff,\r\n            operatingStatus: this.getOperatingStatus()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 復製二極體\r\n     * @returns {Diode}\r\n     */\r\n    clone() {\r\n        return new Diode(this.name, this.nodes, {\r\n            Vf: this.Vf,\r\n            Ron: this.Ron,\r\n            Roff: this.Roff\r\n        });\r\n    }\r\n}","/**\r\n * 多繞組變壓器模型 - 專為 LLC、Flyback、Forward 等高階拓撲設計\r\n * 🔥 修正版 v2：確保互感值為正，由 MNA 求解器處理極性。\r\n */\r\n\r\nimport { BaseComponent } from './base.js';\r\nimport { Inductor } from './inductor.js';\r\n\r\nexport class MultiWindingTransformer {\r\n    /**\r\n     * @param {string} name 變壓器名稱 (如 'T1', 'XFMR1')\r\n     * @param {Object} config 變壓器配置\r\n     */\r\n    constructor(name, config) {\r\n        this.name = name;\r\n        this.type = 'T_META'; // 標記為元元件\r\n\r\n        if (!config || !config.windings || config.windings.length < 2) {\r\n            throw new Error(`Transformer ${name} must have at least 2 windings`);\r\n        }\r\n        \r\n        const numWindings = config.windings.length;\r\n        \r\n        // 1. 創建內部 Inductor 實例\r\n        this.inductors = config.windings.map((windingDef, index) => {\r\n            const inductorName = `${name}_${windingDef.name || `W${index+1}`}`;\r\n            return new Inductor(inductorName, windingDef.nodes, windingDef.inductance, {\r\n                r: windingDef.resistance || 0\r\n            });\r\n        });\r\n\r\n        // 2. 建立耦合矩陣\r\n        const couplingMatrix = this.buildCouplingMatrix(numWindings, config.couplingMatrix);\r\n\r\n        // 3. 計算互感矩陣\r\n        const mutualMatrix = this.calculateMutualInductanceMatrix(couplingMatrix);\r\n\r\n        // 4. 將耦合資訊注入到每個 Inductor 實例中\r\n        for (let i = 0; i < numWindings; i++) {\r\n            const inductorI = this.inductors[i];\r\n            inductorI.couplings = [];\r\n\r\n            for (let j = 0; j < numWindings; j++) {\r\n                if (i === j) continue;\r\n\r\n                const inductorJ = this.inductors[j];\r\n                const mutualInductance = mutualMatrix[i][j];\r\n                \r\n                // 🔥 核心修正：\r\n                // MNA 矩陣的印花邏輯 (mna.js) 會自動處理負號以符合物理公式。\r\n                // 因此這裡的互感值必須為正，以避免雙重否定導致的相位反轉。\r\n                const polarity = 1.0; \r\n\r\n                inductorI.couplings.push({\r\n                    inductor: inductorJ,\r\n                    mutualInductance: mutualInductance * polarity\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 🔥 核心方法：返回構成變壓器的所有實際元件\r\n     * @returns {Inductor[]}\r\n     */\r\n    getComponents() {\r\n        return this.inductors;\r\n    }\r\n\r\n    buildCouplingMatrix(n, userMatrix) {\r\n        const matrix = Array(n).fill(null).map(() => Array(n).fill(0));\r\n        for (let i = 0; i < n; i++) matrix[i][i] = 1.0;\r\n\r\n        if (userMatrix) {\r\n            for (let i = 0; i < n; i++) {\r\n                for (let j = i + 1; j < n; j++) {\r\n                    const k = (userMatrix[i] && userMatrix[i][j] !== undefined) ? userMatrix[i][j] : 0.99;\r\n                    matrix[i][j] = matrix[j][i] = Math.max(-1, Math.min(1, k));\r\n                }\r\n            }\r\n        } else {\r\n            const defaultK = 0.99;\r\n            for (let i = 0; i < n; i++) {\r\n                for (let j = i + 1; j < n; j++) {\r\n                    matrix[i][j] = matrix[j][i] = defaultK;\r\n                }\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n\r\n    calculateMutualInductanceMatrix(couplingMatrix) {\r\n        const n = this.inductors.length;\r\n        const mutualMatrix = Array(n).fill(null).map(() => Array(n).fill(0));\r\n        \r\n        for (let i = 0; i < n; i++) {\r\n            for (let j = i; j < n; j++) {\r\n                if (i === j) {\r\n                    mutualMatrix[i][j] = this.inductors[i].getInductance();\r\n                } else {\r\n                    const Li = this.inductors[i].getInductance();\r\n                    const Lj = this.inductors[j].getInductance();\r\n                    const k_ij = couplingMatrix[i][j];\r\n                    const M = k_ij * Math.sqrt(Li * Lj);\r\n                    mutualMatrix[i][j] = mutualMatrix[j][i] = M;\r\n                }\r\n            }\r\n        }\r\n        return mutualMatrix;\r\n    }\r\n    \r\n    toString() {\r\n        return `${this.name} (MultiWinding Transformer with ${this.inductors.length} windings)`;\r\n    }\r\n}","/**\r\n * 電路預處理器 - 顯式狀態更新法的核心\r\n * \r\n * 將物件導向的電路元件轉換為GPU可以高效處理的數值數據結構\r\n * \r\n * 核心職責：\r\n * 1. 分析電路拓撲，建立節點映射\r\n * 2. 識別狀態變量 (電容電壓Vc, 電感電流Il) \r\n * 3. 建立純電阻導納矩陣 G (不包含動態元件的隱式項)\r\n * 4. 為GPU計算創建優化的數據佈局\r\n * \r\n * 顯式方法核心思想：\r\n * - 電容被視為電壓源 (值 = Vc(t))  \r\n * - 電感被視為電流源 (值 = Il(t))\r\n * - 每個時間步只需求解純電阻網絡 Gv = i\r\n * - 根據節點電壓計算狀態變量的導數\r\n */\r\n\r\n/**\r\n * 稀疏矩陣條目 (COO格式)\r\n */\r\nclass SparseEntry {\r\n    constructor(row, col, value) {\r\n        this.row = row;\r\n        this.col = col; \r\n        this.value = value;\r\n    }\r\n}\r\n\r\n/**\r\n * 電路預處理器主類\r\n */\r\nexport class CircuitPreprocessor {\r\n    constructor() {\r\n        // 節點映射\r\n        this.nodeMap = new Map();           // 節點名稱 -> 矩陣索引\r\n        this.voltageSourceMap = new Map();  // 電壓源映射\r\n        this.nodeCount = 0;\r\n        this.nodeNames = [];                // 調試用節點名稱列表\r\n        \r\n        // 狀態變量映射 (電容電壓 + 電感電流)\r\n        this.stateVariables = [];           // 狀態變量信息列表\r\n        this.stateCount = 0;\r\n        \r\n        // 純電阻導納矩陣 G (COO稀疏格式)\r\n        this.gMatrixEntries = [];           // SparseEntry 列表\r\n        this.gMatrixSize = 0;\r\n        \r\n        // 元件數據 (用於快速訪問)\r\n        this.componentData = new Map();     // 元件名稱 -> 數據對象\r\n        \r\n        // GPU緩存準備\r\n        this.gpuBuffers = {\r\n            // G矩陣 (COO格式)\r\n            gRows: null,                    // Int32Array\r\n            gCols: null,                    // Int32Array  \r\n            gValues: null,                  // Float32Array\r\n            gDiagonal: null,                // Float32Array (對角線元素，用於迭代求解)\r\n            \r\n            // 狀態向量和參數\r\n            stateVector: null,              // Float32Array [Vc1, Vc2, ..., Il1, Il2, ...]\r\n            stateParams: null,              // Float32Array [C1, C2, ..., L1, L2, ...] \r\n            rhsVector: null,                // Float32Array (右手側向量)\r\n            solutionVector: null,           // Float32Array (節點電壓解)\r\n            \r\n            // 元件索引映射 \r\n            stateToNode: null,              // Int32Array (狀態變量對應的節點索引)\r\n            stateTypes: null                // Int32Array (0=電容, 1=電感)\r\n        };\r\n        \r\n        // 調試選項\r\n        this.debug = false;\r\n    }\r\n\r\n    /**\r\n     * 處理電路元件列表，生成GPU數據結構\r\n     * @param {BaseComponent[]} components 電路元件列表\r\n     * @returns {Object} 處理結果統計\r\n     */\r\n    process(components) {\r\n        console.log('開始電路預處理...');\r\n        \r\n        // 重置內部狀態\r\n        this.reset();\r\n        \r\n        // 第一階段：分析電路拓撲\r\n        this.analyzeTopology(components);\r\n        \r\n        // 第二階段：識別狀態變量\r\n        this.identifyStateVariables(components);\r\n        \r\n        // 第三階段：讓每個元件進行預處理\r\n        this.processComponents(components);\r\n        \r\n        // 第四階段：構建GPU數據結構\r\n        this.buildGPUBuffers();\r\n        \r\n        const stats = {\r\n            nodeCount: this.nodeCount,\r\n            stateCount: this.stateCount, \r\n            matrixEntries: this.gMatrixEntries.length,\r\n            componentCount: components.length\r\n        };\r\n        \r\n        if (this.debug) {\r\n            this.printDebugInfo();\r\n        }\r\n        \r\n        console.log(`電路預處理完成: ${stats.nodeCount} 節點, ${stats.stateCount} 狀態變量, ${stats.matrixEntries} 矩陣條目`);\r\n        return stats;\r\n    }\r\n\r\n    /**\r\n     * 分析電路拓撲，建立節點映射\r\n     */\r\n    analyzeTopology(components) {\r\n        const nodeSet = new Set();\r\n        \r\n        // 收集所有節點（排除接地）\r\n        for (const component of components) {\r\n            if (component.nodes) {\r\n                for (const node of component.nodes) {\r\n                    if (node !== '0' && node !== 'gnd' && node !== 'GND') {\r\n                        nodeSet.add(node);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        // 建立節點映射\r\n        const sortedNodes = Array.from(nodeSet).sort();\r\n        for (let i = 0; i < sortedNodes.length; i++) {\r\n            this.nodeMap.set(sortedNodes[i], i);\r\n            this.nodeNames.push(sortedNodes[i]);\r\n        }\r\n        \r\n        this.nodeCount = sortedNodes.length;\r\n        \r\n        if (this.debug) {\r\n            console.log('節點映射:', this.nodeMap);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 識別所有狀態變量 (電容電壓和電感電流)\r\n     */\r\n    identifyStateVariables(components) {\r\n        let stateIndex = 0;\r\n        \r\n        for (const component of components) {\r\n            if (component.isStateVariable()) {\r\n                const stateVar = {\r\n                    index: stateIndex++,\r\n                    componentName: component.name,\r\n                    type: component.getStateVariableType(),    // 'voltage' or 'current'\r\n                    initialValue: component.getInitialStateValue(),\r\n                    parameter: component.value,                // C值或L值\r\n                    node1: this.getNodeIndex(component.nodes[0]),\r\n                    node2: this.getNodeIndex(component.nodes[1])\r\n                };\r\n                \r\n                this.stateVariables.push(stateVar);\r\n                \r\n                // 在元件數據中記錄狀態變量索引\r\n                this.componentData.set(component.name, {\r\n                    stateIndex: stateVar.index,\r\n                    node1: stateVar.node1,\r\n                    node2: stateVar.node2,\r\n                    parameter: stateVar.parameter,\r\n                    type: stateVar.type\r\n                });\r\n            }\r\n        }\r\n        \r\n        this.stateCount = stateIndex;\r\n        \r\n        if (this.debug) {\r\n            console.log('狀態變量:', this.stateVariables);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 讓所有元件進行預處理，構建G矩陣\r\n     */\r\n    processComponents(components) {\r\n        for (const component of components) {\r\n            try {\r\n                component.preprocess(this);\r\n            } catch (error) {\r\n                console.warn(`元件 ${component.name} 預處理失敗: ${error.message}`);\r\n            }\r\n        }\r\n        \r\n        if (this.debug) {\r\n            console.log(`G矩陣條目數: ${this.gMatrixEntries.length}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 構建最終的GPU緩存數據\r\n     */\r\n    buildGPUBuffers() {\r\n        const entryCount = this.gMatrixEntries.length;\r\n        \r\n        // G矩陣 (COO格式)\r\n        this.gpuBuffers.gRows = new Int32Array(entryCount);\r\n        this.gpuBuffers.gCols = new Int32Array(entryCount);  \r\n        this.gpuBuffers.gValues = new Float32Array(entryCount);\r\n        \r\n        for (let i = 0; i < entryCount; i++) {\r\n            const entry = this.gMatrixEntries[i];\r\n            this.gpuBuffers.gRows[i] = entry.row;\r\n            this.gpuBuffers.gCols[i] = entry.col;\r\n            this.gpuBuffers.gValues[i] = entry.value;\r\n        }\r\n        \r\n        // 提取對角線元素 (用於迭代求解器)\r\n        this.gpuBuffers.gDiagonal = new Float32Array(this.nodeCount);\r\n        for (const entry of this.gMatrixEntries) {\r\n            if (entry.row === entry.col) {\r\n                this.gpuBuffers.gDiagonal[entry.row] = entry.value;\r\n            }\r\n        }\r\n        \r\n        // 狀態向量和參數\r\n        this.gpuBuffers.stateVector = new Float32Array(this.stateCount);\r\n        this.gpuBuffers.stateParams = new Float32Array(this.stateCount);\r\n        this.gpuBuffers.stateToNode = new Int32Array(this.stateCount * 2); // 每個狀態變量對應2個節點\r\n        this.gpuBuffers.stateTypes = new Int32Array(this.stateCount);\r\n        \r\n        for (let i = 0; i < this.stateCount; i++) {\r\n            const stateVar = this.stateVariables[i];\r\n            this.gpuBuffers.stateVector[i] = stateVar.initialValue;\r\n            this.gpuBuffers.stateParams[i] = stateVar.parameter;\r\n            this.gpuBuffers.stateToNode[i * 2] = stateVar.node1;\r\n            this.gpuBuffers.stateToNode[i * 2 + 1] = stateVar.node2;\r\n            this.gpuBuffers.stateTypes[i] = stateVar.type === 'voltage' ? 0 : 1;\r\n        }\r\n        \r\n        // 工作緩存\r\n        this.gpuBuffers.rhsVector = new Float32Array(this.nodeCount);\r\n        this.gpuBuffers.solutionVector = new Float32Array(this.nodeCount);\r\n        \r\n        this.gMatrixSize = this.nodeCount;\r\n    }\r\n\r\n    // ==================== 元件預處理接口方法 ====================\r\n\r\n    /**\r\n     * 獲取節點的矩陣索引\r\n     * @param {string} nodeName 節點名稱\r\n     * @returns {number} 矩陣索引，接地節點返回-1\r\n     */\r\n    getNodeIndex(nodeName) {\r\n        if (nodeName === '0' || nodeName === 'gnd' || nodeName === 'GND') {\r\n            return -1; // 接地節點\r\n        }\r\n        \r\n        const index = this.nodeMap.get(nodeName);\r\n        if (index === undefined) {\r\n            throw new Error(`節點 ${nodeName} 未在電路中找到`);\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * 向G矩陣添加電導項\r\n     * @param {number} row 行索引 (-1 表示接地)\r\n     * @param {number} col 列索引 (-1 表示接地)  \r\n     * @param {number} conductance 電導值\r\n     */\r\n    addConductance(row, col, conductance) {\r\n        if (Math.abs(conductance) < 1e-15) {\r\n            return; // 忽略極小值\r\n        }\r\n        \r\n        // 跳過涉及接地節點的項\r\n        if (row === -1 || col === -1) {\r\n            return;\r\n        }\r\n        \r\n        // 檢查索引有效性\r\n        if (row < 0 || row >= this.nodeCount || col < 0 || col >= this.nodeCount) {\r\n            throw new Error(`矩陣索引超出範圍: (${row}, ${col}), 矩陣大小: ${this.nodeCount}`);\r\n        }\r\n        \r\n        // 查找是否已存在相同位置的條目\r\n        const existingEntry = this.gMatrixEntries.find(e => e.row === row && e.col === col);\r\n        if (existingEntry) {\r\n            existingEntry.value += conductance;\r\n        } else {\r\n            this.gMatrixEntries.push(new SparseEntry(row, col, conductance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 註冊狀態變量 (由電容/電感調用)  \r\n     * @param {Object} stateInfo 狀態變量信息\r\n     * @returns {number} 狀態變量索引\r\n     */\r\n    addStateVariable(stateInfo) {\r\n        // 這個方法在 identifyStateVariables 階段已經完成\r\n        // 這裡返回已經分配的索引\r\n        if (typeof stateInfo === 'string') {\r\n            // 如果傳入的是組件名稱\r\n            const componentData = this.componentData.get(stateInfo);\r\n            if (componentData) {\r\n                return componentData.stateIndex;\r\n            }\r\n        } else if (stateInfo && stateInfo.componentName) {\r\n            const componentData = this.componentData.get(stateInfo.componentName);\r\n            if (componentData) {\r\n                return componentData.stateIndex;\r\n            }\r\n        }\r\n        \r\n        throw new Error(`狀態變量 ${stateInfo.componentName || stateInfo} 未找到`);\r\n    }\r\n\r\n    /**\r\n     * 向RHS向量添加電流源項 (由獨立電流源和電感調用)\r\n     * @param {number} node1 正端節點索引\r\n     * @param {number} node2 負端節點索引  \r\n     * @param {number} current 電流值 (正值表示從node1流向node2)\r\n     */\r\n    addCurrentSource(node1, node2, current) {\r\n        if (Math.abs(current) < 1e-15) {\r\n            return;\r\n        }\r\n        \r\n        // 注意：這個方法主要用於預處理階段記錄靜態電流源\r\n        // 動態的RHS更新將在運行時進行\r\n        if (node1 >= 0) {\r\n            // 此處我們暫時不直接修改RHS，而是記錄信息供後續使用\r\n        }\r\n        if (node2 >= 0) {\r\n            // 同上\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 重置預處理器狀態\r\n     */\r\n    reset() {\r\n        this.nodeMap.clear();\r\n        this.nodeCount = 0;\r\n        this.nodeNames = [];\r\n        \r\n        this.stateVariables = [];\r\n        this.stateCount = 0;\r\n        \r\n        this.gMatrixEntries = [];\r\n        this.gMatrixSize = 0;\r\n        \r\n        this.componentData.clear();\r\n        \r\n        // 重置GPU緩存\r\n        for (const key in this.gpuBuffers) {\r\n            this.gpuBuffers[key] = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取預處理結果 (供求解器使用)\r\n     * @returns {Object} 完整的預處理數據\r\n     */\r\n    getProcessedData() {\r\n        return {\r\n            nodeCount: this.nodeCount,\r\n            stateCount: this.stateCount,\r\n            nodeNames: [...this.nodeNames],\r\n            nodeMap: new Map(this.nodeMap),\r\n            voltageSourceMap: new Map(this.voltageSourceMap || []),\r\n            stateVariables: [...this.stateVariables],\r\n            componentData: new Map(this.componentData),\r\n            gpuBuffers: { ...this.gpuBuffers }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 打印調試信息\r\n     */\r\n    printDebugInfo() {\r\n        console.log('\\n=== 電路預處理調試信息 ===');\r\n        console.log(`節點數: ${this.nodeCount}`);\r\n        console.log('節點映射:', this.nodeNames);\r\n        \r\n        console.log(`\\n狀態變量數: ${this.stateCount}`);\r\n        for (const stateVar of this.stateVariables) {\r\n            console.log(`  ${stateVar.componentName} (${stateVar.type}): 初值=${stateVar.initialValue}, 參數=${stateVar.parameter}`);\r\n        }\r\n        \r\n        console.log(`\\nG矩陣條目數: ${this.gMatrixEntries.length}`);\r\n        if (this.gMatrixEntries.length <= 20) {\r\n            for (const entry of this.gMatrixEntries) {\r\n                console.log(`  G[${entry.row},${entry.col}] = ${entry.value.toExponential(3)}`);\r\n            }\r\n        } else {\r\n            console.log('  (矩陣過大，省略詳細輸出)');\r\n        }\r\n        \r\n        console.log('=========================\\n');\r\n    }\r\n\r\n    /**\r\n     * 驗證預處理結果\r\n     * @returns {Object} 驗證結果\r\n     */\r\n    validate() {\r\n        const issues = [];\r\n        const warnings = [];\r\n        \r\n        // 檢查矩陣完整性\r\n        if (this.nodeCount === 0) {\r\n            issues.push('沒有有效節點');\r\n        }\r\n        \r\n        if (this.gMatrixEntries.length === 0) {\r\n            issues.push('G矩陣為空');\r\n        }\r\n        \r\n        // 檢查對角線元素\r\n        const diagonalElements = new Set();\r\n        for (const entry of this.gMatrixEntries) {\r\n            if (entry.row === entry.col) {\r\n                diagonalElements.add(entry.row);\r\n            }\r\n        }\r\n        \r\n        for (let i = 0; i < this.nodeCount; i++) {\r\n            if (!diagonalElements.has(i)) {\r\n                warnings.push(`節點 ${i} (${this.nodeNames[i]}) 沒有對角線元素`);\r\n            }\r\n        }\r\n        \r\n        // 檢查矩陣對稱性 (對於純電阻網絡應該對稱)\r\n        const matrixMap = new Map();\r\n        for (const entry of this.gMatrixEntries) {\r\n            matrixMap.set(`${entry.row},${entry.col}`, entry.value);\r\n        }\r\n        \r\n        let asymmetricCount = 0;\r\n        for (const entry of this.gMatrixEntries) {\r\n            const symmetric = matrixMap.get(`${entry.col},${entry.row}`);\r\n            if (symmetric === undefined || Math.abs(symmetric - entry.value) > 1e-12) {\r\n                asymmetricCount++;\r\n            }\r\n        }\r\n        \r\n        if (asymmetricCount > 0) {\r\n            warnings.push(`發現 ${asymmetricCount} 個非對稱矩陣元素`);\r\n        }\r\n        \r\n        return {\r\n            valid: issues.length === 0,\r\n            issues,\r\n            warnings\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 獲取G矩陣的密集格式 (用於WebGPU求解器)\r\n     * @returns {Array<Array<number>>} 密集矩陣\r\n     */\r\n    getDenseMatrix() {\r\n        const denseMatrix = [];\r\n        \r\n        // 初始化為零矩陣\r\n        for (let i = 0; i < this.nodeCount; i++) {\r\n            denseMatrix[i] = new Array(this.nodeCount).fill(0);\r\n        }\r\n        \r\n        // 填充矩陣元素\r\n        for (const entry of this.gMatrixEntries) {\r\n            denseMatrix[entry.row][entry.col] = entry.value;\r\n        }\r\n        \r\n        return denseMatrix;\r\n    }\r\n\r\n    /**\r\n     * 設置調試模式\r\n     * @param {boolean} enabled 是否啟用調試\r\n     */\r\n    setDebug(enabled) {\r\n        this.debug = enabled;\r\n    }\r\n}","/**\r\n * WebGPU線性求解器 - GPU加速的電路仿真核心\r\n * \r\n * 實現功能:\r\n * 1. GPU緩衝區管理 (G矩陣、RHS向量、狀態向量)\r\n * 2. 並行線性方程組求解 (迭代法: Jacobi/Gauss-Seidel)\r\n * 3. 狀態變量更新 (顯式歐拉/RK4)\r\n * 4. CPU-GPU數據傳輸優化\r\n */\r\n\r\n// 移除有問題的 webgpu 依賴，直接使用瀏覽器原生 WebGPU API\r\n// import { create, globals } from 'webgpu';\r\n\r\nexport class WebGPUSolver {\r\n    constructor(options = {}) {\r\n        this.debug = options.debug || false;\r\n        this.maxIterations = options.maxIterations || 2000;\r\n        this.tolerance = options.tolerance || 1e-12;\r\n        \r\n        // WebGPU組件\r\n        this.gpu = null;\r\n        this.adapter = null;\r\n        this.device = null;\r\n        \r\n        // 計算管線\r\n        this.solverPipeline = null;\r\n        this.stateUpdatePipeline = null;\r\n        \r\n        // GPU緩衝區\r\n        this.gMatrixBuffer = null;\r\n        this.rhsBuffer = null;\r\n        this.solutionBuffer = null;\r\n        this.stateBuffer = null;\r\n        this.tempBuffer = null;\r\n        \r\n        // 電路數據\r\n        this.circuitData = null;\r\n        this.nodeCount = 0;\r\n        this.stateCount = 0;\r\n        this.workgroupSize = 64;\r\n        \r\n        // 性能統計\r\n        this.stats = {\r\n            totalGPUTime: 0,\r\n            totalTransferTime: 0,\r\n            totalIterations: 0,\r\n            averageIterations: 0,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 初始化WebGPU上下文和設備\r\n     * @param {GPUDevice} device - 外部傳入的 WebGPU 設備\r\n     * @param {GPUAdapter} adapter - 外部傳入的 WebGPU 適配器\r\n     */\r\n    async initialize(device = null, adapter = null) {\r\n        if (this.debug) console.log('🚀 初始化WebGPU線性求解器...');\r\n        \r\n        try {\r\n            // 使用外部傳入的設備和適配器，或者自己創建\r\n            if (device && adapter) {\r\n                if (this.debug) console.log('✅ 使用外部傳入的 WebGPU 設備');\r\n                this.adapter = adapter;\r\n                this.device = device;\r\n            } else {\r\n                if (this.debug) console.log('🔍 自動獲取 WebGPU 設備...');\r\n                \r\n                // 使用瀏覽器原生 WebGPU API\r\n                if (!navigator.gpu) {\r\n                    throw new Error('瀏覽器不支援 WebGPU API');\r\n                }\r\n                \r\n                // 請求適配器和設備\r\n                this.adapter = await navigator.gpu.requestAdapter();\r\n                if (!this.adapter) {\r\n                    throw new Error('無法獲取WebGPU適配器');\r\n                }\r\n                \r\n                this.device = await this.adapter.requestDevice({\r\n                    requiredFeatures: [],\r\n                    requiredLimits: {\r\n                        maxComputeWorkgroupStorageSize: 16384,\r\n                        maxStorageBufferBindingSize: 134217728, // 128MB\r\n                    }\r\n                });\r\n                \r\n                // 添加設備丟失監聽器\r\n                this.device.lost.then((info) => {\r\n                    console.error('WebGPU設備丟失:', info.reason, info.message);\r\n                    this.device = null;\r\n                });\r\n            }\r\n            \r\n            if (this.debug) {\r\n                console.log('✅ WebGPU設備初始化成功');\r\n                console.log(`   適配器: ${this.adapter.info?.description || 'Unknown'}`);\r\n                console.log(`   供應商: ${this.adapter.info?.vendor || 'Unknown'}`);\r\n            }\r\n            \r\n            // 創建著色器和管線\r\n            await this.createComputePipelines();\r\n            \r\n        } catch (error) {\r\n            throw new Error(`WebGPU初始化失敗: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 設置電路數據並創建GPU緩衝區\r\n     */\r\n    setupCircuit(circuitData) {\r\n        this.circuitData = circuitData;\r\n        this.nodeCount = circuitData.nodeCount;\r\n        this.stateCount = circuitData.stateCount;\r\n        \r\n        if (this.debug) {\r\n            console.log(`📊 設置電路: ${this.nodeCount} 節點, ${this.stateCount} 狀態變量`);\r\n        }\r\n        \r\n        this.createBuffers();\r\n        this.uploadCircuitData();\r\n    }\r\n\r\n    /**\r\n     * 創建計算著色器管線\r\n     */\r\n    async createComputePipelines() {\r\n        // Jacobi迭代求解器著色器\r\n        const jacobiSolverWGSL = this.generateJacobiSolverWGSL();\r\n        const jacobiShaderModule = this.device.createShaderModule({\r\n            label: 'Jacobi Linear Solver',\r\n            code: jacobiSolverWGSL,\r\n        });\r\n        \r\n        this.solverPipeline = this.device.createComputePipeline({\r\n            label: 'Jacobi Solver Pipeline',\r\n            layout: 'auto',\r\n            compute: {\r\n                module: jacobiShaderModule,\r\n                entryPoint: 'jacobi_iteration',\r\n            },\r\n        });\r\n        \r\n        // 狀態變量更新著色器\r\n        const stateUpdateWGSL = this.generateStateUpdateWGSL();\r\n        const stateShaderModule = this.device.createShaderModule({\r\n            label: 'State Variable Update',\r\n            code: stateUpdateWGSL,\r\n        });\r\n        \r\n        this.stateUpdatePipeline = this.device.createComputePipeline({\r\n            label: 'State Update Pipeline', \r\n            layout: 'auto',\r\n            compute: {\r\n                module: stateShaderModule,\r\n                entryPoint: 'update_state_variables',\r\n            },\r\n        });\r\n        \r\n        if (this.debug) {\r\n            console.log('✅ 計算管線創建完成');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生成Jacobi迭代求解器的WGSL代碼\r\n     */\r\n    generateJacobiSolverWGSL() {\r\n        return `\r\n            // Jacobi迭代法求解 Gv = rhs\r\n            // x_new[i] = (rhs[i] - sum(G[i,j] * x_old[j], j != i)) / G[i,i]\r\n            \r\n            @group(0) @binding(0) var<storage, read> g_matrix: array<f32>;\r\n            @group(0) @binding(1) var<storage, read> rhs: array<f32>;\r\n            @group(0) @binding(2) var<storage, read> x_old: array<f32>;\r\n            @group(0) @binding(3) var<storage, read_write> x_new: array<f32>;\r\n            @group(0) @binding(4) var<uniform> params: JacobiParams;\r\n            \r\n            struct JacobiParams {\r\n                node_count: u32,\r\n                matrix_size: u32,\r\n                workgroup_size: u32,\r\n                padding: u32,\r\n            }\r\n            \r\n            @compute @workgroup_size(64)\r\n            fn jacobi_iteration(@builtin(global_invocation_id) global_id: vec3<u32>) {\r\n                let row = global_id.x;\r\n                if (row >= params.node_count) {\r\n                    return;\r\n                }\r\n                \r\n                var sum = 0.0;\r\n                var diagonal = 0.0;\r\n                \r\n                // 計算G矩陣的行積(排除對角線)\r\n                for (var col = 0u; col < params.node_count; col = col + 1u) {\r\n                    let matrix_idx = row * params.node_count + col;\r\n                    let g_value = g_matrix[matrix_idx];\r\n                    \r\n                    if (row == col) {\r\n                        diagonal = g_value;\r\n                    } else {\r\n                        sum = sum + g_value * x_old[col];\r\n                    }\r\n                }\r\n                \r\n                // Jacobi更新: x_new[i] = (rhs[i] - sum) / G[i,i]\r\n                // 使用更高精度的數值運算和relaxation factor\r\n                if (abs(diagonal) > 1e-12) {\r\n                    let update = (rhs[row] - sum) / diagonal;\r\n                    // 使用relaxation factor提高數值穩定性 (ω=0.8)\r\n                    x_new[row] = x_old[row] * 0.2 + update * 0.8;\r\n                } else {\r\n                    x_new[row] = x_old[row]; // 保持舊值如果對角線接近零\r\n                }\r\n            }\r\n        `;\r\n    }\r\n\r\n    /**\r\n     * 生成狀態變量更新的WGSL代碼\r\n     */\r\n    generateStateUpdateWGSL() {\r\n        return `\r\n            // 顯式狀態變量更新 - 基於KCL的通用方法\r\n            // 對於電容: dVc/dt = Ic/C，其中 Ic 通過KCL計算\r\n            // 對於電感: dIl/dt = Vl/L\r\n            \r\n            @group(0) @binding(0) var<storage, read> node_voltages: array<f32>;\r\n            @group(0) @binding(1) var<storage, read> state_old: array<f32>;\r\n            @group(0) @binding(2) var<storage, read_write> state_new: array<f32>;\r\n            @group(0) @binding(3) var<storage, read> state_params: array<f32>; // C或L值\r\n            @group(0) @binding(4) var<storage, read> state_nodes: array<i32>; // 節點索引對\r\n            @group(0) @binding(5) var<storage, read> state_types: array<u32>; // 0=voltage(電容), 1=current(電感)\r\n            @group(0) @binding(6) var<storage, read> g_matrix: array<f32>; // G矩陣 (row-major)\r\n            @group(0) @binding(7) var<storage, read> rhs_vector: array<f32>; // RHS向量\r\n            @group(0) @binding(8) var<uniform> update_params: StateUpdateParams;\r\n            \r\n            struct StateUpdateParams {\r\n                state_count: u32,\r\n                node_count: u32,\r\n                time_step: f32,\r\n                large_admittance: f32, // 電容大導納值\r\n                method: u32, // 0=Euler, 1=RK4\r\n            }\r\n            \r\n            @compute @workgroup_size(64)\r\n            fn update_state_variables(@builtin(global_invocation_id) global_id: vec3<u32>) {\r\n                let state_idx = global_id.x;\r\n                if (state_idx >= update_params.state_count) {\r\n                    return;\r\n                }\r\n                \r\n                // 獲取狀態變量的節點索引和參數\r\n                let node1 = state_nodes[state_idx * 2];\r\n                let node2 = state_nodes[state_idx * 2 + 1];\r\n                let state_type = state_types[state_idx];\r\n                let parameter = state_params[state_idx]; // C或L值\r\n                let current_state = state_old[state_idx];\r\n                \r\n                var derivative = 0.0;\r\n                \r\n                if (state_type == 0u) {\r\n                    // 電容: dVc/dt = Ic/C\r\n                    // 使用簡化的電容電流計算: Ic = (V_node - Vc) * G_large\r\n                    var capacitor_current = 0.0;\r\n                    \r\n                    if (node1 >= 0) {\r\n                        // 獲取節點電壓\r\n                        var v1 = 0.0;\r\n                        var v2 = 0.0;\r\n                        if (node1 >= 0) { v1 = node_voltages[u32(node1)]; }\r\n                        if (node2 >= 0) { v2 = node_voltages[u32(node2)]; }\r\n                        let node_voltage = v1 - v2;\r\n                        \r\n                        // 電容電流 = (節點電壓 - 電容電壓) * 大導納\r\n                        capacitor_current = (node_voltage - current_state) * update_params.large_admittance;\r\n                    }\r\n                    \r\n                    // 計算導數: dVc/dt = Ic/C\r\n                    derivative = capacitor_current / parameter;\r\n                    \r\n                } else if (state_type == 1u) {\r\n                    // 電感: dIl/dt = Vl/L\r\n                    var v1 = 0.0;\r\n                    var v2 = 0.0;\r\n                    if (node1 >= 0) { v1 = node_voltages[u32(node1)]; }\r\n                    if (node2 >= 0) { v2 = node_voltages[u32(node2)]; }\r\n                    let node_voltage = v1 - v2;\r\n                    \r\n                    derivative = node_voltage / parameter;\r\n                }\r\n                \r\n                // 積分更新\r\n                if (update_params.method == 0u) {\r\n                    // 前向歐拉法: x(t+dt) = x(t) + dt * f(x(t), t)\r\n                    state_new[state_idx] = current_state + update_params.time_step * derivative;\r\n                } else {\r\n                    // RK4暫時簡化為歐拉（完整RK4需要多次求解）\r\n                    state_new[state_idx] = current_state + update_params.time_step * derivative;\r\n                }\r\n            }\r\n        `;\r\n    }\r\n\r\n    /**\r\n     * 創建GPU緩衝區\r\n     */\r\n    createBuffers() {\r\n        if (!this.device) {\r\n            throw new Error('無法創建緩衝區：WebGPU設備未初始化');\r\n        }\r\n        \r\n        const nodeCount = this.nodeCount;\r\n        const stateCount = this.stateCount;\r\n        \r\n        if (this.debug) {\r\n            console.log(`  創建GPU緩衝區: 節點${nodeCount}, 狀態${stateCount}`);\r\n        }\r\n        \r\n        // G矩陣 (nodeCount x nodeCount)\r\n        const matrixSize = nodeCount * nodeCount * 4; // Float32 = 4 bytes\r\n        this.gMatrixBuffer = this.device.createBuffer({\r\n            label: 'G Matrix Buffer',\r\n            size: matrixSize,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n        });\r\n        \r\n        // RHS向量 (nodeCount)\r\n        const vectorSize = nodeCount * 4;\r\n        this.rhsBuffer = this.device.createBuffer({\r\n            label: 'RHS Vector Buffer',\r\n            size: vectorSize,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n        });\r\n        \r\n        // 解向量 (nodeCount, 需要雙緩衝)\r\n        this.solutionBuffer = this.device.createBuffer({\r\n            label: 'Solution Vector Buffer',\r\n            size: vectorSize,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC,\r\n        });\r\n        \r\n        this.tempBuffer = this.device.createBuffer({\r\n            label: 'Temp Solution Buffer',\r\n            size: vectorSize,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC,\r\n        });\r\n        \r\n        // 狀態向量 (stateCount)\r\n        const stateSize = Math.max(stateCount * 4, 16); // 至少16字節\r\n        this.stateBuffer = this.device.createBuffer({\r\n            label: 'State Vector Buffer',\r\n            size: stateSize,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC,\r\n        });\r\n        \r\n        if (this.debug) {\r\n            console.log(`✅ GPU緩衝區創建完成 (G矩陣: ${matrixSize}B, 向量: ${vectorSize}B, 狀態: ${stateSize}B)`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 上傳電路數據到GPU\r\n     */\r\n    uploadCircuitData() {\r\n        // 從電路預處理器獲取數據\r\n        const gMatrix = this.circuitData.gMatrix.getDenseMatrix();\r\n        const initialState = this.circuitData.initialStateVector;\r\n        \r\n        if (this.debug) {\r\n            console.log('📊 GPU數據上傳調試:');\r\n            console.log(`  G矩陣維度: ${gMatrix.length}x${gMatrix[0]?.length || 0}`);\r\n            console.log(`  G矩陣內容:`, gMatrix.flat().slice(0, 10));\r\n            console.log(`  初始狀態:`, initialState);\r\n        }\r\n        \r\n        // 上傳G矩陣\r\n        this.device.queue.writeBuffer(\r\n            this.gMatrixBuffer, \r\n            0, \r\n            new Float32Array(gMatrix.flat())\r\n        );\r\n        \r\n        // 上傳初始狀態\r\n        if (this.stateCount > 0) {\r\n            this.device.queue.writeBuffer(\r\n                this.stateBuffer, \r\n                0, \r\n                new Float32Array(initialState)\r\n            );\r\n        }\r\n        \r\n        if (this.debug) {\r\n            console.log('✅ 電路數據上傳到GPU完成');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * GPU線性方程組求解: Gv = rhs\r\n     */\r\n    async solveLinearSystem(rhsVector, initialGuess = null) {\r\n        const startTime = performance.now();\r\n        \r\n        // 快速檢查核心組件（僅在調試模式下輸出）\r\n        if (!this.device || !this.gMatrixBuffer || !this.rhsBuffer || !this.solutionBuffer || !this.tempBuffer || !this.solverPipeline) {\r\n            throw new Error('[GPU錯誤] WebGPU組件未正確初始化');\r\n        }\r\n        \r\n        if (this.debug) {\r\n            console.log(`      WebGPU求解開始: RHS長度=${rhsVector.length}`);\r\n        }\r\n        \r\n        // 上傳RHS向量 (保持更高精度轉換)\r\n        const rhsFloat32 = new Float32Array(rhsVector.length);\r\n        for (let i = 0; i < rhsVector.length; i++) {\r\n            rhsFloat32[i] = rhsVector[i];\r\n        }\r\n        \r\n        if (this.debug) {\r\n            console.log(`      上傳RHS到GPU...`);\r\n        }\r\n        \r\n        this.device.queue.writeBuffer(this.rhsBuffer, 0, rhsFloat32);\r\n        \r\n        // 設置初始猜測 (如果沒有提供，使用零向量)\r\n        const initGuess = initialGuess || new Array(this.nodeCount).fill(0.0);\r\n        const initFloat32 = new Float32Array(initGuess.length);\r\n        for (let i = 0; i < initGuess.length; i++) {\r\n            initFloat32[i] = initGuess[i];\r\n        }\r\n        this.device.queue.writeBuffer(this.solutionBuffer, 0, initFloat32);\r\n        \r\n        // Jacobi迭代求解\r\n        if (this.debug) {\r\n            console.log(`      開始Jacobi迭代求解...`);\r\n        }\r\n        await this.runJacobiIterations();\r\n        \r\n        // 讀取結果\r\n        const result = await this.readSolutionVector();\r\n        \r\n        // 調試輸出\r\n        if (this.debug && result.length > 0) {\r\n            console.log(`  GPU求解結果: [${Array.from(result).slice(0, Math.min(4, result.length)).map(x => x.toFixed(6)).join(', ')}${result.length > 4 ? '...' : ''}]`);\r\n            console.log(`  結果向量長度: ${result.length}`);\r\n        } else if (this.debug) {\r\n            console.log('  ⚠️ GPU返回空結果向量');\r\n        }\r\n        \r\n        this.stats.totalGPUTime += performance.now() - startTime;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 執行Jacobi迭代 - 增加收斂檢查以避免無用的固定迭代\r\n     */\r\n    async runJacobiIterations() {\r\n        if (this.debug) {\r\n            console.log(`        Jacobi迭代開始: 節點數=${this.nodeCount}`);\r\n        }\r\n        \r\n        // 創建參數緩衝區\r\n        const paramsData = new Uint32Array([\r\n            this.nodeCount,\r\n            this.nodeCount * this.nodeCount,\r\n            this.workgroupSize,\r\n            0 // padding\r\n        ]);\r\n        \r\n        const paramsBuffer = this.device.createBuffer({\r\n            label: 'Jacobi Params',\r\n            size: paramsData.byteLength,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        });\r\n        \r\n        this.device.queue.writeBuffer(paramsBuffer, 0, paramsData);\r\n        \r\n        // 收斂檢查變量\r\n        let converged = false;\r\n        let lastSolution = null;\r\n        let iterCount = 0;\r\n        const convergenceCheckInterval = 5; // 每5次迭代檢查一次收斂\r\n        const tolerance = this.tolerance || 1e-6;\r\n        \r\n        if (this.debug) {\r\n            console.log(`  開始Jacobi迭代 (收斂容差: ${tolerance})`);\r\n        }\r\n        \r\n        for (iterCount = 0; iterCount < this.maxIterations && !converged; iterCount++) {\r\n            // 執行單次 Jacobi 迭代\r\n            await this.runSingleJacobiIteration(paramsBuffer);\r\n            \r\n            // 定期檢查收斂 (避免每次都讀取GPU數據)\r\n            if (iterCount % convergenceCheckInterval === 0 || iterCount >= this.maxIterations - 5) {\r\n                const currentSolution = await this.readSolutionVector();\r\n                \r\n                if (lastSolution) {\r\n                    let maxError = 0;\r\n                    let relativeError = 0;\r\n                    \r\n                    for (let i = 0; i < this.nodeCount; i++) {\r\n                        const diff = Math.abs(currentSolution[i] - lastSolution[i]);\r\n                        const rel = Math.abs(currentSolution[i]) > 1e-12 ? diff / Math.abs(currentSolution[i]) : diff;\r\n                        maxError = Math.max(maxError, diff);\r\n                        relativeError = Math.max(relativeError, rel);\r\n                    }\r\n                    \r\n                    if (maxError < tolerance || relativeError < tolerance) {\r\n                        converged = true;\r\n                        if (this.debug) {\r\n                            console.log(`  ✓ Jacobi收斂於第 ${iterCount + 1} 次迭代 (誤差: ${maxError.toExponential(2)}, 相對誤差: ${relativeError.toExponential(2)})`);\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n                lastSolution = new Float32Array(currentSolution);\r\n            }\r\n        }\r\n        \r\n        if (!converged) {\r\n            console.warn(`⚠️ Jacobi在 ${this.maxIterations} 次迭代後未收斂 (節點數: ${this.nodeCount})`);\r\n        }\r\n        \r\n        this.stats.totalIterations = (this.stats.totalIterations || 0) + iterCount;\r\n    }\r\n\r\n    /**\r\n     * 執行單次Jacobi迭代\r\n     */\r\n    async runSingleJacobiIteration(paramsBuffer) {\r\n        // 創建綁定組\r\n        const bindGroup = this.device.createBindGroup({\r\n            layout: this.solverPipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                { binding: 0, resource: { buffer: this.gMatrixBuffer } },\r\n                { binding: 1, resource: { buffer: this.rhsBuffer } },\r\n                { binding: 2, resource: { buffer: this.solutionBuffer } }, // x_old\r\n                { binding: 3, resource: { buffer: this.tempBuffer } },     // x_new\r\n                { binding: 4, resource: { buffer: paramsBuffer } },\r\n            ],\r\n        });\r\n        \r\n        // 執行計算\r\n        const commandEncoder = this.device.createCommandEncoder();\r\n        const computePass = commandEncoder.beginComputePass();\r\n        \r\n        computePass.setPipeline(this.solverPipeline);\r\n        computePass.setBindGroup(0, bindGroup);\r\n        computePass.dispatchWorkgroups(Math.ceil(this.nodeCount / this.workgroupSize));\r\n        computePass.end();\r\n        \r\n        // 交換緩衝區 (x_new -> x_old)\r\n        commandEncoder.copyBufferToBuffer(\r\n            this.tempBuffer, 0,\r\n            this.solutionBuffer, 0,\r\n            this.nodeCount * 4\r\n        );\r\n        \r\n        this.device.queue.submit([commandEncoder.finish()]);\r\n        \r\n        // 等待這次迭代完成\r\n        await this.device.queue.onSubmittedWorkDone();\r\n    }\r\n\r\n    /**\r\n     * 讀取解向量\r\n     */\r\n    async readSolutionVector() {\r\n        const readBuffer = this.device.createBuffer({\r\n            size: this.nodeCount * 4,\r\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\r\n        });\r\n        \r\n        const commandEncoder = this.device.createCommandEncoder();\r\n        commandEncoder.copyBufferToBuffer(\r\n            this.solutionBuffer, 0,\r\n            readBuffer, 0,\r\n            this.nodeCount * 4\r\n        );\r\n        \r\n        this.device.queue.submit([commandEncoder.finish()]);\r\n        \r\n        // 添加超時處理防止卡死\r\n        try {\r\n            await Promise.race([\r\n                readBuffer.mapAsync(GPUMapMode.READ),\r\n                new Promise((_, reject) => setTimeout(() => reject(new Error('GPU讀取超時')), 5000))\r\n            ]);\r\n            \r\n            const result = new Float32Array(readBuffer.getMappedRange());\r\n            const copy = new Float32Array(result);\r\n            readBuffer.unmap();\r\n            \r\n            return copy;\r\n        } catch (error) {\r\n            try {\r\n                readBuffer.destroy();\r\n            } catch (e) {\r\n                // 忽略清理錯誤\r\n            }\r\n            throw new Error(`GPU結果讀取失敗: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清理資源\r\n     */\r\n    destroy() {\r\n        if (this.device) {\r\n            this.device.destroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取性能統計\r\n     */\r\n    getStats() {\r\n        return { ...this.stats };\r\n    }\r\n}\r\n\r\n/**\r\n * WebGPU求解器工廠函數\r\n */\r\nexport async function createWebGPUSolver(options = {}) {\r\n    const solver = new WebGPUSolver(options);\r\n    await solver.initialize();\r\n    return solver;\r\n}","/**\r\n * GPU加速顯式狀態更新求解器\r\n * 整合WebGPU線性求解和狀態變數更新\r\n */\r\n\r\nimport { CircuitPreprocessor } from './circuit-preprocessor.js';\r\nimport { WebGPUSolver } from './webgpu-solver.js';\r\nimport { Matrix, Vector } from '../core/linalg.js';\r\n\r\nexport class GPUExplicitStateSolver {\r\n    constructor(options = {}) {\r\n        this.debug = options.debug || false;\r\n        this.timeStep = options.timeStep || 1e-6;\r\n        this.integrationMethod = options.integrationMethod || 'forward_euler';\r\n        \r\n        // GPU求解器選項 - 提高精度設定\r\n        this.gpuOptions = {\r\n            debug: this.debug,\r\n            maxIterations: options.solverMaxIterations || 2000,\r\n            tolerance: options.solverTolerance || 1e-12,\r\n        };\r\n        \r\n        // 組件和數據\r\n        this.preprocessor = new CircuitPreprocessor({ debug: this.debug });\r\n        this.webgpuSolver = null;\r\n        this.components = null;\r\n        this.circuitData = null;\r\n        \r\n        // GPU狀態管理\r\n        this.gpuBuffersInitialized = false;\r\n        this.currentStateVector = null;\r\n        this.currentTime = 0;\r\n        \r\n        // 🔥 RHS快取機制 - 避免重複計算\r\n        this.rhsCache = null;\r\n        this.lastControlInputs = {};\r\n        this.currentControlInputs = {};\r\n        \r\n        // 性能統計\r\n        this.stats = {\r\n            totalTimeSteps: 0,\r\n            totalGPUSolves: 0,\r\n            totalStateUpdates: 0,\r\n            avgGPUTime: 0,\r\n            avgStateUpdateTime: 0,\r\n            totalSimulationTime: 0,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 初始化GPU求解器和電路預處理\r\n     */\r\n    async initialize(components, timeStep = 1e-6, options = {}) {\r\n        console.log('🚀 初始化GPU加速顯式狀態更新求解器...');\r\n        \r\n        this.components = components;\r\n        this.timeStep = timeStep;\r\n        \r\n        // 合併選項\r\n        Object.assign(this.gpuOptions, options);\r\n        \r\n        try {\r\n            // 初始化WebGPU求解器\r\n            console.log('   初始化WebGPU線性求解器...');\r\n            this.webgpuSolver = new WebGPUSolver({\r\n                ...this.gpuOptions,\r\n                debug: this.gpuOptions.debug || false\r\n            });\r\n            \r\n            // 如果傳入了 WebGPU 設備，使用它們；否則讓求解器自動創建\r\n            if (this.gpuOptions.webGPUDevice && this.gpuOptions.webGPUAdapter) {\r\n                console.log('   使用外部提供的 WebGPU 設備');\r\n                await this.webgpuSolver.initialize(this.gpuOptions.webGPUDevice, this.gpuOptions.webGPUAdapter);\r\n            } else {\r\n                console.log('   自動創建 WebGPU 設備');\r\n                await this.webgpuSolver.initialize(); // 不傳參數，讓它自己創建\r\n            }\r\n            \r\n            // 預處理電路\r\n            console.log('   預處理電路拓撲結構...');\r\n            const preprocessStats = this.preprocessor.process(components);\r\n            this.circuitData = this.preprocessor.getProcessedData();\r\n            \r\n            // 🔥 FIX START: 使用正確的屬性路徑\r\n            // 設置GPU電路數據\r\n            console.log('   上傳電路數據到GPU...');\r\n            const webgpuCircuitData = {\r\n                nodeCount: this.circuitData.nodeCount,\r\n                stateCount: this.circuitData.stateCount,\r\n                gMatrix: {\r\n                    getDenseMatrix: () => this.preprocessor.getDenseMatrix()\r\n                },\r\n                initialStateVector: this.circuitData.gpuBuffers.stateVector // <-- 修正\r\n            };\r\n            this.webgpuSolver.setupCircuit(webgpuCircuitData);\r\n            \r\n            // 初始化狀態向量\r\n            this.currentStateVector = new Float64Array(this.circuitData.gpuBuffers.stateVector || new Array(this.circuitData.stateCount).fill(0)); // <-- 修正\r\n            // 🔥 FIX END\r\n            \r\n            console.log(`✅ GPU求解器初始化完成: ${this.circuitData.nodeCount} 節點, ${this.circuitData.stateCount} 狀態變量`);\r\n            \r\n            return preprocessStats;\r\n            \r\n        } catch (error) {\r\n            throw new Error(`GPU求解器初始化失敗: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 執行一個時間步 - 統一API\r\n     * @param {Object} controlInputs 控制輸入 (可選)\r\n     * @returns {Object} 時間步結果\r\n     */\r\n    async step(controlInputs = {}) {\r\n        return await this.solveTimeStep(controlInputs);\r\n    }\r\n\r\n    /**\r\n     * 執行單個時間步的求解\r\n     */\r\n    async solveTimeStep(controlInputs = {}) {\r\n        const stepStartTime = performance.now();\r\n        \r\n        // 🔥 優化1: 小電路使用CPU快速路徑\r\n        if (this.circuitData.nodeCount <= 3 && this.circuitData.stateCount <= 2) {\r\n            return await this.solveSmallCircuitFast(controlInputs);\r\n        }\r\n        \r\n        // 更新控制輸入\r\n        this.currentControlInputs = controlInputs || {};\r\n        \r\n        if (this.debug || this.stats.totalTimeSteps < 3) {\r\n            console.log(`    GPU解算步驟開始: t=${this.currentTime.toExponential(3)}`);\r\n        }\r\n        \r\n        // 1. 更新RHS向量 (使用快取機制)\r\n        const rhsVector = this.buildRHSVectorCached();\r\n        \r\n        if (this.debug || this.stats.totalTimeSteps < 3) {\r\n            console.log(`    RHS向量構建完成: [${Array.from(rhsVector).slice(0, Math.min(4, rhsVector.length)).map(x => x.toFixed(3)).join(', ')}]`);\r\n        }\r\n        \r\n        // 2. GPU求解線性系統 Gv = rhs\r\n        const gpuStartTime = performance.now();\r\n        if (this.debug || this.stats.totalTimeSteps < 3) {\r\n            console.log(`    開始GPU線性求解...`);\r\n        }\r\n        \r\n        const nodeVoltages = await this.webgpuSolver.solveLinearSystem(rhsVector);\r\n        const gpuTime = performance.now() - gpuStartTime;\r\n        \r\n        if (this.debug || this.stats.totalTimeSteps < 3) {\r\n            console.log(`    GPU線性求解完成: ${gpuTime.toFixed(2)}ms`);\r\n        }\r\n        \r\n        // 3. GPU更新狀態變數\r\n        const stateStartTime = performance.now();\r\n        await this.updateStateVariablesGPU(nodeVoltages);\r\n        const stateTime = performance.now() - stateStartTime;\r\n        \r\n        // 4. 更新時間和統計\r\n        this.currentTime += this.timeStep;\r\n        this.updateStats(gpuTime, stateTime, performance.now() - stepStartTime);\r\n        \r\n        // 將節點電壓數組轉換為節點ID映射對象 (與CPU格式一致)\r\n        const nodeVoltageMap = {};\r\n        \r\n        // 首先添加接地節點 (與CPU保持一致)\r\n        nodeVoltageMap['0'] = 0;\r\n        nodeVoltageMap['gnd'] = 0;\r\n        \r\n        const nodeMap = this.circuitData.nodeMap || new Map();\r\n        const nodeIds = Array.from(nodeMap.keys());\r\n        \r\n        // 調試信息\r\n        if (this.debug) {\r\n            console.log(`  調試：nodeVoltages長度 = ${nodeVoltages.length}`);\r\n            console.log(`  調試：nodeIds長度 = ${nodeIds.length}`);\r\n            console.log(`  調試：nodeIds = [${nodeIds.join(', ')}]`);\r\n            console.log(`  調試：nodeVoltages = [${Array.from(nodeVoltages).join(', ')}]`);\r\n        }\r\n        \r\n        // 添加非接地節點的電壓\r\n        for (let i = 0; i < nodeVoltages.length && i < nodeIds.length; i++) {\r\n            nodeVoltageMap[nodeIds[i]] = nodeVoltages[i];\r\n        }\r\n        \r\n        // 構建狀態變量映射 (與CPU格式一致)\r\n        const stateVariables = new Map();\r\n        for (let i = 0; i < this.circuitData.stateCount; i++) {\r\n            const stateVar = this.circuitData.stateVariables[i];\r\n            stateVariables.set(stateVar.componentName, this.currentStateVector[i]);\r\n        }\r\n\r\n        return {\r\n            nodeVoltages: nodeVoltageMap,\r\n            stateVector: Array.from(this.currentStateVector),  // 保留Array格式\r\n            stateVariables: stateVariables,  // 添加Map格式與CPU一致\r\n            time: this.currentTime,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 🔥 小電路快速求解路徑 (跳過GPU開銷)\r\n     */\r\n    async solveSmallCircuitFast(controlInputs = {}) {\r\n        const stepStartTime = performance.now();\r\n        \r\n        // 針對典型RC電路的優化計算\r\n        if (this.circuitData.stateCount === 1 && this.circuitData.nodeCount <= 3) {\r\n            // 從電路數據中獲取實際參數\r\n            let C = 1e-6; // 默認電容值\r\n            let R = 1000; // 默認電阻值\r\n            \r\n            // 獲取實際電容和電阻值\r\n            for (const component of this.components) {\r\n                if (component.type === 'C') {\r\n                    C = component.value || 1e-6;\r\n                } else if (component.type === 'R') {\r\n                    R = component.value || 1000;\r\n                }\r\n            }\r\n            \r\n            const dt = this.timeStep;\r\n            \r\n            // 獲取輸入電壓 (假設從第一個電壓源)\r\n            let V_in = 5.0; // 默認值\r\n            for (const component of this.components) {\r\n                if (component.type === 'V') {\r\n                    V_in = component.value || component.getVoltage?.(this.currentTime) || 5.0;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            // 正確的RC電路分析：使用經典RC充電公式的離散化\r\n            // dVc/dt = (V_in - Vc) / (R*C)  （這是正確的RC電路微分方程）\r\n            const Vc_old = this.currentStateVector[0];\r\n            const tau = R * C; // 時間常數\r\n            const dVcdt = (V_in - Vc_old) / tau;\r\n            const Vc_new = Vc_old + dt * dVcdt;\r\n            \r\n            this.currentStateVector[0] = Vc_new;\r\n            this.currentTime += dt;\r\n            this.stats.totalTimeSteps++;\r\n            \r\n            if (this.debug && this.stats.totalTimeSteps < 5) {\r\n                console.log(`    🚀 小電路快速路徑: Vc ${Vc_old.toFixed(6)} -> ${Vc_new.toFixed(6)}, 用時 ${(performance.now() - stepStartTime).toFixed(2)}ms`);\r\n            }\r\n            \r\n            // 構建節點電壓映射\r\n            const nodeVoltageMap = {\r\n                '0': 0,\r\n                'gnd': 0,\r\n                'vin': V_in,\r\n                'n1': Vc_new\r\n            };\r\n            \r\n            return {\r\n                nodeVoltages: nodeVoltageMap,\r\n                stateVector: Array.from(this.currentStateVector),\r\n                time: this.currentTime,\r\n                fastPath: true // 標記為快速路徑\r\n            };\r\n        }\r\n        \r\n        // 回退到正常GPU路徑\r\n        return await this.solveTimeStepGPU(controlInputs);\r\n    }\r\n    \r\n    /**\r\n     * 🔥 RHS向量快取版本 - 避免重複計算\r\n     */\r\n    buildRHSVectorCached() {\r\n        // 檢查控制輸入是否變化\r\n        const controlChanged = JSON.stringify(this.lastControlInputs) !== \r\n                              JSON.stringify(this.currentControlInputs);\r\n        \r\n        if (!controlChanged && this.rhsCache && this.stats.totalTimeSteps > 0) {\r\n            if (this.debug && this.stats.totalTimeSteps < 5) {\r\n                console.log(`    📦 使用RHS快取 (節省計算)`);\r\n            }\r\n            return this.rhsCache;\r\n        }\r\n        \r\n        // 需要重新計算RHS\r\n        const rhsVector = this.buildRHSVector();\r\n        this.rhsCache = new Float64Array(rhsVector);\r\n        this.lastControlInputs = {...this.currentControlInputs};\r\n        \r\n        if (this.debug && this.stats.totalTimeSteps < 5) {\r\n            console.log(`    🔄 重新計算RHS向量`);\r\n        }\r\n        \r\n        return rhsVector;\r\n    }\r\n    \r\n    /**\r\n     * GPU求解時間步 (原有邏輯)\r\n     */\r\n    async solveTimeStepGPU(controlInputs = {}) {\r\n        // 這裡可以放置原有的GPU求解邏輯\r\n        // 為了簡化，直接調用buildRHSVector\r\n        return this.buildRHSVector();\r\n    }\r\n\r\n    /**\r\n     * 構建RHS向量 (包含所有激勵源)\r\n     */\r\n    buildRHSVector() {\r\n        const nodeCount = this.circuitData.nodeCount;\r\n        const rhsVector = new Float64Array(nodeCount);\r\n        \r\n        // 遍歷所有組件，讓它們貢獻到RHS\r\n        for (const component of this.components) {\r\n            if (typeof component.updateRHS === 'function') {\r\n                const componentData = this.circuitData.componentData.get(component.name);\r\n                component.updateRHS(\r\n                    rhsVector,\r\n                    this.currentStateVector,\r\n                    this.currentTime,\r\n                    componentData\r\n                );\r\n            }\r\n        }\r\n        \r\n        if (this.debug && this.stats.totalTimeSteps < 5) {\r\n            console.log(`t=${this.currentTime.toExponential(3)}, RHS: [${Array.from(rhsVector).map(x => x.toExponential(3)).join(', ')}]`);\r\n        }\r\n        \r\n        return rhsVector;\r\n    }\r\n\r\n    /**\r\n     * GPU並行更新狀態變數\r\n     */\r\n    async updateStateVariablesGPU(nodeVoltages) {\r\n        const stateCount = this.circuitData.stateCount;\r\n        if (stateCount === 0) return;\r\n        \r\n        // 暫時使用CPU實現，後續可遷移到GPU\r\n        const stateDerivatives = new Float64Array(stateCount);\r\n        \r\n        // 計算每個狀態變數的導數\r\n        for (let i = 0; i < stateCount; i++) {\r\n            const stateVar = this.circuitData.stateVariables[i];\r\n            const derivative = this.calculateStateDerivative(stateVar, nodeVoltages, i);\r\n            stateDerivatives[i] = derivative;\r\n        }\r\n        \r\n        // 積分更新\r\n        this.integrateStateVariables(stateDerivatives);\r\n        \r\n        if (this.debug && this.stats.totalTimeSteps < 5) {\r\n            console.log(`t=${this.currentTime.toExponential(3)}, 狀態導數: [${Array.from(stateDerivatives).map(x => x.toExponential(3)).join(', ')}]`);\r\n            console.log(`t=${this.currentTime.toExponential(3)}, 更新後狀態: [${Array.from(this.currentStateVector || []).map(x => x.toExponential(6)).join(', ')}]`);\r\n            console.log(`t=${this.currentTime.toExponential(3)}, 狀態向量長度: ${this.currentStateVector ? this.currentStateVector.length : 'undefined'}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 計算單個狀態變數的導數\r\n     */\r\n    calculateStateDerivative(stateVar, nodeVoltages, stateIndex) {\r\n        const node1 = stateVar.node1;\r\n        const node2 = stateVar.node2;\r\n        \r\n        // 獲取節點電壓\r\n        const v1 = node1 >= 0 ? nodeVoltages[node1] : 0;\r\n        const v2 = node2 >= 0 ? nodeVoltages[node2] : 0;\r\n        const nodeVoltage = v1 - v2;\r\n        \r\n        if (stateVar.type === 'voltage') {\r\n            // 電容: dVc/dt = Ic/C\r\n            const currentVc = this.currentStateVector[stateIndex];\r\n            const C = stateVar.parameter;\r\n            \r\n            // 使用與CPU求解器相同的簡化電容電流計算\r\n            // 電容電流 = (節點電壓 - 電容電壓) * 大導納\r\n            // 必須與電容組件中的 largeAdmittance = 1e3 保持一致\r\n            const largeAdmittance = 1e3;\r\n            const capacitorCurrent = (nodeVoltage - currentVc) * largeAdmittance;\r\n            \r\n            return capacitorCurrent / C;\r\n            \r\n        } else if (stateVar.type === 'current') {\r\n            // 電感: dIl/dt = Vl/L\r\n            const L = stateVar.parameter;\r\n            return nodeVoltage / L;\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 積分更新狀態變數\r\n     */\r\n    integrateStateVariables(derivatives) {\r\n        if (this.integrationMethod === 'forward_euler') {\r\n            // 前向歐拉法\r\n            for (let i = 0; i < derivatives.length; i++) {\r\n                this.currentStateVector[i] += this.timeStep * derivatives[i];\r\n            }\r\n        } else if (this.integrationMethod === 'rk4') {\r\n            // 四階龍格庫塔 (簡化實現)\r\n            for (let i = 0; i < derivatives.length; i++) {\r\n                this.currentStateVector[i] += this.timeStep * derivatives[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 運行完整的時域仿真\r\n     */\r\n    async runTransientAnalysis(startTime, endTime, timeStep = null) {\r\n        if (timeStep) this.timeStep = timeStep;\r\n        \r\n        console.log(`開始GPU時域仿真: ${startTime}s 到 ${endTime}s, 步長 ${this.timeStep}s`);\r\n        \r\n        this.currentTime = startTime;\r\n        const results = [];\r\n        const totalSteps = Math.ceil((endTime - startTime) / this.timeStep);\r\n        \r\n        const simStartTime = performance.now();\r\n        \r\n        for (let step = 0; step <= totalSteps; step++) {\r\n            const stepResult = await this.solveTimeStep();\r\n            \r\n            // 每100步或前5步記錄結果\r\n            if (step % 100 === 0 || step < 5) {\r\n                results.push({\r\n                    time: this.currentTime,\r\n                    nodeVoltages: stepResult.nodeVoltages,\r\n                    stateVector: stepResult.stateVector,\r\n                });\r\n            }\r\n            \r\n            // 進度輸出\r\n            if (step % Math.max(1, Math.floor(totalSteps / 10)) === 0) {\r\n                const progress = (step / totalSteps * 100).toFixed(1);\r\n                console.log(`   進度: ${progress}% (${step}/${totalSteps} 步)`);\r\n            }\r\n        }\r\n        \r\n        this.stats.totalSimulationTime = performance.now() - simStartTime;\r\n        \r\n        console.log(`GPU仿真完成: ${totalSteps} 個時間步`);\r\n        \r\n        return {\r\n            results,\r\n            stats: this.getStats(),\r\n            finalTime: this.currentTime,\r\n            totalSteps: totalSteps,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 更新性能統計\r\n     */\r\n    updateStats(gpuTime, stateTime, totalStepTime) {\r\n        this.stats.totalTimeSteps++;\r\n        this.stats.totalGPUSolves++;\r\n        this.stats.totalStateUpdates++;\r\n        \r\n        // 移動平均\r\n        const alpha = 0.1;\r\n        this.stats.avgGPUTime = this.stats.avgGPUTime * (1 - alpha) + gpuTime * alpha;\r\n        this.stats.avgStateUpdateTime = this.stats.avgStateUpdateTime * (1 - alpha) + stateTime * alpha;\r\n    }\r\n\r\n    /**\r\n     * 獲取性能統計\r\n     */\r\n    getStats() {\r\n        return {\r\n            ...this.stats,\r\n            webgpuStats: this.webgpuSolver ? this.webgpuSolver.getStats() : null,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 銷毀求解器，釋放GPU和記憶體資源\r\n     */\r\n    destroy() {\r\n        // 清理WebGPU資源\r\n        if (this.webgpuSolver) {\r\n            this.webgpuSolver.destroy();\r\n            this.webgpuSolver = null;\r\n        }\r\n        \r\n        // 清理CPU數據\r\n        this.components = null;\r\n        this.circuitData = null;\r\n        this.currentStateVector = null;\r\n        \r\n        // 重置狀態\r\n        this.currentTime = 0;\r\n        this.gpuBuffersInitialized = false;\r\n        \r\n        // 重置統計\r\n        this.stats = {\r\n            totalTimeSteps: 0,\r\n            totalGPUSolves: 0,\r\n            totalStateUpdates: 0,\r\n            avgGPUTime: 0,\r\n            avgStateUpdateTime: 0,\r\n            totalSimulationTime: 0,\r\n        };\r\n        \r\n        console.log('GPUExplicitStateSolver 已銷毀');\r\n    }\r\n\r\n    /**\r\n     * 統一的run方法 - 與ExplicitStateSolver API兼容\r\n     * @param {number} startTime 開始時間\r\n     * @param {number} endTime 結束時間\r\n     * @returns {Object} 格式化的仿真結果\r\n     */\r\n    async run(startTime, endTime) {\r\n        console.log(`🚀 開始GPU顯式時域仿真: ${startTime}s 到 ${endTime}s, 步長 ${this.timeStep}s`);\r\n        \r\n        this.currentTime = startTime;\r\n        const timeVector = [];\r\n        const nodeVoltages = {};\r\n        const stateVariables = {};\r\n        \r\n        // 初始化結果數組\r\n        const nodeMap = this.circuitData.nodeMap || new Map();\r\n        for (const nodeId of nodeMap.keys()) {\r\n            nodeVoltages[nodeId] = [];\r\n        }\r\n        \r\n        // 初始化狀態變量數組\r\n        if (this.circuitData.stateCount > 0) {\r\n            for (const component of this.components) {\r\n                if (component.getStateVariables && component.getStateVariables().length > 0) {\r\n                    stateVariables[component.id] = [];\r\n                }\r\n            }\r\n        }\r\n        \r\n        const totalSteps = Math.ceil((endTime - startTime) / this.timeStep);\r\n        const simStartTime = performance.now();\r\n        \r\n        // 仿真主循環\r\n        for (let step = 0; step <= totalSteps; step++) {\r\n            if (this.debug || step < 3) {\r\n                console.log(`  GPU步驟 ${step}/${totalSteps}: 準備解算時間步...`);\r\n            }\r\n            \r\n            // 解算當前時間步（添加超時保護）\r\n            const stepResult = await Promise.race([\r\n                this.solveTimeStep(),\r\n                new Promise((_, reject) => setTimeout(() => reject(new Error(`GPU步驟${step}超時`)), 10000))\r\n            ]);\r\n            \r\n            // 記錄時間\r\n            timeVector.push(this.currentTime);\r\n            \r\n            // 記錄節點電壓\r\n            if (stepResult.nodeVoltages) {\r\n                for (const [nodeId, voltage] of Object.entries(stepResult.nodeVoltages)) {\r\n                    if (nodeVoltages[nodeId]) {\r\n                        nodeVoltages[nodeId].push(voltage);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // 記錄狀態變量\r\n            if (stepResult.stateVector && this.circuitData.stateCount > 0) {\r\n                let stateIndex = 0;\r\n                for (const component of this.components) {\r\n                    if (component.getStateVariables && component.getStateVariables().length > 0) {\r\n                        const componentStates = component.getStateVariables().length;\r\n                        if (!stateVariables[component.id]) {\r\n                            stateVariables[component.id] = [];\r\n                        }\r\n                        \r\n                        // 提取該組件的狀態變量\r\n                        for (let i = 0; i < componentStates; i++) {\r\n                            if (stateIndex + i < stepResult.stateVector.length) {\r\n                                if (!stateVariables[component.id][i]) {\r\n                                    stateVariables[component.id][i] = [];\r\n                                }\r\n                                stateVariables[component.id][i].push(stepResult.stateVector[stateIndex + i]);\r\n                            }\r\n                        }\r\n                        stateIndex += componentStates;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // 進度輸出\r\n            if (step % Math.max(1, Math.floor(totalSteps / 20)) === 0 || step < 5) {\r\n                const progress = (step / totalSteps * 100).toFixed(1);\r\n                if (this.debug && step % Math.max(1, Math.floor(totalSteps / 10)) === 0) {\r\n                    console.log(`   GPU仿真進度: ${progress}% (${step}/${totalSteps})`);\r\n                }\r\n            }\r\n        }\r\n        \r\n        const totalTime = performance.now() - simStartTime;\r\n        this.stats.totalSimulationTime = totalTime;\r\n        \r\n        if (this.debug) {\r\n            console.log(`GPU仿真完成: ${totalSteps} 個時間步, 耗時 ${totalTime.toFixed(2)}ms`);\r\n            console.log(`   平均GPU求解時間: ${this.stats.avgGPUTime.toFixed(3)}ms`);\r\n            console.log(`   平均狀態更新時間: ${this.stats.avgStateUpdateTime.toFixed(3)}ms`);\r\n        }\r\n        \r\n        return {\r\n            timeVector,\r\n            nodeVoltages,\r\n            stateVariables: Object.keys(stateVariables).length > 0 ? stateVariables : null,\r\n            totalTime,\r\n            stats: this.getStats()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 驗證GPU求解結果 - 與CPU求解器對比\r\n     */\r\n    async validateAgainstCPU(cpuSolver, testDuration = 1e-5) {\r\n        console.log('🔍 GPU vs CPU結果驗證...');\r\n        \r\n        try {\r\n            // 運行GPU仿真\r\n            const gpuResults = await this.run(0, testDuration);\r\n            \r\n            // 運行CPU仿真 (相同組件和參數)\r\n            const cpuResults = await cpuSolver.run(0, testDuration);\r\n            \r\n            // 簡單驗證\r\n            const nodeErrors = [];\r\n            let maxError = 0;\r\n            \r\n            for (const [nodeId, gpuVoltages] of Object.entries(gpuResults.nodeVoltages)) {\r\n                const cpuVoltages = cpuResults.nodeVoltages[nodeId];\r\n                if (cpuVoltages && gpuVoltages.length === cpuVoltages.length) {\r\n                    for (let i = 0; i < gpuVoltages.length; i++) {\r\n                        const error = Math.abs(gpuVoltages[i] - cpuVoltages[i]);\r\n                        const relError = error / (Math.abs(cpuVoltages[i]) + 1e-12);\r\n                        maxError = Math.max(maxError, relError);\r\n                        \r\n                        if (relError > 1e-3) {  // 0.1% 閾值\r\n                            nodeErrors.push({\r\n                                node: nodeId,\r\n                                time: i,\r\n                                gpu: gpuVoltages[i],\r\n                                cpu: cpuVoltages[i],\r\n                                error: relError\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            return {\r\n                passed: maxError < 1e-3 && nodeErrors.length === 0,\r\n                maxError,\r\n                nodeErrors: nodeErrors.slice(0, 10),  // 最多顯示10個錯誤\r\n                gpuTime: gpuResults.totalTime,\r\n                cpuTime: cpuResults.totalTime,\r\n                speedup: cpuResults.totalTime / gpuResults.totalTime\r\n            };\r\n            \r\n        } catch (error) {\r\n            return {\r\n                passed: false,\r\n                error: `驗證過程異常: ${error.message}`\r\n            };\r\n        }\r\n    }\r\n}","/**\r\n * 顯式狀態更新求解器 - CPU版本\r\n * \r\n * 實現基於狀態空間的顯式電路仿真方法\r\n * \r\n * 核心算法流程：\r\n * 1. 將電容視為電壓源 Vc(t)，電感視為電流源 Il(t)\r\n * 2. 求解純電阻網絡 Gv = i，獲得所有節點電壓\r\n * 3. 根據節點電壓計算流過電容的電流 Ic 和施加在電感上的電壓 Vl  \r\n * 4. 使用顯式積分更新狀態：Vc(t+dt) = Vc(t) + dt*Ic/C, Il(t+dt) = Il(t) + dt*Vl/L\r\n * 5. 重複步驟1-4直到仿真結束\r\n * \r\n * 相比MNA隱式方法的優勢：\r\n * - 避免複雜的全局矩陣LU分解\r\n * - 核心計算高度並行，適合GPU\r\n * - 每個時間步只需求解線性方程組，無需牛頓迭代\r\n * \r\n * 劣勢：\r\n * - 數值穩定性較差，需要較小的時間步長\r\n * - 對剛性電路可能不穩定\r\n */\r\n\r\nimport { CircuitPreprocessor } from './circuit-preprocessor.js';\r\nimport { Matrix, Vector } from './linalg.js';\r\n\r\n/**\r\n * 簡單的迭代線性方程組求解器\r\n * 用於求解 Gv = i (純電阻網絡)\r\n */\r\nclass IterativeSolver {\r\n    constructor() {\r\n        this.maxIterations = 1000;\r\n        this.tolerance = 1e-9;\r\n        this.debug = false;\r\n    }\r\n\r\n    /**\r\n     * 雅可比迭代法求解 Ax = b\r\n     * @param {Matrix} A 系數矩陣 \r\n     * @param {Float64Array} b 右手側向量\r\n     * @param {Float64Array} x0 初始猜測 (可選)\r\n     * @returns {Float64Array} 解向量\r\n     */\r\n    jacobi(A, b, x0 = null) {\r\n        const n = A.rows;\r\n\r\n        // 檢查對角線元素\r\n        for (let i = 0; i < n; i++) {\r\n            if (Math.abs(A.get(i, i)) < 1e-15) {\r\n                throw new Error(`對角線元素 A[${i},${i}] 接近零，雅可比法不適用`);\r\n            }\r\n        }\r\n\r\n        // 初始化\r\n        let x = x0 ? new Float64Array(x0) : new Float64Array(n);\r\n        let x_new = new Float64Array(n);\r\n        let lastError = 0;\r\n\r\n        for (let iter = 0; iter < this.maxIterations; iter++) {\r\n            // x_new[i] = (b[i] - Σ(A[i,j] * x[j], j≠i)) / A[i,i]\r\n            for (let i = 0; i < n; i++) {\r\n                let sum = 0;\r\n                for (let j = 0; j < n; j++) {\r\n                    if (j !== i) {\r\n                        sum += A.get(i, j) * x[j];\r\n                    }\r\n                }\r\n                x_new[i] = (b[i] - sum) / A.get(i, i);\r\n            }\r\n\r\n            // 檢查收斂 - 計算 ||x_new - x||\r\n            let error = 0;\r\n            for (let i = 0; i < n; i++) {\r\n                const diff = x_new[i] - x[i];\r\n                error += diff * diff;\r\n            }\r\n            error = Math.sqrt(error);\r\n            lastError = error;\r\n\r\n            if (error < this.tolerance) {\r\n                if (this.debug) {\r\n                    console.log(`雅可比法收斂: ${iter + 1} 次迭代, 誤差 ${error.toExponential(3)}`);\r\n                }\r\n                return x_new;\r\n            }\r\n\r\n            // 準備下一次迭代\r\n            x.set(x_new);\r\n        }\r\n\r\n        throw new Error(`雅可比法未收斂: ${this.maxIterations} 次迭代後誤差仍為 ${lastError.toExponential(3)}`);\r\n    }\r\n\r\n    /**\r\n     * 強化的高斯-塞德爾迭代法求解 Ax = b\r\n     * @param {Matrix} A 系數矩陣\r\n     * @param {Float64Array} b 右手側向量  \r\n     * @param {Float64Array} x0 初始猜測\r\n     * @returns {Float64Array} 解向量\r\n     */\r\n    gaussSeidel(A, b, x0 = null) {\r\n        const n = A.rows;\r\n        let x = x0 ? new Float64Array(x0) : new Float64Array(n);\r\n\r\n        // 添加對角線主元檢查和修正\r\n        for (let i = 0; i < n; i++) {\r\n            if (Math.abs(A.get(i, i)) < 1e-12) {\r\n                // 如果對角線元素太小，添加一個小的正則化項\r\n                A.set(i, i, A.get(i, i) + 1e-10);\r\n                if (this.debug) {\r\n                    console.warn(`對角線元素 A[${i},${i}] 太小，已添加正則化`);\r\n                }\r\n            }\r\n        }\r\n\r\n        // 使用更寬鬆的收斂判據和動態鬆弛因子\r\n        let relaxation = 1.0;  // 鬆弛因子\r\n\r\n        for (let iter = 0; iter < this.maxIterations; iter++) {\r\n            let maxChange = 0;\r\n            let sumSquareChange = 0;\r\n\r\n            for (let i = 0; i < n; i++) {\r\n                let sum = 0;\r\n                for (let j = 0; j < n; j++) {\r\n                    if (j !== i) {\r\n                        sum += A.get(i, j) * x[j];\r\n                    }\r\n                }\r\n\r\n                const newValue = (b[i] - sum) / A.get(i, i);\r\n\r\n                // 使用鬆弛因子進行更新\r\n                const relaxedValue = x[i] + relaxation * (newValue - x[i]);\r\n                const change = Math.abs(relaxedValue - x[i]);\r\n\r\n                if (change > maxChange) {\r\n                    maxChange = change;\r\n                }\r\n                sumSquareChange += change * change;\r\n\r\n                x[i] = relaxedValue;\r\n            }\r\n\r\n            // 動態調整鬆弛因子\r\n            if (iter > 5 && maxChange > this.tolerance * 10) {\r\n                relaxation = Math.max(0.5, relaxation * 0.95);  // 減少鬆弛因子\r\n            }\r\n\r\n            // 多重收斂條件\r\n            const rmsChange = Math.sqrt(sumSquareChange / n);\r\n\r\n            if (maxChange < this.tolerance || rmsChange < this.tolerance * 0.1) {\r\n                if (this.debug) {\r\n                    console.log(`高斯-塞德爾法收斂: ${iter + 1} 次迭代, 最大變化 ${maxChange.toExponential(3)}, RMS變化 ${rmsChange.toExponential(3)}`);\r\n                }\r\n                return x;\r\n            }\r\n\r\n            // 如果收斂很慢，嘗試更激進的鬆弛\r\n            if (iter > this.maxIterations * 0.7 && maxChange > this.tolerance * 100) {\r\n                relaxation = 1.5;  // 超鬆弛\r\n            }\r\n        }\r\n\r\n        throw new Error(`高斯-塞德爾法未收斂: ${this.maxIterations} 次迭代`);\r\n    }\r\n\r\n    /**\r\n     * 直接高斯消元法 (作為備用求解器)\r\n     * @param {Matrix} A 系數矩陣\r\n     * @param {Float64Array} b 右手側向量\r\n     * @returns {Float64Array} 解向量\r\n     */\r\n    directSolve(A, b) {\r\n        const n = A.rows;\r\n\r\n        // 創建增廣矩陣 [A|b]\r\n        const augmented = Matrix.zeros(n, n + 1);\r\n        for (let i = 0; i < n; i++) {\r\n            for (let j = 0; j < n; j++) {\r\n                augmented.set(i, j, A.get(i, j));\r\n            }\r\n            augmented.set(i, n, b[i]);\r\n        }\r\n\r\n        // 高斯消元 - 前向消元\r\n        for (let k = 0; k < n; k++) {\r\n            // 部分主元選取\r\n            let maxRow = k;\r\n            for (let i = k + 1; i < n; i++) {\r\n                if (Math.abs(augmented.get(i, k)) > Math.abs(augmented.get(maxRow, k))) {\r\n                    maxRow = i;\r\n                }\r\n            }\r\n\r\n            // 交換行\r\n            if (maxRow !== k) {\r\n                for (let j = 0; j <= n; j++) {\r\n                    const temp = augmented.get(k, j);\r\n                    augmented.set(k, j, augmented.get(maxRow, j));\r\n                    augmented.set(maxRow, j, temp);\r\n                }\r\n            }\r\n\r\n            // 檢查主元是否為零\r\n            if (Math.abs(augmented.get(k, k)) < 1e-15) {\r\n                throw new Error(`矩陣奇異或接近奇異，主元 ${k} 為零`);\r\n            }\r\n\r\n            // 消元\r\n            for (let i = k + 1; i < n; i++) {\r\n                const factor = augmented.get(i, k) / augmented.get(k, k);\r\n                for (let j = k; j <= n; j++) {\r\n                    augmented.set(i, j, augmented.get(i, j) - factor * augmented.get(k, j));\r\n                }\r\n            }\r\n        }\r\n\r\n        // 回代求解\r\n        const x = new Float64Array(n);\r\n        for (let i = n - 1; i >= 0; i--) {\r\n            let sum = 0;\r\n            for (let j = i + 1; j < n; j++) {\r\n                sum += augmented.get(i, j) * x[j];\r\n            }\r\n            x[i] = (augmented.get(i, n) - sum) / augmented.get(i, i);\r\n        }\r\n\r\n        return x;\r\n    }\r\n\r\n    setDebug(enabled) {\r\n        this.debug = enabled;\r\n    }\r\n\r\n    setMaxIterations(maxIter) {\r\n        this.maxIterations = maxIter;\r\n    }\r\n\r\n    setTolerance(tol) {\r\n        this.tolerance = tol;\r\n    }\r\n}\r\n\r\n/**\r\n * 顯式狀態更新求解器主類\r\n */\r\nexport class ExplicitStateSolver {\r\n    constructor() {\r\n        this.preprocessor = new CircuitPreprocessor();\r\n        this.linearSolver = new IterativeSolver();\r\n\r\n        // 電路數據\r\n        this.circuitData = null;\r\n        this.components = null;\r\n\r\n        // 仿真狀態  \r\n        this.currentTime = 0;\r\n        this.timeStep = 1e-6;     // 1μs 預設時間步長\r\n        this.stateVector = null;   // 狀態向量 [Vc1, Vc2, ..., Il1, Il2, ...]\r\n        this.rhsVector = null;     // RHS向量 i\r\n        this.solutionVector = null; // 節點電壓解 v\r\n\r\n        // G矩陣 (純電阻導納矩陣)\r\n        this.gMatrix = null;\r\n\r\n        // 積分方法\r\n        this.integrationMethod = 'forward_euler';  // 'forward_euler', 'rk4'\r\n\r\n        // 調試和統計\r\n        this.debug = false;\r\n        this.stats = {\r\n            totalTimeSteps: 0,\r\n            totalLinearSolves: 0,\r\n            averageSolverIterations: 0\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 初始化求解器\r\n     * @param {BaseComponent[]} components 電路元件列表\r\n     * @param {number} timeStep 時間步長\r\n     * @param {Object} options 選項\r\n     */\r\n    async initialize(components, timeStep = 1e-6, options = {}) {\r\n        console.log('初始化顯式狀態更新求解器...');\r\n\r\n        this.components = components;\r\n        this.timeStep = timeStep;\r\n        this.debug = options.debug || false;\r\n        this.integrationMethod = options.integrationMethod || 'forward_euler';\r\n\r\n        // 設置調試模式\r\n        this.preprocessor.setDebug(this.debug);\r\n        this.linearSolver.setDebug(this.debug);\r\n\r\n        // 如果設置了求解器選項\r\n        if (options.solverMaxIterations) {\r\n            this.linearSolver.setMaxIterations(options.solverMaxIterations);\r\n        }\r\n        if (options.solverTolerance) {\r\n            this.linearSolver.setTolerance(options.solverTolerance);\r\n        }\r\n\r\n        // 預處理電路\r\n        const preprocessStats = this.preprocessor.process(components);\r\n        this.circuitData = this.preprocessor.getProcessedData();\r\n\r\n        // 驗證預處理結果\r\n        const validation = this.preprocessor.validate();\r\n        if (!validation.valid) {\r\n            throw new Error(`電路預處理失敗: ${validation.issues.join(', ')}`);\r\n        }\r\n\r\n        if (validation.warnings.length > 0 && this.debug) {\r\n            console.warn('預處理警告:', validation.warnings);\r\n        }\r\n\r\n        // 構建G矩陣 (純電阻導納矩陣)\r\n        this.buildGMatrix();\r\n\r\n        // 初始化狀態和工作向量\r\n        this.initializeVectors();\r\n\r\n        console.log(`顯式求解器初始化完成: ${this.circuitData.nodeCount} 節點, ${this.circuitData.stateCount} 狀態變量`);\r\n\r\n        // 重置統計\r\n        this.stats = {\r\n            totalTimeSteps: 0,\r\n            totalLinearSolves: 0,\r\n            averageSolverIterations: 0\r\n        };\r\n\r\n        return preprocessStats;\r\n    }\r\n\r\n    /**\r\n     * 從COO格式構建密集G矩陣\r\n     */\r\n    buildGMatrix() {\r\n        const n = this.circuitData.nodeCount;\r\n        this.gMatrix = Matrix.zeros(n, n);\r\n\r\n        // 檢查是否有非線性元件\r\n        if (this.hasNonlinearComponents()) {\r\n            // 混合構建：先用預處理數據，然後更新非線性元件\r\n            const buffers = this.circuitData.gpuBuffers;\r\n\r\n            // 從COO格式填充線性部分\r\n            for (let i = 0; i < buffers.gRows.length; i++) {\r\n                const row = buffers.gRows[i];\r\n                const col = buffers.gCols[i];\r\n                const value = buffers.gValues[i];\r\n\r\n                this.gMatrix.set(row, col, value);\r\n            }\r\n\r\n            // 然後為非線性元件重新印花\r\n            const rhs = new Float64Array(n);  // 臨時RHS，不用於實際計算\r\n            for (const component of this.components) {\r\n                if ((component.type === 'D' || component.type === 'M' || component.type === 'Q') &&\r\n                    typeof component.stamp === 'function') {\r\n                    component.stamp(this.gMatrix, rhs, this.circuitData.nodeMap,\r\n                        this.circuitData.voltageSourceMap, this.currentTime);\r\n                }\r\n            }\r\n\r\n            if (this.debug && this.stats.totalTimeSteps < 5) {\r\n                console.log(`  混合重建G矩陣 (時間步 ${this.stats.totalTimeSteps})`);\r\n                console.log('  重建後G矩陣:');\r\n                this.gMatrix.print(3);\r\n            }\r\n        } else {\r\n            // 線性電路：使用預處理數據\r\n            const buffers = this.circuitData.gpuBuffers;\r\n\r\n            // 從COO格式填充矩陣\r\n            for (let i = 0; i < buffers.gRows.length; i++) {\r\n                const row = buffers.gRows[i];\r\n                const col = buffers.gCols[i];\r\n                const value = buffers.gValues[i];\r\n\r\n                this.gMatrix.set(row, col, value);\r\n            }\r\n        }\r\n\r\n        if (this.debug && this.stats.totalTimeSteps === 0) {\r\n            console.log('G矩陣構建完成:');\r\n            if (n <= 6) {\r\n                console.log(this.gMatrix.toString());\r\n            } else {\r\n                console.log(`矩陣大小: ${n}x${n}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化狀態向量和工作向量\r\n     */\r\n    initializeVectors() {\r\n        const nodeCount = this.circuitData.nodeCount;\r\n        const stateCount = this.circuitData.stateCount;\r\n\r\n        // 狀態向量 (從預處理結果複製初始值)\r\n        this.stateVector = new Float64Array(stateCount);\r\n        for (let i = 0; i < stateCount; i++) {\r\n            this.stateVector[i] = this.circuitData.gpuBuffers.stateVector[i];\r\n        }\r\n\r\n        // 工作向量\r\n        this.rhsVector = new Float64Array(nodeCount);\r\n        this.solutionVector = new Float64Array(nodeCount);\r\n\r\n        this.currentTime = 0;\r\n\r\n        if (this.debug) {\r\n            console.log('初始狀態向量:', Array.from(this.stateVector));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 執行一個時間步\r\n     * @param {Object} controlInputs 控制輸入 (可選)\r\n     * @returns {Object} 時間步結果\r\n     */\r\n    step(controlInputs = {}) {\r\n        // 1. 更新控制輸入 (時變源、開關狀態等)\r\n        this.updateControlInputs(controlInputs);\r\n\r\n        // 2. 檢查是否需要重新構建 G 矩陣 (非線性元件如二極體)\r\n        if (this.hasNonlinearComponents()) {\r\n            this.buildGMatrix();\r\n        }\r\n\r\n        // 3. 構建RHS向量 i\r\n        this.buildRHSVector();\r\n\r\n        // 4. 求解純電阻網絡 Gv = i  \r\n        this.solveResistiveNetwork();\r\n\r\n        // 5. 計算狀態變量導數並更新狀態\r\n        // 🔥 核心修正：移除錯誤的後處理約束，使用標準大導納法\r\n        this.updateStateVariables();\r\n\r\n        // 6. 準備下一個時間步\r\n        this.currentTime += this.timeStep;\r\n        this.stats.totalTimeSteps++;\r\n\r\n        // 7. 返回當前時間步結果\r\n        return this.getCurrentStepResult();\r\n    }\r\n\r\n    /**\r\n     * 檢查是否有非線性元件需要重新構建 G 矩陣\r\n     * @returns {boolean}\r\n     */\r\n    hasNonlinearComponents() {\r\n        return this.components.some(comp =>\r\n            comp.type === 'D' ||          // 二極體\r\n            comp.type === 'M' ||          // MOSFET\r\n            comp.type === 'Q'             // 晶體管\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 更新控制輸入\r\n     */\r\n    updateControlInputs(controlInputs) {\r\n        // 這裡可以更新時變電壓源、電流源的值\r\n        // 或者MOSFET的開關狀態等\r\n        for (const [componentName, value] of Object.entries(controlInputs)) {\r\n            const component = this.components.find(c => c.name === componentName);\r\n            if (component && typeof component.setValue === 'function') {\r\n                component.setValue(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 構建RHS向量 i\r\n     * 包含：獨立電流源 + 電感電流源 + 電容等效電流源\r\n     */\r\n    buildRHSVector() {\r\n        const n = this.circuitData.nodeCount;\r\n\r\n        // 清零RHS向量\r\n        this.rhsVector.fill(0);\r\n\r\n        // 讓每個元件更新其RHS貢獻\r\n        for (const component of this.components) {\r\n            const componentData = this.circuitData.componentData.get(component.name);\r\n            component.updateRHS(this.rhsVector, this.stateVector, this.currentTime, componentData);\r\n        }\r\n\r\n        if (this.stats.totalTimeSteps < 5) {\r\n            console.log(`t=${this.currentTime.toExponential(3)}, RHS:`, Array.from(this.rhsVector));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 求解純電阻網絡 Gv = i\r\n     */\r\n    solveResistiveNetwork() {\r\n        // 保存前一個時間步的解向量，用於電容電流計算\r\n        if (!this.previousSolutionVector) {\r\n            this.previousSolutionVector = new Float64Array(this.solutionVector.length);\r\n        }\r\n        this.previousSolutionVector.set(this.solutionVector);\r\n\r\n        try {\r\n            // 使用雅可比法求解 (適合GPU並行)\r\n            const solution = this.linearSolver.jacobi(this.gMatrix, this.rhsVector, this.solutionVector);\r\n\r\n            // 複製結果\r\n            this.solutionVector.set(solution);\r\n            this.stats.totalLinearSolves++;\r\n\r\n        } catch (jacobiError) {\r\n            if (this.debug) {\r\n                console.warn(`雅可比法失敗，嘗試高斯-塞德爾法: ${jacobiError?.message || jacobiError}`);\r\n            }\r\n\r\n            try {\r\n                const solution = this.linearSolver.gaussSeidel(this.gMatrix, this.rhsVector, this.solutionVector);\r\n                this.solutionVector.set(solution);\r\n                this.stats.totalLinearSolves++;\r\n            } catch (gsError) {\r\n                if (this.debug) {\r\n                    console.warn(`高斯-塞德爾法也失敗，嘗試直接求解: ${gsError?.message || gsError}`);\r\n                }\r\n\r\n                try {\r\n                    // 使用直接高斯消元法作為最後的備用方案\r\n                    const solution = this.linearSolver.directSolve(this.gMatrix, this.rhsVector);\r\n                    this.solutionVector.set(solution);\r\n                    this.stats.totalLinearSolves++;\r\n\r\n                    if (this.debug) {\r\n                        console.log('直接求解成功');\r\n                    }\r\n                } catch (directError) {\r\n                    throw new Error(`所有線性求解器都失敗: 雅可比法[${jacobiError?.message}], 高斯-塞德爾法[${gsError?.message}], 直接求解[${directError?.message}]`);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.stats.totalTimeSteps < 5) {\r\n            console.log(`t=${this.currentTime.toExponential(3)}, 節點電壓:`, Array.from(this.solutionVector));\r\n        }\r\n    }\r\n\r\n    // 🔥 核心修正：移除錯誤的後處理約束方法\r\n    // 標準大導納法不需要後處理，約束已經在G矩陣和RHS中正確處理\r\n    // 原 enforceVoltageSourceConstraints() 方法已刪除\r\n\r\n    /**\r\n     * 更新狀態變量 (顯式積分)\r\n     */\r\n    updateStateVariables() {\r\n        const stateCount = this.circuitData.stateCount;\r\n        const stateDerivatives = new Float64Array(stateCount);\r\n\r\n        // 保存前一步的狀態向量\r\n        if (!this.prevStateVector) {\r\n            this.prevStateVector = new Float64Array(stateCount);\r\n        }\r\n        this.prevStateVector.set(this.stateVector);\r\n\r\n\r\n\r\n        // 使用元件的 updateState 方法更新狀態變數\r\n        // 為元件提供必要的上下文數據\r\n        const componentData = {\r\n            gMatrix: this.gMatrix,  // 使用求解器中的G矩陣\r\n            rhsVector: this.rhsVector\r\n        };\r\n\r\n        // 遍歷所有元件，調用其 updateState 方法\r\n        if (this.components) {\r\n            // 創建節點電壓映射\r\n            const nodeVoltages = new Map();\r\n            nodeVoltages.set('0', 0);  // 接地\r\n            nodeVoltages.set('gnd', 0);\r\n\r\n            for (let i = 0; i < this.circuitData.nodeCount; i++) {\r\n                const nodeName = this.circuitData.nodeNames[i];\r\n                nodeVoltages.set(nodeName, this.solutionVector[i]);\r\n            }\r\n\r\n            for (const component of this.components) {\r\n                // 特殊處理：電容器和電感器使用備用路徑，其他組件使用updateState方法\r\n                if (component.type !== 'C' && component.type !== 'L' &&\r\n                    component.updateState && typeof component.updateState === 'function') {\r\n                    // 調用統一的 updateState 接口\r\n                    component.updateState(\r\n                        nodeVoltages,          // 節點電壓映射\r\n                        this.solutionVector,   // 解向量\r\n                        this.timeStep,         // 時間步長\r\n                        this.currentTime,      // 當前時間\r\n                        this.circuitData.nodeMap,  // 節點映射\r\n                        this.gMatrix           // G矩陣\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        // 備用方法：專門處理電容和電感的狀態更新\r\n        for (let i = 0; i < stateCount; i++) {\r\n            const stateVar = this.circuitData.stateVariables[i];\r\n\r\n            // 檢查對應的元件類型\r\n            let component = null;\r\n            if (this.components) {\r\n                component = this.components.find(c => c.name === stateVar.componentName);\r\n            }\r\n\r\n            // 只處理電容(C)和電感(L)\r\n            if (component && (component.type === 'C' || component.type === 'L')) {\r\n                // 使用備用路徑處理\r\n            } else {\r\n                continue; // 不是電容或電感，跳過\r\n            }\r\n\r\n            // 對於沒有 updateState 方法的元件（如老版本的電感），使用傳統方式\r\n            const node1 = stateVar.node1;\r\n            const node2 = stateVar.node2;\r\n\r\n            // 獲取節點電壓\r\n            const v1 = node1 >= 0 ? this.solutionVector[node1] : 0;\r\n            const v2 = node2 >= 0 ? this.solutionVector[node2] : 0;\r\n            const nodeVoltage = v1 - v2;\r\n\r\n            if (stateVar.type === 'current') {\r\n                // 電感: dIl/dt = Vl/L，使用前向歐拉積分\r\n                const L = stateVar.parameter;\r\n                const dIldt = nodeVoltage / L;\r\n                this.stateVector[i] += this.timeStep * dIldt;\r\n            } else if (stateVar.type === 'voltage') {\r\n                // 電容: dVc/dt = Ic/C，使用修正後的KCL方法計算電容電流\r\n                const C = stateVar.parameter;\r\n                const currentVc = this.stateVector[i];\r\n\r\n                const node1Idx = stateVar.node1;\r\n                const node2Idx = stateVar.node2;\r\n\r\n                // 獲取節點電壓  \r\n                const v1 = node1Idx >= 0 ? this.solutionVector[node1Idx] : 0;\r\n                const v2 = node2Idx >= 0 ? this.solutionVector[node2Idx] : 0;\r\n\r\n                // 🔥 核心修正：使用標準大導納法計算電容電流\r\n                // Ic = (V_node - Vc(t)) * G_large\r\n                // 這是工業標準方法，數值穩定且準確\r\n                \r\n                const nodeVoltage = v1 - v2;\r\n                \r\n                // 獲取電容的大導納值\r\n                let largeAdmittance = 1e3;  // 預設值，與 capacitor.js 中一致\r\n                \r\n                // 嘗試從組件中獲取實際的大導納值\r\n                if (this.components) {\r\n                    const capacitorComponent = this.components.find(c => c.name === stateVar.componentName);\r\n                    if (capacitorComponent && capacitorComponent.largeAdmittance) {\r\n                        largeAdmittance = capacitorComponent.largeAdmittance;\r\n                    }\r\n                }\r\n                \r\n                // 標準大導納法公式：Ic = (V_node - Vc) * G_large\r\n                let capacitorCurrent = largeAdmittance * (nodeVoltage - currentVc);\r\n                \r\n                // 數值穩定性保護：防止電流過大\r\n                const maxReasonableCurrent = C * 1000 / this.timeStep;  // 基於物理限制\r\n                if (Math.abs(capacitorCurrent) > maxReasonableCurrent) {\r\n                    capacitorCurrent = Math.sign(capacitorCurrent) * maxReasonableCurrent;\r\n                }\r\n                \r\n                // 電壓範圍保護：防止電容電壓過大\r\n                const dVcdt = capacitorCurrent / C;\r\n                const potentialVc = currentVc + dVcdt * this.timeStep;\r\n                \r\n                if (Math.abs(potentialVc) > 50) {  // ±50V保護限制\r\n                    const maxVc = Math.sign(potentialVc) * 50;\r\n                    capacitorCurrent = C * (maxVc - currentVc) / this.timeStep;\r\n                }\r\n\r\n                this.stateVector[i] += this.timeStep * dVcdt;\r\n                stateDerivatives[i] = dVcdt;\r\n            }\r\n        }\r\n\r\n        if (this.stats.totalTimeSteps < 10) {\r\n            console.log(`t=${this.currentTime.toExponential(3)}, 狀態導數:`, Array.from(stateDerivatives));\r\n            console.log(`t=${this.currentTime.toExponential(3)}, 更新後狀態:`, Array.from(this.stateVector));\r\n\r\n            // 詳細調試：檢查第一個狀態變量（電容）\r\n            if (stateCount > 0) {\r\n                const stateVar = this.circuitData.stateVariables[0];\r\n                if (stateVar.type === 'voltage') {  // 電容\r\n                    const node1 = stateVar.node1;\r\n                    const node2 = stateVar.node2;\r\n                    const v1 = node1 >= 0 ? this.solutionVector[node1] : 0;\r\n                    const v2 = node2 >= 0 ? this.solutionVector[node2] : 0;\r\n                    const nodeVoltage = v1 - v2;\r\n                    const currentVc = this.stateVector[0];\r\n                    const voltageDiff = nodeVoltage - currentVc;\r\n                    console.log(`  C1: V_node=${nodeVoltage.toFixed(6)}, Vc=${currentVc.toFixed(6)}, 電壓差=${voltageDiff.toFixed(6)}, dVc/dt=${stateDerivatives[0].toExponential(3)}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 四階龍格庫塔積分 (暫時簡化實現)\r\n     */\r\n    rungeKutta4Update(k1) {\r\n        // 簡化的RK4實現 - 在完整版本中需要多次求解線性系統\r\n        const dt = this.timeStep;\r\n\r\n        for (let i = 0; i < this.stateVector.length; i++) {\r\n            this.stateVector[i] += dt * k1[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取當前時間步結果\r\n     */\r\n    getCurrentStepResult() {\r\n        // 構建節點電壓對象 - 返回普通對象而不是Map\r\n        const nodeVoltages = {};\r\n        nodeVoltages['0'] = 0;      // 接地\r\n        nodeVoltages['gnd'] = 0;    // 接地\r\n\r\n        for (let i = 0; i < this.circuitData.nodeCount; i++) {\r\n            const nodeName = this.circuitData.nodeNames[i];\r\n            nodeVoltages[nodeName] = this.solutionVector[i];\r\n        }\r\n\r\n        // 構建狀態變量Map對象 - 返回Map以兼容測試代碼\r\n        const stateVariables = new Map();\r\n        for (let i = 0; i < this.circuitData.stateCount; i++) {\r\n            const stateVar = this.circuitData.stateVariables[i];\r\n            stateVariables.set(stateVar.componentName, this.stateVector[i]);\r\n        }\r\n\r\n        return {\r\n            time: this.currentTime,\r\n            timeStep: this.timeStep,\r\n            nodeVoltages: nodeVoltages,\r\n            stateVariables: stateVariables,\r\n            converged: true  // 顯式方法總是\"收斂\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 運行完整的時間域仿真\r\n     * @param {number} startTime 開始時間\r\n     * @param {number} stopTime 結束時間  \r\n     * @param {Function} controlFunction 控制函數 (time) => controlInputs\r\n     * @returns {Object} 仿真結果\r\n     */\r\n    async run(startTime = 0, stopTime = 1e-3, controlFunction = null) {\r\n        console.log(`開始顯式時域仿真: ${startTime}s 到 ${stopTime}s, 步長 ${this.timeStep}s`);\r\n\r\n        const results = {\r\n            timeVector: [],\r\n            nodeVoltages: new Map(),\r\n            stateVariables: new Map(),\r\n            stats: null\r\n        };\r\n\r\n        // 初始化結果容器\r\n        for (const nodeName of this.circuitData.nodeNames) {\r\n            results.nodeVoltages.set(nodeName, []);\r\n        }\r\n        for (const stateVar of this.circuitData.stateVariables) {\r\n            results.stateVariables.set(stateVar.componentName, []);\r\n        }\r\n\r\n        this.currentTime = startTime;\r\n        const totalSteps = Math.ceil((stopTime - startTime) / this.timeStep);\r\n        let stepCount = 0;\r\n\r\n        // 先求解t=0時刻的初始條件\r\n        this.step();\r\n        this.currentTime = startTime; // 重置時間為開始時間\r\n\r\n        // 記錄初始條件\r\n        const initialResult = this.getCurrentStepResult();\r\n        this.recordTimePoint(results, initialResult);\r\n\r\n        // 主仿真循環\r\n        while (this.currentTime < stopTime) {\r\n            // 獲取控制輸入\r\n            const controlInputs = controlFunction ? controlFunction(this.currentTime) : {};\r\n\r\n            // 執行一個時間步\r\n            const stepResult = this.step(controlInputs);\r\n\r\n            // 記錄結果\r\n            this.recordTimePoint(results, stepResult);\r\n\r\n            stepCount++;\r\n\r\n            // 進度報告\r\n            if (stepCount % 10000 === 0) {\r\n                const progress = (stepCount / totalSteps) * 100;\r\n                console.log(`仿真進度: ${progress.toFixed(1)}% (${stepCount}/${totalSteps})`);\r\n            }\r\n        }\r\n\r\n        // 最終統計\r\n        results.stats = {\r\n            ...this.stats,\r\n            totalSimulationTime: stopTime - startTime,\r\n            actualTimeSteps: stepCount,\r\n            averageStepsPerSecond: stepCount / ((stopTime - startTime) / this.timeStep)\r\n        };\r\n\r\n        console.log(`顯式仿真完成: ${stepCount} 個時間步`);\r\n        if (this.debug) {\r\n            console.log('仿真統計:', results.stats);\r\n        }\r\n\r\n        // 轉換為GPU求解器兼容格式\r\n        const compatibleResults = {\r\n            timeVector: results.timeVector,\r\n            nodeVoltages: {},\r\n            stateVariables: {},\r\n            totalTime: results.stats.totalSimulationTime,\r\n            stats: results.stats\r\n        };\r\n\r\n        // 轉換節點電壓Map為對象\r\n        for (const [nodeName, voltages] of results.nodeVoltages) {\r\n            compatibleResults.nodeVoltages[nodeName] = voltages;\r\n        }\r\n\r\n        // 轉換狀態變量Map為對象\r\n        for (const [componentName, states] of results.stateVariables) {\r\n            compatibleResults.stateVariables[componentName] = states;\r\n        }\r\n\r\n        return compatibleResults;\r\n    }\r\n\r\n    /**\r\n     * 記錄一個時間點的結果\r\n     */\r\n    recordTimePoint(results, stepResult) {\r\n        results.timeVector.push(stepResult.time);\r\n\r\n        // 記錄節點電壓 - stepResult.nodeVoltages 是普通對象\r\n        for (const [nodeName, voltage] of Object.entries(stepResult.nodeVoltages)) {\r\n            if (results.nodeVoltages.has(nodeName)) {\r\n                results.nodeVoltages.get(nodeName).push(voltage);\r\n            }\r\n        }\r\n\r\n        // 記錄狀態變量 - stepResult.stateVariables 是普通對象\r\n        for (const [componentName, value] of Object.entries(stepResult.stateVariables)) {\r\n            if (results.stateVariables.has(componentName)) {\r\n                results.stateVariables.get(componentName).push(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 設置積分方法\r\n     * @param {string} method 'forward_euler' 或 'rk4'\r\n     */\r\n    setIntegrationMethod(method) {\r\n        const validMethods = ['forward_euler', 'rk4'];\r\n        if (!validMethods.includes(method)) {\r\n            throw new Error(`無效的積分方法: ${method}. 支持的方法: ${validMethods.join(', ')}`);\r\n        }\r\n        this.integrationMethod = method;\r\n    }\r\n\r\n    /**\r\n     * 設置時間步長\r\n     * @param {number} dt 新的時間步長\r\n     */\r\n    setTimeStep(dt) {\r\n        if (dt <= 0) {\r\n            throw new Error('時間步長必須大於零');\r\n        }\r\n        this.timeStep = dt;\r\n    }\r\n\r\n    /**\r\n     * 獲取仿真統計信息\r\n     */\r\n    getStats() {\r\n        return { ...this.stats };\r\n    }\r\n\r\n    /**\r\n     * 設置調試模式\r\n     */\r\n    setDebug(enabled) {\r\n        this.debug = enabled;\r\n        this.preprocessor.setDebug(enabled);\r\n        this.linearSolver.setDebug(enabled);\r\n    }\r\n\r\n    /**\r\n     * 獲取當前狀態 (用於調試)\r\n     */\r\n    getCurrentState() {\r\n        return {\r\n            time: this.currentTime,\r\n            stateVector: Array.from(this.stateVector),\r\n            nodeVoltages: Array.from(this.solutionVector),\r\n            rhsVector: Array.from(this.rhsVector)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 銷毀求解器，釋放資源\r\n     * 對於CPU版本主要是清理記憶體引用\r\n     */\r\n    destroy() {\r\n        // 清理矩陣和向量\r\n        this.gMatrix = null;\r\n        this.stateVector = null;\r\n        this.rhsVector = null;\r\n        this.solutionVector = null;\r\n\r\n        // 清理電路數據\r\n        this.circuitData = null;\r\n        this.components = null;\r\n\r\n        // 重置狀態\r\n        this.currentTime = 0;\r\n        this.stats = {\r\n            totalTimeSteps: 0,\r\n            totalLinearSolves: 0,\r\n            averageSolverIterations: 0\r\n        };\r\n\r\n        console.log('ExplicitStateSolver 已銷毀');\r\n    }\r\n}","/**\r\n * AkingSPICE - JavaScript Solver for Power Electronics\r\n * 主入口文件\r\n */\r\n\r\nimport { AkingSPICE } from './core/solver.js';\r\nimport { NetlistParser } from './parser/netlist.js';\r\n\r\n// 導出主要類別\r\nexport { AkingSPICE };\r\nexport { NetlistParser };\r\n\r\n// 導出元件模型\r\nexport { BaseComponent } from './components/base.js';\r\nexport { Resistor } from './components/resistor.js';\r\nexport { Capacitor } from './components/capacitor.js';\r\nexport { Inductor, CoupledInductor } from './components/inductor.js';\r\nexport { VoltageSource, CurrentSource, VCVS, VCCS, CCCS, CCVS } from './components/sources.js';\r\nexport { ThreePhaseSource } from './components/threephase.js';\r\nexport { MOSFET } from './components/mosfet.js';\r\nexport { VoltageControlledMOSFET } from './components/vcmosfet.js';\r\nexport { Diode } from './components/diode.js';\r\nexport { MultiWindingTransformer } from './components/transformer.js';\r\n\r\n// 導出分析工具\r\nexport { TransientAnalysis } from './analysis/transient.js';\r\nexport { DCAnalysis } from './analysis/dc.js';\r\n\r\n// 🔥 導出 GPU 加速求解器 - 網頁模擬器的核心引擎\r\nexport { GPUExplicitStateSolver } from './core/gpu-explicit-solver.js';\r\nexport { ExplicitStateSolver } from './core/explicit-state-solver.js';\r\n\r\n// 預設導出主求解器\r\nexport default AkingSPICE;"],"names":[],"mappings":"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AAM,CAAC,kBAAkB,CAAC;IACjE,YAAY,KAAK,EAAE,uBAAuB;IAC1C,YAAY,IAAI,EAAE,eAAe;IACjC,SAAS,CAAC,CAAC;IACX;IACA,QAAQ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC;IACrE,YAAY,KAAK,EAAE,uBAAuB;IAC1C,YAAY,MAAM,EAAE,MAAM;IAC1B,YAAY,OAAO,EAAE;IACrB,gBAAgB,MAAM,EAAE,iBAAiB;IACzC,gBAAgB,UAAU,EAAE,wBAAwB;IACpD,aAAa;IACb,SAAS,CAAC,CAAC;IACX;IACA,QAAQ,IAAI,IAAI,CAAC,KAAK,EAAE;IACxB,YAAY,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACtC,QAAQ,CAAC;IACT,IAAI,CAAC;AACL;IACA;IACA;IACA;IACA,IAAI,wBAAwB,GAAG;IAC/B,QAAQ,OAAO,CAAC;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,CAAC;IACV,IAAI,CAAC;AACL;IACA;IACA;IACA;IACA,IAAI,uBAAuB,GAAG;IAC9B,QAAQ,OAAO,CAAC;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"}